{"version":3,"sources":["../../src/_helpers/assign.js"],"names":["assign","Object","target","undefined","TypeError","output","index","arguments","length","source","nextValue","nextKey"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;AACA,IAAMA,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiB,SAASA,MAAT,CAAgBE,MAAhB,EAAwB;AACtD;AACA,MAAIA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAvC,EAA6C;AAC3C,UAAM,IAAIE,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAMC,MAAM,GAAGJ,MAAM,CAACC,MAAD,CAArB;;AAEA,OAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,SAAS,CAACC,MAAtC,EAA8CF,KAAK,EAAnD,EAAuD;AACrD,QAAMG,MAAM,GAAGF,SAAS,CAACD,KAAD,CAAxB;;AACA,QAAIG,MAAM,KAAKN,SAAX,IAAwBM,MAAM,KAAK,IAAvC,EAA6C;AAC3C,8BAAOA,MAAP,EAAe,UAACC,SAAD,EAAYC,OAAZ,EAAwB;AACrCN,QAAAA,MAAM,CAACM,OAAD,CAAN,GAAkBD,SAAlB;AACD,OAFD;AAGD;AACF;;AAED,SAAOL,MAAP;AACD,CAlBD;;eAoBeL,M","sourcesContent":["import forOwn from './forown';\n\n// Object.assign polyfyll\n/* istanbul ignore next */\nconst assign = Object.assign || function assign(target) {\n  /* istanbul ignore next */\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n\n  for (let index = 1; index < arguments.length; index++) {\n    const source = arguments[index];\n    if (source !== undefined && source !== null) {\n      forOwn(source, (nextValue, nextKey) => {\n        output[nextKey] = nextValue;\n      });\n    }\n  }\n\n  return output;\n};\n\nexport default assign;\n"],"file":"assign.js"}