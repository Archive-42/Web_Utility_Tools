{"version":3,"sources":["../../src/_helpers/deepfind.js"],"names":["deepFind","obj","givenPath","paths","split","current","i","length","undefined"],"mappings":";;;;;;;AAAA;AACA;AACe,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,SAAvB,EAAkC;AAC/C,MAAMC,KAAK,GAAG,OAAOD,SAAP,KAAqB,QAArB,GAAgCA,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAAhC,GAAuDF,SAArE;AACA,MAAIG,OAAO,GAAGJ,GAAd;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,QAAI,OAAOD,OAAO,CAACF,KAAK,CAACG,CAAD,CAAN,CAAd,KAA6B,WAAjC,EAA8C;AAC5C,aAAOE,SAAP;AACD;;AAEDH,IAAAA,OAAO,GAAGA,OAAO,CAACF,KAAK,CAACG,CAAD,CAAN,CAAjB;AACD;;AAED,SAAOD,OAAP;AACD","sourcesContent":["// gets value of a property in nested object\n// eg \"d\" from a.b.c.d\nexport default function deepFind(obj, givenPath) {\n  const paths = typeof givenPath === 'string' ? givenPath.split('.') : givenPath;\n  let current = obj;\n\n  for (let i = 0; i < paths.length; ++i) {\n    if (typeof current[paths[i]] === 'undefined') {\n      return undefined;\n    }\n\n    current = current[paths[i]];\n  }\n\n  return current;\n}\n"],"file":"deepfind.js"}