"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = afterSeempleArrayInit;

var _afterinit = _interopRequireDefault(require("../seemple/_afterinit"));

var _addlistener = _interopRequireDefault(require("../on/_addlistener"));

var _seempleerror = _interopRequireDefault(require("../_helpers/seempleerror"));

// the function returns array item converted to Model instance
function modelItemMediator(item, index) {
  var Model = this.Model; // if an item is already instance of Model

  if (item instanceof Model) {
    return item;
  }

  var itemData;

  if (item && typeof item.toJSON === 'function') {
    // if item is not falsy and if it has toJSON method
    // then retrieve instance data by this method
    itemData = item.toJSON(false);
  } else {
    // if not then use an item as its data
    itemData = item;
  }

  return new Model(itemData, this, index);
} // event handler to listen changes of Model property


function changeModel() {
  var Model = this.Model; // if model has wrong type then throw an error

  if (typeof Model !== 'function') {
    throw (0, _seempleerror["default"])('array:model_type', {
      Model: Model
    });
  } // attatch item mediator


  this.mediateItem(modelItemMediator);
} // event handler to listen changes of itemRenderer property


function changeItemRendererHandler() {
  var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _eventOptions$forceRe = eventOptions.forceRerender,
      forceRerender = _eventOptions$forceRe === void 0 ? true : _eventOptions$forceRe;
  this.rerender({
    forceRerender: forceRerender
  });
} // Seemple.Array initializer


function afterSeempleArrayInit() {
  // we need to calculate hasModel before change:Model is added
  var hasModel = 'Model' in this; // call Seemple initializer

  _afterinit["default"].call(this);

  (0, _addlistener["default"])(this, '_change:common:Model', changeModel, this, {
    skipChecks: true
  });
  (0, _addlistener["default"])(this, '_change:common:itemRenderer', changeItemRendererHandler, this, {
    skipChecks: true
  }); // call changeModel handler immediately if model is present
  // it will throw an error if Model is not a function

  if (hasModel) {
    changeModel.call(this);
  }
}
//# sourceMappingURL=_afterinit.js.map