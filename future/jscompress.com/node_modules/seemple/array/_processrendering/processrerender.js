"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processRerender;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _getalreadyrendered = _interopRequireDefault(require("./getalreadyrendered"));

var _renderitemnode = _interopRequireDefault(require("./renderitemnode"));

var _triggerone = _interopRequireDefault(require("../../trigger/_triggerone"));

// this function re-inserts rendered DOM nodes of items
// if they are rendered and forceRerender is falsy
// and renders array items from scratch if they aren't rendered yet or forceRerender is truthy
function processRerender(_ref) {
  var self = _ref.self,
      selfDef = _ref.selfDef,
      eventOptions = _ref.eventOptions,
      container = _ref.container;
  var forceRerender = eventOptions.forceRerender,
      silent = eventOptions.silent; // iterate over all items

  for (var i = 0; i < self.length; i++) {
    var item = self[i];

    if (item && (0, _typeof2["default"])(item) === 'object') {
      var alreadyRenderedNode = (0, _getalreadyrendered["default"])({
        item: item,
        selfDef: selfDef
      }); // if item is already rendered and forceRerender is falsy then re-insert DOM node
      // go to the next cycle iteration then

      if (!forceRerender && alreadyRenderedNode) {
        container.appendChild(alreadyRenderedNode);
        continue;
      } // node removal is called when an item is rendered
      // and forceRerender is truty


      if (alreadyRenderedNode) {
        if (container.contains(alreadyRenderedNode)) {
          container.removeChild(alreadyRenderedNode);
        }
      } // render new node


      var _renderItemNode = (0, _renderitemnode["default"])({
        selfDef: selfDef,
        self: self,
        item: item,
        eventOptions: eventOptions
      }),
          node = _renderItemNode.node,
          itemEventOptions = _renderItemNode.itemEventOptions;

      if (node) {
        container.appendChild(node);

        if (!silent) {
          (0, _triggerone["default"])(item, 'afterrender', itemEventOptions);
        }
      }
    }
  }
}
//# sourceMappingURL=processrerender.js.map