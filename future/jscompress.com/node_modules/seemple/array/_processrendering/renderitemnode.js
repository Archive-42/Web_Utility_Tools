"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = renderItemNode;

var _parsebindings = _interopRequireDefault(require("../../parsebindings"));

var _bindnode = _interopRequireDefault(require("../../bindnode"));

var _unbindnode = _interopRequireDefault(require("../../unbindnode"));

var _triggerone = _interopRequireDefault(require("../../trigger/_triggerone"));

var _init = _interopRequireDefault(require("../../_core/init"));

var _seempleerror = _interopRequireDefault(require("../../_helpers/seempleerror"));

var _getnodes = _interopRequireDefault(require("../../bindnode/_getnodes"));

var htmlTestReg = /</; // the function makes the main rendering job
// it renders given array item

function renderItemNode(_ref) {
  var selfDef = _ref.selfDef,
      self = _ref.self,
      item = _ref.item,
      eventOptions = _ref.eventOptions;
  var renderer = item.renderer,
      _item$bindRenderedAsS = item.bindRenderedAsSandbox,
      bindRenderedAsSandbox = _item$bindRenderedAsS === void 0 ? true : _item$bindRenderedAsS;
  var itemRenderer = self.itemRenderer;
  var usedRenderer = renderer || itemRenderer;
  var rendererContext = usedRenderer === renderer ? item : self;
  var selfId = selfDef.id;
  var moveSandbox = eventOptions.moveSandbox,
      forceRerender = eventOptions.forceRerender,
      silent = eventOptions.silent; // if renderer is not found return null as a node

  if (!usedRenderer) {
    return {
      node: null
    };
  }

  var itemDef = (0, _init["default"])(item);
  var _itemDef$renderedInAr = itemDef.renderedInArrays,
      renderedInArrays = _itemDef$renderedInAr === void 0 ? {} : _itemDef$renderedInAr; // if moveSandbox option is truthy then return a sandbox of an item

  if (moveSandbox) {
    var sandboxPropDef = itemDef.props.sandbox;

    if (sandboxPropDef) {
      var bindings = sandboxPropDef.bindings;

      var _node = bindings ? bindings[0].node : null;

      if (_node) {
        for (var i = 0, keys = Object.keys(renderedInArrays); i < keys.length; i++) {
          var key = keys[i];

          if (_node === renderedInArrays[key]) {
            // delete an information about previous array
            delete renderedInArrays[key];
            break;
          }
        }

        renderedInArrays[selfId] = _node; // moving sandbox does not fire "render" event but it fire "afterrender"
        // since "afterrender" means "node is inserted to DOM"

        return {
          node: _node.__replacedByNode || _node,
          itemEventOptions: {
            node: _node,
            self: item,
            parentArray: self
          }
        };
      }
    }
  }

  itemDef.renderedInArrays = renderedInArrays; // if usedRenderer is function then call it

  if (typeof usedRenderer === 'function') {
    usedRenderer = usedRenderer.call(rendererContext, item);
  } // if usedRenderer is string


  if (typeof usedRenderer === 'string') {
    if (!htmlTestReg.test(usedRenderer)) {
      // if usedRenderer is a selector
      var selector = usedRenderer;
      usedRenderer = (0, _getnodes["default"])(self, selector);

      if (usedRenderer.length) {
        // if a node is found by given selector then use its HTML
        usedRenderer = usedRenderer[0].innerHTML.trim();
      } else {
        // if not throw an error
        throw (0, _seempleerror["default"])('array:renderer_node_missing', {
          selector: selector
        });
      }
    } else {
      // if usedRenderer is HTML string
      usedRenderer = usedRenderer.trim();
    }
  } // pass a node or HTML


  var parsed = (0, _parsebindings["default"])(item, usedRenderer, eventOptions); // if parseBindings returned more/less than one node then throw an error

  if (parsed.length !== 1) {
    throw (0, _seempleerror["default"])('array:rendered_number_nodes', {
      length: parsed.length
    });
  }

  var node = renderedInArrays[selfId] = parsed[0];

  if (bindRenderedAsSandbox) {
    if (forceRerender) {
      (0, _unbindnode["default"])(item, 'sandbox', null, null, eventOptions);
    }

    (0, _bindnode["default"])(item, 'sandbox', node, null, eventOptions);
  } // if silent is not truthy then fire 'render' event and virtual methods


  if (!silent) {
    var itemEventOptions = {
      node: node,
      self: item,
      parentArray: self
    };
    var onRender = item.onRender;
    var onItemRender = self.onItemRender;

    if (onRender) {
      onRender.call(item, itemEventOptions);
    }

    if (onItemRender) {
      onItemRender.call(self, item, itemEventOptions);
    }

    (0, _triggerone["default"])(item, 'render', itemEventOptions);
    return {
      node: node.__replacedByNode || node,
      itemEventOptions: itemEventOptions
    };
  }

  return {
    node: node.__replacedByNode || node
  };
}
//# sourceMappingURL=renderitemnode.js.map