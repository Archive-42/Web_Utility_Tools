{"version":3,"sources":["../../../src/array/_processrendering/renderitemnode.js"],"names":["htmlTestReg","renderItemNode","selfDef","self","item","eventOptions","renderer","bindRenderedAsSandbox","itemRenderer","usedRenderer","rendererContext","selfId","id","moveSandbox","forceRerender","silent","node","itemDef","renderedInArrays","sandboxPropDef","props","sandbox","bindings","i","keys","Object","length","key","__replacedByNode","itemEventOptions","parentArray","call","test","selector","innerHTML","trim","parsed","onRender","onItemRender"],"mappings":"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","sourcesContent":["import parseBindings from '../../parsebindings';\nimport bindNode from '../../bindnode';\nimport unbindNode from '../../unbindnode';\nimport triggerOne from '../../trigger/_triggerone';\nimport initSeemple from '../../_core/init';\nimport seempleError from '../../_helpers/seempleerror';\nimport getNodes from '../../bindnode/_getnodes';\n\nconst htmlTestReg = /</;\n\n// the function makes the main rendering job\n// it renders given array item\nexport default function renderItemNode({\n  selfDef, // selfDef is passed as little optimization\n  self,\n  item,\n  eventOptions\n}) {\n  const { renderer, bindRenderedAsSandbox = true } = item;\n  const { itemRenderer } = self;\n  let usedRenderer = renderer || itemRenderer;\n  const rendererContext = usedRenderer === renderer ? item : self;\n  const { id: selfId } = selfDef;\n  const {\n    moveSandbox,\n    forceRerender,\n    silent\n  } = eventOptions;\n\n  // if renderer is not found return null as a node\n  if (!usedRenderer) {\n    return { node: null };\n  }\n\n  const itemDef = initSeemple(item);\n  const { renderedInArrays = {} } = itemDef;\n\n  // if moveSandbox option is truthy then return a sandbox of an item\n  if (moveSandbox) {\n    const sandboxPropDef = itemDef.props.sandbox;\n    if (sandboxPropDef) {\n      const { bindings } = sandboxPropDef;\n      const node = bindings ? bindings[0].node : null;\n\n      if (node) {\n        for (let i = 0, keys = Object.keys(renderedInArrays); i < keys.length; i++) {\n          const key = keys[i];\n\n          if (node === renderedInArrays[key]) {\n            // delete an information about previous array\n            delete renderedInArrays[key];\n            break;\n          }\n        }\n\n        renderedInArrays[selfId] = node;\n\n        // moving sandbox does not fire \"render\" event but it fire \"afterrender\"\n        // since \"afterrender\" means \"node is inserted to DOM\"\n        return {\n          node: node.__replacedByNode || node,\n          itemEventOptions: {\n            node,\n            self: item,\n            parentArray: self\n          }\n        };\n      }\n    }\n  }\n\n  itemDef.renderedInArrays = renderedInArrays;\n\n  // if usedRenderer is function then call it\n  if (typeof usedRenderer === 'function') {\n    usedRenderer = usedRenderer.call(rendererContext, item);\n  }\n\n\n  // if usedRenderer is string\n  if (typeof usedRenderer === 'string') {\n    if (!htmlTestReg.test(usedRenderer)) {\n      // if usedRenderer is a selector\n      const selector = usedRenderer;\n\n      usedRenderer = getNodes(self, selector);\n\n      if (usedRenderer.length) {\n        // if a node is found by given selector then use its HTML\n        usedRenderer = usedRenderer[0].innerHTML.trim();\n      } else {\n        // if not throw an error\n        throw seempleError('array:renderer_node_missing', { selector });\n      }\n    } else {\n      // if usedRenderer is HTML string\n      usedRenderer = usedRenderer.trim();\n    }\n  }\n\n  // pass a node or HTML\n  const parsed = parseBindings(item, usedRenderer, eventOptions);\n\n  // if parseBindings returned more/less than one node then throw an error\n  if (parsed.length !== 1) {\n    throw seempleError('array:rendered_number_nodes', { length: parsed.length });\n  }\n\n  const node = renderedInArrays[selfId] = parsed[0];\n\n\n  if (bindRenderedAsSandbox) {\n    if (forceRerender) {\n      unbindNode(item, 'sandbox', null, null, eventOptions);\n    }\n\n    bindNode(item, 'sandbox', node, null, eventOptions);\n  }\n\n  // if silent is not truthy then fire 'render' event and virtual methods\n  if (!silent) {\n    const itemEventOptions = {\n      node,\n      self: item,\n      parentArray: self\n    };\n    const { onRender } = item;\n    const { onItemRender } = self;\n\n    if (onRender) {\n      onRender.call(item, itemEventOptions);\n    }\n\n    if (onItemRender) {\n      onItemRender.call(self, item, itemEventOptions);\n    }\n\n    triggerOne(item, 'render', itemEventOptions);\n\n    return { node: node.__replacedByNode || node, itemEventOptions };\n  }\n\n  return { node: node.__replacedByNode || node };\n}\n"],"file":"renderitemnode.js"}