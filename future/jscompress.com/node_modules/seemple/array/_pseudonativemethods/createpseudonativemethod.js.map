{"version":3,"sources":["../../../src/array/_pseudonativemethods/createpseudonativemethod.js"],"names":["arrayPrototype","Array","prototype","createPseudoNativeMethod","name","hasOptions","pseudoNativeMethod","callback","thisArg","call","a","b","originalMethod","method","separator","searchElement","fromIndex","arguments","undefined"],"mappings":"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","sourcesContent":["import toSeempleArray from '../_toseemplearray';\nimport createSortingMethod from './createsortingmethod';\nimport createRemovingMethod from './createremovingmethod';\nimport createAddingMethod from './createaddingmethod';\nimport createSplice from './createsplice';\nimport createCopyWithin from './createcopywithin';\nimport createFill from './createfill';\nimport apply from '../../_helpers/apply';\nimport seempleError from '../../_helpers/seempleerror';\n\nconst arrayPrototype = Array.prototype;\n\n// creates pseudo native method and returns it (push, push_, sort, sort_...)\nexport default function createPseudoNativeMethod(name, hasOptions = false) {\n  switch (name) {\n    case 'forEach':\n      return function pseudoNativeMethod(callback, thisArg) {\n        arrayPrototype[name].call(this, callback, thisArg);\n        // return this for nicer chain calls\n        return this;\n      };\n    case 'map':\n    case 'filter':\n    case 'slice':\n      // TODO: Improve readability of pseudoNativeMethod, arguments \"a, b\" look not good\n      return function pseudoNativeMethod(a, b) {\n        return toSeempleArray(arrayPrototype[name].call(this, a, b));\n      };\n    case 'every':\n    case 'some':\n    case 'findIndex':\n    case 'find':\n      return function pseudoNativeMethod(callback, thisArg) {\n        const originalMethod = arrayPrototype[name];\n\n        /* istanbul ignore if  */\n        if (typeof originalMethod !== 'function') {\n          throw seempleError('array:nonexistent_method', { method: name });\n        }\n        return originalMethod.call(this, callback, thisArg);\n      };\n    case 'join':\n      return function pseudoNativeMethod(separator = ',') {\n        return arrayPrototype[name].call(this, separator);\n      };\n    case 'indexOf':\n    case 'lastIndexOf':\n    case 'includes':\n      return function pseudoNativeMethod(searchElement, fromIndex) {\n        const originalMethod = arrayPrototype[name];\n\n        /* istanbul ignore if  */\n        if (typeof originalMethod !== 'function') {\n          throw seempleError('array:nonexistent_method', { method: name });\n        }\n\n        if (typeof fromIndex === 'undefined') {\n          return originalMethod.call(this, searchElement);\n        }\n\n        return originalMethod.call(this, searchElement, fromIndex);\n      };\n    case 'reduce':\n    case 'reduceRight':\n      return function pseudoNativeMethod() {\n        return apply(arrayPrototype[name], this, arguments);\n      };\n    case 'sort':\n    case 'reverse':\n      return createSortingMethod(name, hasOptions);\n    case 'pop':\n    case 'shift':\n      return createRemovingMethod(name, hasOptions);\n    case 'push':\n    case 'unshift':\n      return createAddingMethod(name, hasOptions);\n    case 'splice':\n      return createSplice(hasOptions);\n    case 'copyWithin':\n      return createCopyWithin(hasOptions);\n    case 'fill':\n      return createFill(hasOptions);\n    default:\n      return undefined;\n  }\n}\n"],"file":"createpseudonativemethod.js"}