"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createSplice;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _init = _interopRequireDefault(require("../../_core/init"));

var _reportmodified = _interopRequireDefault(require("../_reportmodified"));

var _toseemplearray = _interopRequireDefault(require("../_toseemplearray"));

var _apply = _interopRequireDefault(require("../../_helpers/apply"));

var _assign = _interopRequireDefault(require("../../_helpers/assign"));

// creates splice or splice_ method and returns it
// TODO: Improve readability of createSplice function
function createSplice(hasOptions) {
  return function pseudoNativeMethod() {
    var _initSeemple = (0, _init["default"])(this),
        itemMediator = _initSeemple.itemMediator;

    var functionArguments = arguments;
    var argsLength = functionArguments.length - +hasOptions;
    var args = Array(argsLength);
    var givenEventOptions = hasOptions ? functionArguments[functionArguments.length - 1] : null;
    var useMediator = typeof itemMediator === 'function' && (!givenEventOptions || !givenEventOptions.skipItemMediator);
    var added = [];
    var start = args[0];
    var length = this.length;
    start = start < 0 ? length + start : start; // convert arguments to array and call item mediator on every new item if it's possible

    args[0] = functionArguments[0];
    args[1] = functionArguments[1];

    for (var i = 2; i < argsLength; i++) {
      var arg = functionArguments[i];

      if (useMediator) {
        args[i] = itemMediator(arg, start + (i - 2));
      } else {
        args[i] = arg;
      }

      added[i - 2] = args[i];
    } // call original method
    // TODO: Change array manually in splice method for better performance


    var returns = (0, _apply["default"])(Array.prototype.splice, this, args); // removed items mean returned items

    var removed = returns; // if something is added or removed

    if (added.length || removed.length) {
      var eventOptions = {
        added: added,
        removed: removed,
        method: 'splice',
        self: this
      }; // extend event options by custom event options if they are given

      if (hasOptions) {
        if (givenEventOptions && (0, _typeof2["default"])(givenEventOptions) === 'object') {
          (0, _assign["default"])(eventOptions, givenEventOptions);
        }
      }

      (0, _reportmodified["default"])(this, eventOptions);
    }

    return (0, _toseemplearray["default"])(returns);
  };
}
//# sourceMappingURL=createsplice.js.map