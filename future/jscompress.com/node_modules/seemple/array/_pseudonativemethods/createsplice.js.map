{"version":3,"sources":["../../../src/array/_pseudonativemethods/createsplice.js"],"names":["createSplice","hasOptions","pseudoNativeMethod","itemMediator","functionArguments","arguments","argsLength","length","args","Array","givenEventOptions","useMediator","skipItemMediator","added","start","i","arg","returns","prototype","splice","removed","eventOptions","method","self"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACe,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAC/C,SAAO,SAASC,kBAAT,GAA8B;AAAA,uBACV,sBAAY,IAAZ,CADU;AAAA,QAC3BC,YAD2B,gBAC3BA,YAD2B;;AAEnC,QAAMC,iBAAiB,GAAGC,SAA1B;AACA,QAAMC,UAAU,GAAGF,iBAAiB,CAACG,MAAlB,GAA2B,CAACN,UAA/C;AACA,QAAMO,IAAI,GAAGC,KAAK,CAACH,UAAD,CAAlB;AACA,QAAMI,iBAAiB,GAAGT,UAAU,GAChCG,iBAAiB,CAACA,iBAAiB,CAACG,MAAlB,GAA2B,CAA5B,CADe,GAEhC,IAFJ;AAGA,QAAMI,WAAW,GAAG,OAAOR,YAAP,KAAwB,UAAxB,KACR,CAACO,iBAAD,IAAsB,CAACA,iBAAiB,CAACE,gBADjC,CAApB;AAEA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,KAAK,GAAGN,IAAI,CAAC,CAAD,CAAhB;AAXmC,QAY3BD,MAZ2B,GAYhB,IAZgB,CAY3BA,MAZ2B;AAcnCO,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYP,MAAM,GAAGO,KAArB,GAA6BA,KAArC,CAdmC,CAgBnC;;AACAN,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUJ,iBAAiB,CAAC,CAAD,CAA3B;AACAI,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUJ,iBAAiB,CAAC,CAAD,CAA3B;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,EAAjC,EAAqC;AACnC,UAAMC,GAAG,GAAGZ,iBAAiB,CAACW,CAAD,CAA7B;;AACA,UAAIJ,WAAJ,EAAiB;AACfH,QAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUZ,YAAY,CAACa,GAAD,EAAMF,KAAK,IAAIC,CAAC,GAAG,CAAR,CAAX,CAAtB;AACD,OAFD,MAEO;AACLP,QAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUC,GAAV;AACD;;AAEDH,MAAAA,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,GAAeP,IAAI,CAACO,CAAD,CAAnB;AACD,KA5BkC,CA8BnC;AACA;;;AACA,QAAME,OAAO,GAAG,uBAAMR,KAAK,CAACS,SAAN,CAAgBC,MAAtB,EAA8B,IAA9B,EAAoCX,IAApC,CAAhB,CAhCmC,CAiCnC;;AACA,QAAMY,OAAO,GAAGH,OAAhB,CAlCmC,CAoCnC;;AACA,QAAIJ,KAAK,CAACN,MAAN,IAAgBa,OAAO,CAACb,MAA5B,EAAoC;AAClC,UAAMc,YAAY,GAAG;AACnBR,QAAAA,KAAK,EAALA,KADmB;AAEnBO,QAAAA,OAAO,EAAPA,OAFmB;AAGnBE,QAAAA,MAAM,EAAE,QAHW;AAInBC,QAAAA,IAAI,EAAE;AAJa,OAArB,CADkC,CAQlC;;AACA,UAAItB,UAAJ,EAAgB;AACd,YAAIS,iBAAiB,IAAI,yBAAOA,iBAAP,MAA6B,QAAtD,EAAgE;AAC9D,kCAAOW,YAAP,EAAqBX,iBAArB;AACD;AACF;;AAED,sCAAe,IAAf,EAAqBW,YAArB;AACD;;AAED,WAAO,gCAAeJ,OAAf,CAAP;AACD,GAxDD;AAyDD","sourcesContent":["import initSeemple from '../../_core/init';\nimport reportModified from '../_reportmodified';\nimport toSeempleArray from '../_toseemplearray';\nimport apply from '../../_helpers/apply';\nimport assign from '../../_helpers/assign';\n\n// creates splice or splice_ method and returns it\n// TODO: Improve readability of createSplice function\nexport default function createSplice(hasOptions) {\n  return function pseudoNativeMethod() {\n    const { itemMediator } = initSeemple(this);\n    const functionArguments = arguments;\n    const argsLength = functionArguments.length - +hasOptions;\n    const args = Array(argsLength);\n    const givenEventOptions = hasOptions\n      ? functionArguments[functionArguments.length - 1]\n      : null;\n    const useMediator = typeof itemMediator === 'function'\n            && (!givenEventOptions || !givenEventOptions.skipItemMediator);\n    const added = [];\n    let start = args[0];\n    const { length } = this;\n\n    start = start < 0 ? length + start : start;\n\n    // convert arguments to array and call item mediator on every new item if it's possible\n    args[0] = functionArguments[0];\n    args[1] = functionArguments[1];\n    for (let i = 2; i < argsLength; i++) {\n      const arg = functionArguments[i];\n      if (useMediator) {\n        args[i] = itemMediator(arg, start + (i - 2));\n      } else {\n        args[i] = arg;\n      }\n\n      added[i - 2] = args[i];\n    }\n\n    // call original method\n    // TODO: Change array manually in splice method for better performance\n    const returns = apply(Array.prototype.splice, this, args);\n    // removed items mean returned items\n    const removed = returns;\n\n    // if something is added or removed\n    if (added.length || removed.length) {\n      const eventOptions = {\n        added,\n        removed,\n        method: 'splice',\n        self: this\n      };\n\n      // extend event options by custom event options if they are given\n      if (hasOptions) {\n        if (givenEventOptions && typeof givenEventOptions === 'object') {\n          assign(eventOptions, givenEventOptions);\n        }\n      }\n\n      reportModified(this, eventOptions);\n    }\n\n    return toSeempleArray(returns);\n  };\n}\n"],"file":"createsplice.js"}