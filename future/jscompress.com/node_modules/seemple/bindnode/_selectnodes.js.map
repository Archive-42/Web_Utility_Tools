{"version":3,"sources":["../../src/bindnode/_selectnodes.js"],"names":["customSelectorReg","randomAttr","Math","random","toString","replace","selectNodes","object","givenSelector","defs","get","props","selectors","split","result","dom","$","selector","execResult","exec","boundKey","undefined","subSelector","propDef","bindings","boundNodes","Array","length","binding","i","node","indexOf","setAttribute","selected","querySelectorAll","add","removeAttribute"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,iBAAiB,GAAG,gEAA1B;AACA,IAAMC,UAAU,aAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAAN,MAAhB,C,CAAsE;AAEtE;AACA;;AACe,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,aAA7B,EAA4C;AAAA,kBACvCC,iBAAKC,GAAL,CAASH,MAAT,CADuC;AAAA,MACjDI,KADiD,aACjDA,KADiD;;AAEzD,MAAMC,SAAS,GAAGJ,aAAa,CAACK,KAAd,CAAoB,GAApB,CAAlB;;AACA,MAAIC,MAAM,GAAGC,gBAAIC,CAAJ,EAAb;;AAEA,2BAAQJ,SAAR,EAAmB,UAACK,QAAD,EAAc;AAC/B,QAAMC,UAAU,GAAGlB,iBAAiB,CAACmB,IAAlB,CAAuBF,QAAvB,CAAnB;;AACA,QAAIC,UAAJ,EAAgB;AACd,UAAME,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAAV,KAAkBG,SAAlB,GAA8B,SAA9B,GAA0CH,UAAU,CAAC,CAAD,CAArE;AACA,UAAMI,WAAW,GAAGJ,UAAU,CAAC,CAAD,CAAV,KAAkBG,SAAlB,GAA8BH,UAAU,CAAC,CAAD,CAAxC,GAA8CA,UAAU,CAAC,CAAD,CAA5E;AACA,UAAMK,OAAO,GAAGZ,KAAK,CAACS,QAAD,CAArB;;AAEA,UAAIG,OAAJ,EAAa;AAAA,YACHC,QADG,GACUD,OADV,CACHC,QADG;;AAEX,YAAIA,QAAJ,EAAc;AACZ,cAAMC,UAAU,GAAGC,KAAK,CAACF,QAAQ,CAACG,MAAV,CAAxB;AACA,mCAAQH,QAAR,EAAkB,UAACI,OAAD,EAAUC,CAAV,EAAgB;AAChCJ,YAAAA,UAAU,CAACI,CAAD,CAAV,GAAgBD,OAAO,CAACE,IAAxB;AACD,WAFD,EAFY,CAMZ;AACA;;AACA,cAAIR,WAAJ,EAAiB;AACf;AACA;AACA,gBAAIA,WAAW,CAACS,OAAZ,CAAoB,GAApB,MAA6B,CAAjC,EAAoC;AAClC;AACA,uCAAQN,UAAR,EAAoB,UAACK,IAAD,EAAU;AAC5BA,gBAAAA,IAAI,CAACE,YAAL,CAAkB/B,UAAlB,EAA8BA,UAA9B;AACA,oBAAMgC,QAAQ,GAAGH,IAAI,CAACI,gBAAL,YAA0BjC,UAA1B,gBAAyCA,UAAzC,iBAAyDqB,WAAzD,EAAjB;AACAR,gBAAAA,MAAM,GAAGA,MAAM,CAACqB,GAAP,CAAW,yBAAQF,QAAR,CAAX,CAAT;AACAH,gBAAAA,IAAI,CAACM,eAAL,CAAqBnC,UAArB;AACD,eALD;AAMD,aARD,MAQO;AACL;AACA,uCAAQwB,UAAR,EAAoB,UAACK,IAAD,EAAU;AAC5B,oBAAMG,QAAQ,GAAGH,IAAI,CAACI,gBAAL,CAAsBZ,WAAtB,CAAjB;AACAR,gBAAAA,MAAM,GAAGA,MAAM,CAACqB,GAAP,CAAW,yBAAQF,QAAR,CAAX,CAAT;AACD,eAHD;AAID;AACF,WAlBD,MAkBO;AACL;AACAnB,YAAAA,MAAM,GAAGA,MAAM,CAACqB,GAAP,CAAWV,UAAX,CAAT;AACD;AACF;AACF;AACF,KAvCD,MAuCO;AACL;AACAX,MAAAA,MAAM,GAAGA,MAAM,CAACqB,GAAP,CAAWlB,QAAX,CAAT;AACD;AACF,GA7CD;AA+CA,SAAOH,MAAP;AACD","sourcesContent":["import defs from '../_core/defs';\nimport toArray from '../_helpers/toarray';\nimport forEach from '../_helpers/foreach';\nimport dom from '../_dom';\n\nconst customSelectorReg = /\\s*:bound\\(([^(]*)\\)\\s*([\\S\\s]*)\\s*|\\s*:sandbox\\s*([\\S\\s]*)\\s*/;\nconst randomAttr = `${Math.random().toString().replace('0.', 'x')}y`; // x12345y\n\n// the function selects nodes based on a selector (including custom values, eg :sandbox)\n// TODO: selectNodes looks not good, it needs to be refactored and accelerated if possible\nexport default function selectNodes(object, givenSelector) {\n  const { props } = defs.get(object);\n  const selectors = givenSelector.split(',');\n  let result = dom.$();\n\n  forEach(selectors, (selector) => {\n    const execResult = customSelectorReg.exec(selector);\n    if (execResult) {\n      const boundKey = execResult[3] !== undefined ? 'sandbox' : execResult[1];\n      const subSelector = execResult[3] !== undefined ? execResult[3] : execResult[2];\n      const propDef = props[boundKey];\n\n      if (propDef) {\n        const { bindings } = propDef;\n        if (bindings) {\n          const boundNodes = Array(bindings.length);\n          forEach(bindings, (binding, i) => {\n            boundNodes[i] = binding.node;\n          });\n\n          // if native selector passed after :bound(KEY) is not empty string\n          // for example \":bound(KEY) .my-selector\"\n          if (subSelector) {\n            // if native selector contains children selector\n            // for example \":bound(KEY) > .my-selector\"\n            if (subSelector.indexOf('>') === 0) {\n              // selecting children\n              forEach(boundNodes, (node) => {\n                node.setAttribute(randomAttr, randomAttr);\n                const selected = node.querySelectorAll(`[${randomAttr}=\"${randomAttr}\"] ${subSelector}`);\n                result = result.add(toArray(selected));\n                node.removeAttribute(randomAttr);\n              });\n            } else {\n              // if native selector doesn't contain children selector\n              forEach(boundNodes, (node) => {\n                const selected = node.querySelectorAll(subSelector);\n                result = result.add(toArray(selected));\n              });\n            }\n          } else {\n            // if native selector is empty string just add bound nodes to result\n            result = result.add(boundNodes);\n          }\n        }\n      }\n    } else {\n      // if it's native selector (no custom things)\n      result = result.add(selector);\n    }\n  });\n\n  return result;\n}\n"],"file":"_selectnodes.js"}