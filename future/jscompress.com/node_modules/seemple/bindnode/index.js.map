{"version":3,"sources":["../../src/bindnode/index.js"],"names":["bindNode","object","key","node","binder","eventOptions","isSeemple","temporaryOptionalFlag","Array","optional","itemKey","itemNode","itemBinder","itemEventOptions","event","commonEventOptions","mergedEventOptions","keyObjValue","keyObjKey","constructor","Object","length","keyObjValueItem","exactKey","$nodes","deepPath","split","deepPathLength","bindingSwitcher","slice","propDef","$allNodes","allNodes","nodes","add","oneNode"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;AACe,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,YAA7C,EAA2D;AACxE,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,YAAY,GAAGD,MAAf;AACAA,IAAAA,MAAM,GAAGD,IAAT;AACAA,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAGD,MAAN;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GATD,MASO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,UAAxB;AACD;;AAEDI,EAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B,CAfwE,CAerC;;AACnCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB,CAhBwE,CAgBjD;;AAEvB,wBAAYH,MAAZ;AAlBwE,MAoBhEM,qBApBgE,GAoBtCP,QApBsC,CAoBhEO,qBApBgE;AAsBxE,SAAOP,QAAQ,CAACO,qBAAhB,CAtBwE,CAwBxE;;AACA,MAAI,CAACL,GAAL,EAAU;AACR,UAAM,8BAAa,mBAAb,CAAN;AACD;;AAED,MAAIA,GAAG,YAAYM,KAAnB,EAA0B;AACxB,QAAI,OAAON,GAAG,CAAC,CAAD,CAAV,KAAkB,QAAtB,EAAgC;AAC9B;;;;AAIA,UAAIK,qBAAJ,EAA2B;AACzB;AACAF,QAAAA,YAAY,qBAAQA,YAAR;AAAsBI,UAAAA,QAAQ,EAAE;AAAhC,UAAZ;AACD;;AAED,+BAAQP,GAAR,EAAa,UAACQ,OAAD;AAAA,eAAaV,QAAQ,CAACC,MAAD,EAASS,OAAT,EAAkBP,IAAlB,EAAwBC,MAAxB,EAAgCC,YAAhC,CAArB;AAAA,OAAb;AACD,KAXD,MAWO;AACL;;;;AAIA,+BAAQH,GAAR,EAAa,gBAKP;AAAA,YAJCQ,OAID,QAJJR,GAII;AAAA,YAHES,QAGF,QAHJR,IAGI;AAAA,YAFIS,UAEJ,QAFJR,MAEI;AAAA,YADGS,gBACH,QADJC,KACI;AACJ,YAAMC,kBAAkB,GAAGZ,IAA3B;AACA,YAAMa,kBAAkB,GAAG,EAA3B;;AAEA,YAAIT,qBAAJ,EAA2B;AACzBS,UAAAA,kBAAkB,CAACP,QAAnB,GAA8B,IAA9B;AACD;;AAED,YAAIM,kBAAJ,EAAwB;AACtB;AACA,kCAAOC,kBAAP,EAA2BD,kBAA3B;AACD;;AAED,YAAIF,gBAAJ,EAAsB;AACpB;AACA,kCAAOG,kBAAP,EAA2BH,gBAA3B;AACD;;AAEDb,QAAAA,QAAQ,CAACC,MAAD,EAASS,OAAT,EAAkBC,QAAlB,EAA4BC,UAA5B,EAAwCI,kBAAxC,CAAR;AACD,OAxBD;AAyBD;;AAED,WAAOf,MAAP;AACD;;AAGD,MAAI,yBAAOC,GAAP,MAAe,QAAnB,EAA6B;AAC3B,4BAAOA,GAAP,EAAY,UAACe,WAAD,EAAcC,SAAd,EAA4B;AACtC;AACA,UAAIX,qBAAJ,EAA2B;AACzB;AACAF,QAAAA,YAAY,GAAGD,MAAM,qBAAQA,MAAR;AAAgBK,UAAAA,QAAQ,EAAE;AAA1B,aAAmC;AAAEA,UAAAA,QAAQ,EAAE;AAAZ,SAAxD;AACD,OAHD,MAGO;AACLJ,QAAAA,YAAY,GAAGD,MAAf,CADK,CACkB;AACxB;;AAED,UACEa,WAAW,IACAA,WAAW,CAACE,WAAZ,KAA4BC,MADvC,IAEW,UAAUH,WAHvB,EAIE;AACA;AACAjB,QAAAA,QAAQ,CACNC,MADM,EACEiB,SADF,EACaD,WAAW,CAACd,IADzB,EAENc,WAAW,CAACb,MAAZ,IAAsBD,IAFhB,EAEsBE,YAFtB,CAAR;AAID,OAVD,MAUO,IACLY,WAAW,IACAA,WAAW,CAACE,WAAZ,KAA4BX,KADvC,IAEWS,WAAW,CAACI,MAFvB,IAGWJ,WAAW,CAAC,CAAD,CAAX,CAAeE,WAAf,KAA+BC,MAH1C,IAIW,UAAUH,WAAW,CAAC,CAAD,CAL3B,EAML;AACA;AACA;AACA;AACA;AACA,iCAAQA,WAAR,EAAqB,UAACK,eAAD,EAAqB;AACxCtB,UAAAA,QAAQ,CACNC,MADM,EACEiB,SADF,EACaI,eAAe,CAACnB,IAD7B,EAENmB,eAAe,CAAClB,MAAhB,IAA0BD,IAFpB,EAE0BE,YAF1B,CAAR;AAID,SALD;AAMD,OAjBM,MAiBA;AACL;AACAL,QAAAA,QAAQ,CAACC,MAAD,EAASiB,SAAT,EAAoBD,WAApB,EAAiCd,IAAjC,EAAuCE,YAAvC,CAAR;AACD;AACF,KAxCD;AA0CA,WAAOJ,MAAP;AACD;;AAzHuE,sBA8HpEI,YA9HoE;AAAA,4CA4HtEI,QA5HsE;AAAA,MA4HtEA,QA5HsE,sCA4H3DF,qBAAqB,IAAI,KA5HkC;AAAA,4CA6HtEgB,QA7HsE;AAAA,MA6HtEA,QA7HsE,sCA6H3D,KA7H2D;AA+HxE,MAAMC,MAAM,GAAG,0BAASvB,MAAT,EAAiBE,IAAjB,CAAf,CA/HwE,CAiIxE;;AACA,MAAI,CAACqB,MAAM,CAACH,MAAZ,EAAoB;AAClB,QAAIZ,QAAJ,EAAc;AACZ,aAAOR,MAAP;AACD;;AAED,UAAM,8BAAa,sBAAb,EAAqC;AAAEC,MAAAA,GAAG,EAAHA,GAAF;AAAOC,MAAAA,IAAI,EAAJA;AAAP,KAArC,CAAN;AACD;;AAED,MAAI,CAACoB,QAAL,EAAe;AACb,QAAME,QAAQ,GAAGvB,GAAG,CAACwB,KAAJ,CAAU,GAAV,CAAjB;AACA,QAAMC,cAAc,GAAGF,QAAQ,CAACJ,MAAhC;;AAEA,QAAIM,cAAc,GAAG,CAArB,EAAwB;AACtB;AACA,UAAMC,eAAe,GAAG,uCAAsB;AAC5C3B,QAAAA,MAAM,EAANA,MAD4C;AAE5CwB,QAAAA,QAAQ,EAARA,QAF4C;AAG5CD,QAAAA,MAAM,EAANA,MAH4C;AAI5CpB,QAAAA,MAAM,EAANA,MAJ4C;AAK5CC,QAAAA,YAAY,EAAZA,YAL4C;AAM5CL,QAAAA,QAAQ,EAARA;AAN4C,OAAtB,CAAxB;AASA,uCAAgBC,MAAhB,EAAwBwB,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBF,cAAc,GAAG,CAAnC,CAAxB,EAA+DC,eAA/D;AAEAA,MAAAA,eAAe;AAEf,aAAO3B,MAAP;AACD;AACF;;AAED,MAAM6B,OAAO,GAAG,4BAAW7B,MAAX,EAAmBC,GAAnB,CAAhB;;AAEA,MAAID,MAAM,CAACK,SAAX,EAAsB;AACpB;AADoB,kBAE2BL,MAF3B;AAAA,QAEJ8B,SAFI,WAEZP,MAFY;AAAA,QAEcQ,QAFd,WAEOC,KAFP;;AAIpB,QAAI,CAACF,SAAD,IAAc,CAACC,QAAnB,EAA6B;AAC3B,YAAM,8BAAa,gCAAb,EAA+C;AACnDR,QAAAA,MAAM,EAAEO,SAD2C;AAEnDE,QAAAA,KAAK,EAAED;AAF4C,OAA/C,CAAN;AAID;;AAEDD,IAAAA,SAAS,CAAC7B,GAAD,CAAT,GAAiB6B,SAAS,CAAC7B,GAAD,CAAT,IAAkB6B,SAAS,CAAC7B,GAAD,CAAT,CAAemB,MAAjC,GACbU,SAAS,CAAC7B,GAAD,CAAT,CAAegC,GAAf,CAAmBV,MAAnB,CADa,GAEbA,MAFJ;AAIAQ,IAAAA,QAAQ,CAAC9B,GAAD,CAAR,GAAgB6B,SAAS,CAAC7B,GAAD,CAAT,CAAe,CAAf,CAAhB;AACD,GAnLuE,CAqLxE;;;AACA,2BAAQsB,MAAR,EAAgB,UAACW,OAAD;AAAA,WAAa,gCAAelC,MAAf,EAAuB;AAClDuB,MAAAA,MAAM,EAANA,MADkD;AAElDrB,MAAAA,IAAI,EAAEgC,OAF4C;AAGlDjC,MAAAA,GAAG,EAAHA,GAHkD;AAIlDG,MAAAA,YAAY,EAAZA,YAJkD;AAKlDD,MAAAA,MAAM,EAANA,MALkD;AAMlD0B,MAAAA,OAAO,EAAPA;AANkD,KAAvB,CAAb;AAAA,GAAhB;AASA,SAAO7B,MAAP;AACD","sourcesContent":["import initSeemple from '../_core/init';\nimport defineProp from '../_core/defineprop';\nimport getNodes from './_getnodes';\nimport createBindingSwitcher from './_createbindingswitcher';\nimport bindSingleNode from './_bindsinglenode';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport forOwn from '../_helpers/forown';\nimport forEach from '../_helpers/foreach';\nimport seempleError from '../_helpers/seempleerror';\nimport addTreeListener from '../on/_addtreelistener';\nimport assign from '../_helpers/assign';\n\n// initializes binsing between a property of an object to HTML node\nexport default function bindNode(object, key, node, binder, eventOptions) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    eventOptions = binder;\n    binder = node;\n    node = key;\n    key = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'bindNode');\n  }\n\n  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n  binder = binder || {}; // eslint-disable-line no-param-reassign\n\n  initSeemple(object);\n\n  const { temporaryOptionalFlag } = bindNode;\n\n  delete bindNode.temporaryOptionalFlag;\n\n  // throw an error when key is falsy\n  if (!key) {\n    throw seempleError('binding:falsy_key');\n  }\n\n  if (key instanceof Array) {\n    if (typeof key[0] === 'string') {\n      /*\n             * accept array of keys\n             * this.bindNode(['a', 'b', 'c'], node)\n             */\n      if (temporaryOptionalFlag) {\n        // eslint-disable-next-line no-param-reassign\n        eventOptions = { ...eventOptions, optional: true };\n      }\n\n      forEach(key, (itemKey) => bindNode(object, itemKey, node, binder, eventOptions));\n    } else {\n      /*\n             * accept array of objects\n             * this.bindNode([{key, node, binder, event}], { silent: true });\n             */\n      forEach(key, ({\n        key: itemKey,\n        node: itemNode,\n        binder: itemBinder,\n        event: itemEventOptions\n      }) => {\n        const commonEventOptions = node;\n        const mergedEventOptions = {};\n\n        if (temporaryOptionalFlag) {\n          mergedEventOptions.optional = true;\n        }\n\n        if (commonEventOptions) {\n          // extend event object by \"global\" event\n          assign(mergedEventOptions, commonEventOptions);\n        }\n\n        if (itemEventOptions) {\n          // extend event object by \"local\" event (\"event\" key of an object)\n          assign(mergedEventOptions, itemEventOptions);\n        }\n\n        bindNode(object, itemKey, itemNode, itemBinder, mergedEventOptions);\n      });\n    }\n\n    return object;\n  }\n\n\n  if (typeof key === 'object') {\n    forOwn(key, (keyObjValue, keyObjKey) => {\n      // binder means eventOptions\n      if (temporaryOptionalFlag) {\n        // eslint-disable-next-line no-param-reassign\n        eventOptions = binder ? { ...binder, optional: true } : { optional: true };\n      } else {\n        eventOptions = binder; // eslint-disable-line no-param-reassign\n      }\n\n      if (\n        keyObjValue\n                && keyObjValue.constructor === Object\n                && 'node' in keyObjValue\n      ) {\n        // this.bindNode({ key: { node: $(), binder } ) }, { on: 'evt' }, { silent: true });\n        bindNode(\n          object, keyObjKey, keyObjValue.node,\n          keyObjValue.binder || node, eventOptions\n        );\n      } else if (\n        keyObjValue\n                && keyObjValue.constructor === Array\n                && keyObjValue.length\n                && keyObjValue[0].constructor === Object\n                && 'node' in keyObjValue[0]\n      ) {\n        // this.bindNode({ key: [{\n        //   node: $(),\n        //   binder\n        // }] ) }, { on: 'evt' }, { silent: true });\n        forEach(keyObjValue, (keyObjValueItem) => {\n          bindNode(\n            object, keyObjKey, keyObjValueItem.node,\n            keyObjValueItem.binder || node, eventOptions\n          );\n        });\n      } else {\n        // this.bindNode({ key: $() }, { on: 'evt' }, { silent: true });\n        bindNode(object, keyObjKey, keyObjValue, node, eventOptions);\n      }\n    });\n\n    return object;\n  }\n\n  const {\n    optional = temporaryOptionalFlag || false, // check out bindOptionalNode\n    exactKey = false\n  } = eventOptions;\n  const $nodes = getNodes(object, node);\n\n  // check node existence\n  if (!$nodes.length) {\n    if (optional) {\n      return object;\n    }\n\n    throw seempleError('binding:node_missing', { key, node });\n  }\n\n  if (!exactKey) {\n    const deepPath = key.split('.');\n    const deepPathLength = deepPath.length;\n\n    if (deepPathLength > 1) {\n      // handle binding when key arg includes dots (eg \"a.b.c.d\")\n      const bindingSwitcher = createBindingSwitcher({\n        object,\n        deepPath,\n        $nodes,\n        binder,\n        eventOptions,\n        bindNode\n      });\n\n      addTreeListener(object, deepPath.slice(0, deepPathLength - 1), bindingSwitcher);\n\n      bindingSwitcher();\n\n      return object;\n    }\n  }\n\n  const propDef = defineProp(object, key);\n\n  if (object.isSeemple) {\n    // if an object is Seemple instance then extend \"$nodes\" and \"nodes\" objects\n    const { $nodes: $allNodes, nodes: allNodes } = object;\n\n    if (!$allNodes || !allNodes) {\n      throw seempleError('binding:instance_nodes_missing', {\n        $nodes: $allNodes,\n        nodes: allNodes\n      });\n    }\n\n    $allNodes[key] = $allNodes[key] && $allNodes[key].length\n      ? $allNodes[key].add($nodes)\n      : $nodes;\n\n    allNodes[key] = $allNodes[key][0];\n  }\n\n  // handle binding for every node separately\n  forEach($nodes, (oneNode) => bindSingleNode(object, {\n    $nodes,\n    node: oneNode,\n    key,\n    eventOptions,\n    binder,\n    propDef\n  }));\n\n  return object;\n}\n"],"file":"index.js"}