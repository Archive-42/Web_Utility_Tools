"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Class;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _foreach = _interopRequireDefault(require("./_helpers/foreach"));

var _forown = _interopRequireDefault(require("./_helpers/forown"));

var _assign = _interopRequireDefault(require("./_helpers/assign"));

// static methods and properties of classes will be hidden under Symbol('staticNames')
var staticNamesProperty = typeof Symbol === 'function' ? Symbol('staticNames') : '__staticNames';
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function Class(prototype, staticProps) {
  var Constructor = hasOwnProperty.call(prototype, 'constructor') ? prototype.constructor : function EmptyConstructor() {}; // extends is kept for backward compatibility

  var Parent = prototype["extends"]; // inherit proto from class parent or empty object

  var proto = Object.create(Parent ? Parent.prototype : {});
  var parentStaticNames = Parent ? Parent[staticNamesProperty] : undefined;
  (0, _assign["default"])(proto, prototype); // allow to pass symbols as prototype properties

  if (getOwnPropertySymbols) {
    var symbols = getOwnPropertySymbols(prototype);
    (0, _foreach["default"])(symbols, function (symbol) {
      proto[symbol] = prototype[symbol];
    });
  } // inherit staric properties of a parent


  if ((0, _typeof2["default"])(parentStaticNames) === 'object') {
    var staticNames = Constructor[staticNamesProperty] || {};
    Constructor[staticNamesProperty] = staticNames;
    (0, _forown["default"])(parentStaticNames, function (_, name) {
      Constructor[name] = Parent[name];
      staticNames[name] = true;
    }); // inherit static properties of a parent when their keys are symbols

    if (getOwnPropertySymbols) {
      var _symbols = getOwnPropertySymbols(parentStaticNames);

      (0, _foreach["default"])(_symbols, function (symbol) {
        Constructor[symbol] = Parent[symbol];
        staticNames[symbol] = true;
      });
    }
  } // extend Constructor with passed static properties


  if ((0, _typeof2["default"])(staticProps) === 'object') {
    var _staticNames = Constructor[staticNamesProperty] || {};

    Constructor[staticNamesProperty] = _staticNames;
    (0, _forown["default"])(staticProps, function (value, key) {
      Constructor[key] = value;
      _staticNames[key] = true;
    }); // extend Constructor with passed static properties if their keys are symbols

    if (getOwnPropertySymbols) {
      var _symbols2 = getOwnPropertySymbols(staticProps);

      (0, _foreach["default"])(_symbols2, function (symbol) {
        Constructor[symbol] = staticProps[symbol];
        _staticNames[symbol] = true;
      });
    }
  }

  Constructor.prototype = proto; // if new Class({}) is called return its instance

  if (this instanceof Class) {
    return new Constructor();
  }

  return Constructor;
}
//# sourceMappingURL=class.js.map