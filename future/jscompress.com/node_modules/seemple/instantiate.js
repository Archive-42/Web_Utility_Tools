"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = instantiate;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _checkobjecttype = _interopRequireDefault(require("./_helpers/checkobjecttype"));

var _forown = _interopRequireDefault(require("./_helpers/forown"));

var _foreach = _interopRequireDefault(require("./_helpers/foreach"));

var _assign = _interopRequireDefault(require("./_helpers/assign"));

var _mediate = _interopRequireDefault(require("./mediate"));

// the function is used when no update function is given
function defaultUpdateFunction(instance, data) {
  if (instance.isSeempleArray) {
    instance.recreate(data);
  } else if (instance.isSeempleObject) {
    instance.setData(data, {
      replaceData: true
    });
  } else {
    // for other objects just extend them with given data
    (0, _assign["default"])(instance, data);
  }
} // returns mediator which controls assignments


function createInstantiateMediator(_ref) {
  var UsedClass = _ref.UsedClass,
      updateFunction = _ref.updateFunction;
  return function mediator(value, previousValue, key, object) {
    if (previousValue instanceof UsedClass) {
      updateFunction.call(object, previousValue, value, key);
      return previousValue;
    }

    return new UsedClass(value, object, key);
  };
} // creates an instance of given class as property value
// and updates an instance on new value assignment instead of actual assignment


function instantiate(object, givenKeys, UsedClass, givenUpdateFunction) {
  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args

    /* eslint-disable no-param-reassign */
    givenUpdateFunction = UsedClass;
    UsedClass = givenKeys;
    givenKeys = object;
    object = this;
    /* eslint-enable no-param-reassign */
  } else {
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'instantiate');
  }

  var isKeysArray = givenKeys instanceof Array; // allow to use key-class object

  if ((0, _typeof2["default"])(givenKeys) === 'object' && !isKeysArray) {
    (0, _forown["default"])(givenKeys, function (objVal, objKey) {
      return instantiate(object, objKey, objVal, UsedClass);
    });
    return object;
  } // allow to use both single key and an array of keys


  var keys = isKeysArray ? givenKeys : [givenKeys];
  var updateFunction = givenUpdateFunction || defaultUpdateFunction;
  var mediator = createInstantiateMediator({
    UsedClass: UsedClass,
    updateFunction: updateFunction
  }); // iterate over all keys and define created mediator for all of them

  (0, _foreach["default"])(keys, function (key) {
    return (0, _mediate["default"])(object, key, mediator);
  });
  return object;
}
//# sourceMappingURL=instantiate.js.map