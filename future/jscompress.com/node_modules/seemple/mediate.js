"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mediate;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _init = _interopRequireDefault(require("./_core/init"));

var _defineprop = _interopRequireDefault(require("./_core/defineprop"));

var _checkobjecttype = _interopRequireDefault(require("./_helpers/checkobjecttype"));

var _foreach = _interopRequireDefault(require("./_helpers/foreach"));

var _set = _interopRequireDefault(require("./set"));

var _seempleerror = _interopRequireDefault(require("./_helpers/seempleerror"));

var _forown = _interopRequireDefault(require("./_helpers/forown"));

// creates property mediator
function createMediator(_ref) {
  var object = _ref.object,
      propDef = _ref.propDef,
      key = _ref.key,
      mediator = _ref.mediator;
  return function propMediator(value) {
    // args: value, previousValue, key, object itself
    return mediator.call(object, value, propDef.value, key, object);
  };
} // transforms property value on its changing


function mediate(object, givenKeys, mediator) {
  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args

    /* eslint-disable no-param-reassign */
    mediator = givenKeys;
    givenKeys = object;
    object = this;
    /* eslint-enable no-param-reassign */
  } else {
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'mediate');
  }

  var isKeysArray = givenKeys instanceof Array; // allow to use key-mediator object as another method variation

  if ((0, _typeof2["default"])(givenKeys) === 'object' && !isKeysArray) {
    (0, _forown["default"])(givenKeys, function (objVal, objKey) {
      return mediate(object, objKey, objVal);
    });
    return object;
  }

  (0, _init["default"])(object); // allow to use both single key and an array of keys

  var keys = isKeysArray ? givenKeys : [givenKeys];
  (0, _foreach["default"])(keys, function (key) {
    // if non-string is passed as a key
    if (typeof key !== 'string') {
      throw (0, _seempleerror["default"])('mediate:key_type', {
        key: key
      });
    }

    var propDef = (0, _defineprop["default"])(object, key);
    var propMediator = propDef.mediator = createMediator({
      object: object,
      propDef: propDef,
      key: key,
      mediator: mediator
    }); // set new value

    (0, _set["default"])(object, key, propMediator(propDef.value), {
      fromMediator: true
    });
  });
  return object;
}
//# sourceMappingURL=mediate.js.map