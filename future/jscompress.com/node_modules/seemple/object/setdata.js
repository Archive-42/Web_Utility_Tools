"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = setData;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _init = _interopRequireDefault(require("../_core/init"));

var _defineprop = _interopRequireDefault(require("../_core/defineprop"));

var _forown = _interopRequireDefault(require("../_helpers/forown"));

var _set = _interopRequireDefault(require("../set"));

// returns an array of keys listed at inObject but not listed at fromObject
function getNotListedKeys(inObject, fromObject) {
  var result = [];
  (0, _forown["default"])(inObject, function (_, key) {
    if (!(key in fromObject)) {
      result.push(key);
    }
  });
  return result;
} // changes property value and adds given key to a list of data keys


function setData(key, value, eventOptions) {
  var _this = this;

  // if no key or falsy key is given
  if (!key) {
    return this;
  }

  var _initSeemple = (0, _init["default"])(this),
      keys = _initSeemple.keys; // allow to pass key-value object


  if ((0, _typeof2["default"])(key) === 'object') {
    eventOptions = value || {}; // eslint-disable-line no-param-reassign

    var _eventOptions = eventOptions,
        _replaceData = _eventOptions.replaceData; // do not call setData recursivally for better performance

    (0, _forown["default"])(key, function (objVal, objKey) {
      // remove data keys not listed at key-value object
      if (_replaceData) {
        var notListedKeys = getNotListedKeys(keys, key);

        if (notListedKeys.length) {
          _this.removeDataKeys(notListedKeys);
        }
      } // define descriptors for given property


      (0, _defineprop["default"])(_this, objKey); // add a key to a list of keys

      keys[objKey] = 1; // do other things with set method

      (0, _set["default"])(_this, objKey, objVal, eventOptions);
    });
    return this;
  }

  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign

  var _eventOptions2 = eventOptions,
      replaceData = _eventOptions2.replaceData; // remove all data keys except given key

  if (replaceData) {
    var notListedKeys = getNotListedKeys(keys, (0, _defineProperty2["default"])({}, key, true));

    if (notListedKeys.length) {
      this.removeDataKeys(notListedKeys);
    }
  } // define descriptors for given property


  (0, _defineprop["default"])(this, key); // add a key to a list of keys

  keys[key] = 1; // do other things with set method

  return (0, _set["default"])(this, key, value, eventOptions);
}
//# sourceMappingURL=setdata.js.map