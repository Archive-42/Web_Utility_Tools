"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = removeDomListener;

var _defs = _interopRequireDefault(require("../_core/defs"));

var _removelistener = _interopRequireDefault(require("./_removelistener"));

var _dom = _interopRequireDefault(require("../_dom"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

// removes dom listener from nodes bound to given key
function removeDomListener(object, key, eventName, selector, callback, context, info) {
  var def = _defs["default"].get(object);

  if (!def) {
    return object;
  }

  var props = def.props;
  var propDef = props[key];

  if (!propDef) {
    return object;
  }

  var bindings = propDef.bindings;

  if (bindings) {
    // collect bound nodes and remove DOM event listener
    var nodes = Array(bindings.length);
    var eventNamespace = def.id + key;
    (0, _foreach["default"])(bindings, function (binding, index) {
      nodes[index] = binding.node;
    });

    _dom["default"].$(nodes).off("".concat(eventName, ".").concat(eventNamespace), selector, callback);
  } // remove bind and unbind listeners from given key


  (0, _removelistener["default"])(object, "bind:".concat(key), callback, context, info);
  (0, _removelistener["default"])(object, "unbind:".concat(key), callback, context, info);
  return object;
}
//# sourceMappingURL=_removedomlistener.js.map