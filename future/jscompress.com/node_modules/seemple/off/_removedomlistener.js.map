{"version":3,"sources":["../../src/off/_removedomlistener.js"],"names":["removeDomListener","object","key","eventName","selector","callback","context","info","def","defs","get","props","propDef","bindings","nodes","Array","length","eventNamespace","id","binding","index","node","dom","$","off"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,iBAAT,CACbC,MADa,EAEbC,GAFa,EAGbC,SAHa,EAIbC,QAJa,EAKbC,QALa,EAMbC,OANa,EAObC,IAPa,EAQb;AACA,MAAMC,GAAG,GAAGC,iBAAKC,GAAL,CAAST,MAAT,CAAZ;;AAEA,MAAI,CAACO,GAAL,EAAU;AACR,WAAOP,MAAP;AACD;;AALD,MAOQU,KAPR,GAOkBH,GAPlB,CAOQG,KAPR;AAQA,MAAMC,OAAO,GAAGD,KAAK,CAACT,GAAD,CAArB;;AAEA,MAAI,CAACU,OAAL,EAAc;AACZ,WAAOX,MAAP;AACD;;AAZD,MAcQY,QAdR,GAcqBD,OAdrB,CAcQC,QAdR;;AAgBA,MAAIA,QAAJ,EAAc;AACZ;AACA,QAAMC,KAAK,GAAGC,KAAK,CAACF,QAAQ,CAACG,MAAV,CAAnB;AACA,QAAMC,cAAc,GAAGT,GAAG,CAACU,EAAJ,GAAShB,GAAhC;AAEA,6BAAQW,QAAR,EAAkB,UAACM,OAAD,EAAUC,KAAV,EAAoB;AACpCN,MAAAA,KAAK,CAACM,KAAD,CAAL,GAAeD,OAAO,CAACE,IAAvB;AACD,KAFD;;AAIAC,oBAAIC,CAAJ,CAAMT,KAAN,EAAaU,GAAb,WAAoBrB,SAApB,cAAiCc,cAAjC,GAAmDb,QAAnD,EAA6DC,QAA7D;AACD,GA1BD,CA4BA;;;AACA,kCAAeJ,MAAf,iBAA+BC,GAA/B,GAAsCG,QAAtC,EAAgDC,OAAhD,EAAyDC,IAAzD;AACA,kCAAeN,MAAf,mBAAiCC,GAAjC,GAAwCG,QAAxC,EAAkDC,OAAlD,EAA2DC,IAA3D;AAEA,SAAON,MAAP;AACD","sourcesContent":["import defs from '../_core/defs';\nimport removeListener from './_removelistener';\nimport dom from '../_dom';\nimport forEach from '../_helpers/foreach';\n\n// removes dom listener from nodes bound to given key\nexport default function removeDomListener(\n  object,\n  key,\n  eventName,\n  selector,\n  callback,\n  context,\n  info\n) {\n  const def = defs.get(object);\n\n  if (!def) {\n    return object;\n  }\n\n  const { props } = def;\n  const propDef = props[key];\n\n  if (!propDef) {\n    return object;\n  }\n\n  const { bindings } = propDef;\n\n  if (bindings) {\n    // collect bound nodes and remove DOM event listener\n    const nodes = Array(bindings.length);\n    const eventNamespace = def.id + key;\n\n    forEach(bindings, (binding, index) => {\n      nodes[index] = binding.node;\n    });\n\n    dom.$(nodes).off(`${eventName}.${eventNamespace}`, selector, callback);\n  }\n\n  // remove bind and unbind listeners from given key\n  removeListener(object, `bind:${key}`, callback, context, info);\n  removeListener(object, `unbind:${key}`, callback, context, info);\n\n  return object;\n}\n"],"file":"_removedomlistener.js"}