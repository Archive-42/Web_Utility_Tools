{"version":3,"sources":["../../src/on/_adddomlistener.js"],"names":["createBindingHandlers","fullEventName","domEventHandler","selector","bindHandler","evt","node","dom","$","on","unbindHandler","off","addDomListener","object","key","eventName","callback","context","info","def","propDef","_callback","eventNamespace","id","addBindListenerResult","addUnbindListenerResult","bindings"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,SAASA,qBAAT,OAIG;AAAA,MAHDC,aAGC,QAHDA,aAGC;AAAA,MAFDC,eAEC,QAFDA,eAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,SAAO;AACLC,IAAAA,WADK,yBACiB;AAAA,UAAVC,GAAU,uEAAJ,EAAI;AAAA,UACZC,IADY,GACHD,GADG,CACZC,IADY;;AAEpB,UAAIA,IAAJ,EAAU;AACRC,wBAAIC,CAAJ,CAAMF,IAAN,EAAYG,EAAZ,CAAeR,aAAf,EAA8BE,QAA9B,EAAwCD,eAAxC;AACD;AACF,KANI;AAOLQ,IAAAA,aAPK,2BAOmB;AAAA,UAAVL,GAAU,uEAAJ,EAAI;AAAA,UACdC,IADc,GACLD,GADK,CACdC,IADc;;AAEtB,UAAIA,IAAJ,EAAU;AACRC,wBAAIC,CAAJ,CAAMF,IAAN,EAAYK,GAAZ,CAAgBV,aAAhB,EAA+BE,QAA/B,EAAyCD,eAAzC;AACD;AACF;AAZI,GAAP;AAcD,C,CAED;;;AACe,SAASU,cAAT,CAAwBC,MAAxB,EAAgCC,GAAhC,EAAqCC,SAArC,EAAgDZ,QAAhD,EAA0Da,QAA1D,EAAoEC,OAApE,EAA6EC,IAA7E,EAAmF;AAChG,MAAMC,GAAG,GAAG,sBAAYN,MAAZ,CAAZ;AACA,MAAMO,OAAO,GAAG,4BAAWP,MAAX,EAAmBC,GAAnB,CAAhB;AAEA,MAAMZ,eAAe,GAAG,uCAAsB;AAC5CY,IAAAA,GAAG,EAAHA,GAD4C;AAE5CD,IAAAA,MAAM,EAANA,MAF4C;AAG5CG,IAAAA,QAAQ,EAARA,QAH4C;AAI5CC,IAAAA,OAAO,EAAEA,OAAO,IAAIJ;AAJwB,GAAtB,CAAxB,CAJgG,CAWhG;;AACAX,EAAAA,eAAe,CAACmB,SAAhB,GAA4BL,QAA5B;AAEA,MAAMM,cAAc,GAAGH,GAAG,CAACI,EAAJ,GAAST,GAAhC;AACA,MAAMb,aAAa,aAAMc,SAAN,cAAmBO,cAAnB,CAAnB;;AAfgG,8BAgBzDtB,qBAAqB,CAAC;AAC3DC,IAAAA,aAAa,EAAbA,aAD2D;AAE3DC,IAAAA,eAAe,EAAfA,eAF2D;AAG3DC,IAAAA,QAAQ,EAARA;AAH2D,GAAD,CAhBoC;AAAA,MAgBxFC,WAhBwF,yBAgBxFA,WAhBwF;AAAA,MAgB3EM,aAhB2E,yBAgB3EA,aAhB2E;;AAqBhG,MAAMc,qBAAqB,GAAG,6BAAYX,MAAZ,iBAA4BC,GAA5B,GAAmCV,WAAnC,EAAgDa,OAAhD,EAAyDC,IAAzD,CAA9B;AACA,MAAMO,uBAAuB,GAAG,6BAAYZ,MAAZ,mBAA8BC,GAA9B,GAAqCJ,aAArC,EAAoDO,OAApD,EAA6DC,IAA7D,CAAhC,CAtBgG,CAwBhG;AACA;;AACA,MAAIM,qBAAqB,IAAIC,uBAA7B,EAAsD;AAAA,QAC5CC,QAD4C,GAC/BN,OAD+B,CAC5CM,QAD4C;;AAEpD,QAAIA,QAAJ,EAAc;AACZ,+BAAQA,QAAR,EAAkB;AAAA,YAAGpB,IAAH,SAAGA,IAAH;AAAA,eAAcF,WAAW,CAAC;AAAEE,UAAAA,IAAI,EAAJA;AAAF,SAAD,CAAzB;AAAA,OAAlB;AACD;AACF;;AAED,SAAOO,MAAP;AACD","sourcesContent":["import initSeemple from '../_core/init';\nimport defineProp from '../_core/defineprop';\nimport addListener from './_addlistener';\nimport dom from '../_dom';\nimport createDomEventHandler from './_createdomeventhandler';\nimport forEach from '../_helpers/foreach';\n\n// returns an object with event handlers used at addDomListener\nfunction createBindingHandlers({\n  fullEventName,\n  domEventHandler,\n  selector\n}) {\n  return {\n    bindHandler(evt = {}) {\n      const { node } = evt;\n      if (node) {\n        dom.$(node).on(fullEventName, selector, domEventHandler);\n      }\n    },\n    unbindHandler(evt = {}) {\n      const { node } = evt;\n      if (node) {\n        dom.$(node).off(fullEventName, selector, domEventHandler);\n      }\n    }\n  };\n}\n\n// adds DOM event listener for nodes bound to given property\nexport default function addDomListener(object, key, eventName, selector, callback, context, info) {\n  const def = initSeemple(object);\n  const propDef = defineProp(object, key);\n\n  const domEventHandler = createDomEventHandler({\n    key,\n    object,\n    callback,\n    context: context || object\n  });\n\n  // making possible to remove this event listener\n  domEventHandler._callback = callback;\n\n  const eventNamespace = def.id + key;\n  const fullEventName = `${eventName}.${eventNamespace}`;\n  const { bindHandler, unbindHandler } = createBindingHandlers({\n    fullEventName,\n    domEventHandler,\n    selector\n  });\n  const addBindListenerResult = addListener(object, `bind:${key}`, bindHandler, context, info);\n  const addUnbindListenerResult = addListener(object, `unbind:${key}`, unbindHandler, context, info);\n\n  // if events are added successfully then run bindHandler for every node immediately\n  // TODO: Describe why do we need addBindListenerResult and addUnbindListenerResult\n  if (addBindListenerResult && addUnbindListenerResult) {\n    const { bindings } = propDef;\n    if (bindings) {\n      forEach(bindings, ({ node }) => bindHandler({ node }));\n    }\n  }\n\n  return object;\n}\n"],"file":"_adddomlistener.js"}