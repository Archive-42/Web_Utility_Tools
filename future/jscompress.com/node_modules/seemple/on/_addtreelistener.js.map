{"version":3,"sources":["../../src/on/_addtreelistener.js"],"names":["createTreeListener","handler","restPath","newHandler","treeListener","changeEvent","extendedChangeEvent","previousValue","value","addTreeListener","call","_callback","object","deepPath","split","i","length","listenPath","slice"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;AACA,SAASA,kBAAT,OAAmD;AAAA,MAArBC,OAAqB,QAArBA,OAAqB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACjD,MAAMC,UAAU,GAAG,SAASC,YAAT,CAAsBC,WAAtB,EAAmC;AACpD,QAAMC,mBAAmB;AACvBJ,MAAAA,QAAQ,EAARA;AADuB,OAEpBG,WAFoB,CAAzB;;AADoD,QAK5CE,aAL4C,GAKnBF,WALmB,CAK5CE,aAL4C;AAAA,QAK7BC,KAL6B,GAKnBH,WALmB,CAK7BG,KAL6B,EAOpD;;AACA,QAAID,aAAa,IAAI,yBAAOA,aAAP,MAAyB,QAA9C,EAAwD;AACtD,0CAAmBA,aAAnB,EAAkCL,QAAlC,EAA4CD,OAA5C;AACD,KAVmD,CAYpD;;;AACA,QAAIO,KAAK,IAAI,yBAAOA,KAAP,MAAiB,QAA9B,EAAwC;AACtCC,MAAAA,eAAe,CAACD,KAAD,EAAQN,QAAR,EAAkBD,OAAlB,CAAf;AACD,KAfmD,CAiBpD;;;AACAA,IAAAA,OAAO,CAACS,IAAR,CAAa,IAAb,EAAmBJ,mBAAnB;AACD,GAnBD;;AAqBAH,EAAAA,UAAU,CAACQ,SAAX,GAAuBV,OAAvB;AAEA,SAAOE,UAAP;AACD,C,CAED;AACA;AACA;;;AACe,SAASM,eAAT,CAAyBG,MAAzB,EAAiCC,QAAjC,EAA2CZ,OAA3C,EAAoD;AACjE,MAAI,OAAOY,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAX,CADgC,CACA;AACjC,GAHgE,CAKjE;;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACA,QAAME,UAAU,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBH,CAAlB,CAAnB;AACA,QAAMb,QAAQ,GAAGW,QAAQ,CAACK,KAAT,CAAeH,CAAC,GAAG,CAAnB,CAAjB;AAEA,sCACEH,MADF,EAEEK,UAFF,yBAGkBJ,QAAQ,CAACE,CAAD,CAH1B,GAIEf,kBAAkB,CAAC;AACjBC,MAAAA,OAAO,EAAPA,OADiB;AAEjBC,MAAAA,QAAQ,EAARA;AAFiB,KAAD,CAJpB;AASD;AACF","sourcesContent":["import delegateListener from './_delegatelistener';\nimport removeTreeListener from '../off/_removetreelistener';\n\n// creates tree listener\nfunction createTreeListener({ handler, restPath }) {\n  const newHandler = function treeListener(changeEvent) {\n    const extendedChangeEvent = {\n      restPath,\n      ...changeEvent\n    };\n    const { previousValue, value } = changeEvent;\n\n    // removes listener for all branches of the path on old object\n    if (previousValue && typeof previousValue === 'object') {\n      removeTreeListener(previousValue, restPath, handler);\n    }\n\n    // adds listener for all branches of \"restPath\" path on newly assigned object\n    if (value && typeof value === 'object') {\n      addTreeListener(value, restPath, handler);\n    }\n\n    // call original handler\n    handler.call(this, extendedChangeEvent);\n  };\n\n  newHandler._callback = handler;\n\n  return newHandler;\n}\n\n// listens changes for all branches of given path\n// TODO: Pass context to addTreeListener\n// one of the most hard functions to understand\nexport default function addTreeListener(object, deepPath, handler) {\n  if (typeof deepPath === 'string') {\n    deepPath = deepPath.split('.'); // eslint-disable-line no-param-reassign\n  }\n\n  // iterate over all keys and delegate listener for all objects of given branch\n  for (let i = 0; i < deepPath.length; i++) {\n    // TODO: Array.prototype.slice method is slow\n    const listenPath = deepPath.slice(0, i);\n    const restPath = deepPath.slice(i + 1);\n\n    delegateListener(\n      object,\n      listenPath,\n      `_change:tree:${deepPath[i]}`,\n      createTreeListener({\n        handler,\n        restPath\n      })\n    );\n  }\n}\n"],"file":"_addtreelistener.js"}