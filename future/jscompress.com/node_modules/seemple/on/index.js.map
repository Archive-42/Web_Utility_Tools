{"version":3,"sources":["../../src/on/index.js"],"names":["on","object","givenNames","callback","triggerOnInit","context","isSeemple","isNamesVarArray","Array","namesObjCallback","namesObjName","names","split","splitBySpaceReg","name","delegatedEventParts","length","path","delegatedName","call"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,EAAT,CAAYC,MAAZ,EAAoBC,UAApB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyDC,OAAzD,EAAkE;AAC/E,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,OAAO,GAAGD,aAAV;AACAA,IAAAA,aAAa,GAAGD,QAAhB;AACAA,IAAAA,QAAQ,GAAGD,UAAX;AACAA,IAAAA,UAAU,GAAGD,MAAb;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GATD,MASO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,IAAxB;AACD;;AAED,MAAMM,eAAe,GAAGL,UAAU,YAAYM,KAA9C,CAf+E,CAiB/E;;AACA,MAAIN,UAAU,IAAI,yBAAOA,UAAP,MAAsB,QAApC,IAAgD,CAACK,eAArD,EAAsE;AACpE,4BAAOL,UAAP,EAAmB,UAACO,gBAAD,EAAmBC,YAAnB;AAAA,aAAoCV,EAAE,CACvDC,MADuD,EAC/CS,YAD+C,EACjCD,gBADiC,EACfN,QADe,EACLC,aADK,CAAtC;AAAA,KAAnB;AAGA,WAAOH,MAAP;AACD;;AAED,MAAI,OAAOC,UAAP,KAAsB,QAAtB,IAAkC,CAACK,eAAvC,EAAwD;AACtD,UAAM,8BAAa,eAAb,EAA8B;AAAEI,MAAAA,KAAK,EAAET;AAAT,KAA9B,CAAN;AACD,GA3B8E,CA6B/E;AACA;;;AACA,MAAMS,KAAK,GAAGJ,eAAe,GAAGL,UAAH,GAAgBA,UAAU,CAACU,KAAX,CAAiBC,8BAAjB,CAA7C,CA/B+E,CAiC/E;;AACA,MAAI,OAAOT,aAAP,KAAyB,SAAzB,IAAsC,OAAOA,aAAP,KAAyB,WAAnE,EAAgF;AAC9E;AAD8E,eAEnD,CAACA,aAAD,EAAgBC,OAAhB,CAFmD;AAE7EA,IAAAA,OAF6E;AAEpED,IAAAA,aAFoE;AAG/E;;AAED,2BAAQO,KAAR,EAAe,UAACG,IAAD,EAAU;AACvB,QAAMC,mBAAmB,GAAGD,IAAI,CAACF,KAAL,CAAW,GAAX,CAA5B;;AAEA,QAAIG,mBAAmB,CAACC,MAApB,GAA6B,CAAjC,EAAoC;AAClC;AADkC,iEAEJD,mBAFI;AAAA,UAE3BE,IAF2B;AAAA,UAErBC,aAFqB;;AAGlC,wCAAiBjB,MAAjB,EAAyBgB,IAAzB,EAA+BC,aAA/B,EAA8Cf,QAA9C,EAAwDE,OAAO,IAAIJ,MAAnE;AACD,KAJD,MAIO;AACL;AACA,mCAAYA,MAAZ,EAAoBa,IAApB,EAA0BX,QAA1B,EAAoCE,OAApC;AACD;AACF,GAXD,EAvC+E,CAoD/E;;AACA,MAAID,aAAa,KAAK,IAAtB,EAA4B;AAC1BD,IAAAA,QAAQ,CAACgB,IAAT,CAAcd,OAAO,IAAIJ,MAAzB,EAAiC;AAAEG,MAAAA,aAAa,EAAbA;AAAF,KAAjC;AACD;;AAED,SAAOH,MAAP;AACD","sourcesContent":["import splitBySpaceReg from './_splitbyspaceregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport seempleError from '../_helpers/seempleerror';\nimport forOwn from '../_helpers/forown';\nimport forEach from '../_helpers/foreach';\nimport addListener from './_addlistener';\nimport delegateListener from './_delegatelistener';\n\n// adds event listener\nexport default function on(object, givenNames, callback, triggerOnInit, context) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    context = triggerOnInit;\n    triggerOnInit = callback;\n    callback = givenNames;\n    givenNames = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'on');\n  }\n\n  const isNamesVarArray = givenNames instanceof Array;\n\n  // allow to pass name-handler object\n  if (givenNames && typeof givenNames === 'object' && !isNamesVarArray) {\n    forOwn(givenNames, (namesObjCallback, namesObjName) => on(\n      object, namesObjName, namesObjCallback, callback, triggerOnInit\n    ));\n    return object;\n  }\n\n  if (typeof givenNames !== 'string' && !isNamesVarArray) {\n    throw seempleError('on:names_type', { names: givenNames });\n  }\n\n  // split by spaces\n  // TODO: Array of names passed to on method is non-documented feature\n  const names = isNamesVarArray ? givenNames : givenNames.split(splitBySpaceReg);\n\n  // flip triggerOnInit and context when triggerOnInit is not boolean\n  if (typeof triggerOnInit !== 'boolean' && typeof triggerOnInit !== 'undefined') {\n    // eslint-disable-next-line no-param-reassign\n    [context, triggerOnInit] = [triggerOnInit, context];\n  }\n\n  forEach(names, (name) => {\n    const delegatedEventParts = name.split('@');\n\n    if (delegatedEventParts.length > 1) {\n      // if @ exists in event name then this is delegated event\n      const [path, delegatedName] = delegatedEventParts;\n      delegateListener(object, path, delegatedName, callback, context || object);\n    } else {\n      // if not, this is simple event\n      addListener(object, name, callback, context);\n    }\n  });\n\n  // call callback immediatelly if triggerOnInit is true\n  if (triggerOnInit === true) {\n    callback.call(context || object, { triggerOnInit });\n  }\n\n  return object;\n}\n"],"file":"index.js"}