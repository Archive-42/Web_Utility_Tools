"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = defineHiddenContentProperty;

var _calc = _interopRequireDefault(require("../../calc"));

var _parserdata = _interopRequireDefault(require("../_parserdata"));

var hiddenPropertyPrefix = "".concat(Math.random()).replace('0.', 'hidden');
var hiddenPropertyIndex = 0; // defines hiden (without accessors) computed property
// that dependent on given properties ('keys') as text template describes
// for example if text='{{x}} blah {{y}}', x='foo', y='bar'
// then the new property should have value 'foo blah bar'

function defineHiddenContentProperty(_ref) {
  var object = _ref.object,
      keys = _ref.keys,
      text = _ref.text;
  var key = "".concat(hiddenPropertyPrefix).concat(hiddenPropertyIndex);
  var regs = {};
  var escLeftBracket = _parserdata["default"].escLeftBracket,
      escRightBracket = _parserdata["default"].escRightBracket;
  hiddenPropertyIndex += 1; // create and cache regular expressions which will help us to
  // change target property value quickly when sources are changed
  // TODO: We need better parser!

  for (var i = 0; i < keys.length; i++) {
    regs[keys[i]] = new RegExp("".concat(escLeftBracket, "\\s*").concat(keys[i], "\\s*").concat(escRightBracket), 'g');
  }

  (0, _calc["default"])(object, key, keys, function calcHandler() {
    var value = text; // replace things like {{x}} by actual values

    for (var _i = 0; _i < keys.length; _i++) {
      value = value.replace(regs[keys[_i]], arguments[_i]);
    }

    return value;
  }, {
    isTargetPropertyHidden: true,
    debounceCalc: false
  });
  return key;
}
//# sourceMappingURL=_definehiddencontentproperty.js.map