{"version":3,"sources":["../../../src/parsebindings/_processattribute/_definehiddencontentproperty.js"],"names":["hiddenPropertyPrefix","Math","random","replace","hiddenPropertyIndex","defineHiddenContentProperty","object","keys","text","key","regs","escLeftBracket","parserData","escRightBracket","i","length","RegExp","calcHandler","value","arguments","isTargetPropertyHidden","debounceCalc"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,oBAAoB,GAAG,UAAGC,IAAI,CAACC,MAAL,EAAH,EAAmBC,OAAnB,CAA2B,IAA3B,EAAiC,QAAjC,CAA7B;AACA,IAAIC,mBAAmB,GAAG,CAA1B,C,CAEA;AACA;AACA;AACA;;AACe,SAASC,2BAAT,OAIZ;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,IAEC,QAFDA,IAEC;AAAA,MADDC,IACC,QADDA,IACC;AACD,MAAMC,GAAG,aAAMT,oBAAN,SAA6BI,mBAA7B,CAAT;AACA,MAAMM,IAAI,GAAG,EAAb;AAFC,MAGOC,cAHP,GAG2CC,sBAH3C,CAGOD,cAHP;AAAA,MAGuBE,eAHvB,GAG2CD,sBAH3C,CAGuBC,eAHvB;AAKDT,EAAAA,mBAAmB,IAAI,CAAvB,CALC,CAOD;AACA;AACA;;AACA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCJ,IAAAA,IAAI,CAACH,IAAI,CAACO,CAAD,CAAL,CAAJ,GAAgB,IAAIE,MAAJ,WAAcL,cAAd,iBAAmCJ,IAAI,CAACO,CAAD,CAAvC,iBAAiDD,eAAjD,GAAoE,GAApE,CAAhB;AACD;;AAED,wBAAKP,MAAL,EAAaG,GAAb,EAAkBF,IAAlB,EAAwB,SAASU,WAAT,GAAuB;AAC7C,QAAIC,KAAK,GAAGV,IAAZ,CAD6C,CAG7C;;AACA,SAAK,IAAIM,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,EAAC,EAAlC,EAAsC;AACpCI,MAAAA,KAAK,GAAGA,KAAK,CAACf,OAAN,CAAcO,IAAI,CAACH,IAAI,CAACO,EAAD,CAAL,CAAlB,EAA6BK,SAAS,CAACL,EAAD,CAAtC,CAAR;AACD;;AAED,WAAOI,KAAP;AACD,GATD,EASG;AACDE,IAAAA,sBAAsB,EAAE,IADvB;AAEDC,IAAAA,YAAY,EAAE;AAFb,GATH;AAcA,SAAOZ,GAAP;AACD","sourcesContent":["import calc from '../../calc';\nimport parserData from '../_parserdata';\n\nconst hiddenPropertyPrefix = `${Math.random()}`.replace('0.', 'hidden');\nlet hiddenPropertyIndex = 0;\n\n// defines hiden (without accessors) computed property\n// that dependent on given properties ('keys') as text template describes\n// for example if text='{{x}} blah {{y}}', x='foo', y='bar'\n// then the new property should have value 'foo blah bar'\nexport default function defineHiddenContentProperty({\n  object,\n  keys,\n  text\n}) {\n  const key = `${hiddenPropertyPrefix}${hiddenPropertyIndex}`;\n  const regs = {};\n  const { escLeftBracket, escRightBracket } = parserData;\n\n  hiddenPropertyIndex += 1;\n\n  // create and cache regular expressions which will help us to\n  // change target property value quickly when sources are changed\n  // TODO: We need better parser!\n  for (let i = 0; i < keys.length; i++) {\n    regs[keys[i]] = new RegExp(`${escLeftBracket}\\\\s*${keys[i]}\\\\s*${escRightBracket}`, 'g');\n  }\n\n  calc(object, key, keys, function calcHandler() {\n    let value = text;\n\n    // replace things like {{x}} by actual values\n    for (let i = 0; i < keys.length; i++) {\n      value = value.replace(regs[keys[i]], arguments[i]);\n    }\n\n    return value;\n  }, {\n    isTargetPropertyHidden: true,\n    debounceCalc: false\n  });\n\n  return key;\n}\n"],"file":"_definehiddencontentproperty.js"}