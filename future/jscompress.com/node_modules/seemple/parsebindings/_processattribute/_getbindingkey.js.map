{"version":3,"sources":["../../../src/parsebindings/_processattribute/_getbindingkey.js"],"names":["getBindingKey","object","text","strictBindingReg","parserData","bindingReg","keys","execResult","key","lastIndex","exec","push","length","test"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;AACe,SAASA,aAAT,OAGZ;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,IACC,QADDA,IACC;AAAA,MACOC,gBADP,GACwCC,sBADxC,CACOD,gBADP;AAAA,MACyBE,UADzB,GACwCD,sBADxC,CACyBC,UADzB;AAED,MAAMC,IAAI,GAAG,EAAb;AAEA,MAAIC,UAAJ;AACA,MAAIC,GAAJ;AAEAL,EAAAA,gBAAgB,CAACM,SAAjB,GAA6B,CAA7B;AACAJ,EAAAA,UAAU,CAACI,SAAX,GAAuB,CAAvB,CARC,CAUD;AACA;;AACA,SAAQF,UAAU,GAAGF,UAAU,CAACK,IAAX,CAAgBR,IAAhB,CAArB,EAA6C;AAC3CI,IAAAA,IAAI,CAACK,IAAL,CAAUJ,UAAU,CAAC,CAAD,CAApB;AACD;;AAED,MAAID,IAAI,CAACM,MAAL,KAAgB,CAAhB,IAAqBT,gBAAgB,CAACU,IAAjB,CAAsBX,IAAtB,CAAzB,EAAsD;AACpD;AACA;AACA;AACAM,IAAAA,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAV;AACD,GALD,MAKO;AACL;AACAE,IAAAA,GAAG,GAAG,6CAA4B;AAChCP,MAAAA,MAAM,EAANA,MADgC;AAEhCK,MAAAA,IAAI,EAAJA,IAFgC;AAGhCJ,MAAAA,IAAI,EAAJA;AAHgC,KAA5B,CAAN;AAKD;;AAED,SAAOM,GAAP;AACD","sourcesContent":["import parserData from '../_parserdata';\nimport defineHiddenContentProperty from './_definehiddencontentproperty';\n\n// analyzes string and returns only one key which will be actually bound to an attribute\nexport default function getBindingKey({\n  object,\n  text // for example 'Hello, {{x}}'\n}) {\n  const { strictBindingReg, bindingReg } = parserData;\n  const keys = [];\n\n  let execResult;\n  let key;\n\n  strictBindingReg.lastIndex = 0;\n  bindingReg.lastIndex = 0;\n\n  // extract keys given in parser brackers\n  // '{{x}} {{y}}' -> ['x', 'y']\n  while ((execResult = bindingReg.exec(text))) {\n    keys.push(execResult[1]);\n  }\n\n  if (keys.length === 1 && strictBindingReg.test(text)) {\n    // if there is only one key and if only binding substring is present in a text\n    // in other words '{{x}}' is given instead of '{{x}} {{y}}' or '{{x}}foo'\n    // then don't create computable property and use that key (eg 'x') for binding\n    key = keys[0];\n  } else {\n    // create hidden computable property\n    key = defineHiddenContentProperty({\n      object,\n      keys,\n      text\n    });\n  }\n\n  return key;\n}\n"],"file":"_getbindingkey.js"}