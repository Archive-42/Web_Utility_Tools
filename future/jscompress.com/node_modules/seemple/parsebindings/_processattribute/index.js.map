{"version":3,"sources":["../../../src/parsebindings/_processattribute/index.js"],"names":["attributeBinder","setValue","value","processAttribute","node","attribute","object","eventOptions","name","type","key","text","probablyValueInput","probablyCheckableInput","defaultBinder","removeAttribute"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,QADsB,oBACbC,KADa,EACN;AACd,SAAKA,KAAL,GAAaA,KAAb;AACD;AAHqB,CAAxB,C,CAMA;AACA;AACA;;AACe,SAASC,gBAAT,OAKZ;AAAA,MAJDC,IAIC,QAJDA,IAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,YACC,QADDA,YACC;AAAA,MACOC,IADP,GACuBH,SADvB,CACOG,IADP;AAAA,MACaN,KADb,GACuBG,SADvB,CACaH,KADb;AAAA,MAEOO,IAFP,GAEgBL,IAFhB,CAEOK,IAFP,EAGD;AACA;;AACA,MAAMC,GAAG,GAAG,+BAAc;AACxBJ,IAAAA,MAAM,EAANA,MADwB;AAExBK,IAAAA,IAAI,EAAET;AAFkB,GAAd,CAAZ;AAIA,MAAMU,kBAAkB,GAAGJ,IAAI,KAAK,OAAT,IAAoBC,IAAI,KAAK,UAA7B,IAA2CA,IAAI,KAAK,OAA/E;AACA,MAAMI,sBAAsB,GAAGL,IAAI,KAAK,SAAT,KAAuBC,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,OAAvD,CAA/B;AAEA,MAAIK,aAAJ;;AAEA,MAAIF,kBAAkB,IAAIC,sBAA1B,EAAkD;AAChDC,IAAAA,aAAa,GAAG,+BAAcV,IAAd,CAAhB;AACD;;AAED,MAAIU,aAAJ,EAAmB;AACjB;AACA;AACAV,IAAAA,IAAI,CAACW,eAAL,CAAqBP,IAArB;AACA,8BAASF,MAAT,EAAiBI,GAAjB,EAAsBN,IAAtB,EAA4BU,aAA5B,EAA2CP,YAA3C;AACD,GALD,MAKO;AACL;AACA,8BAASD,MAAT,EAAiBI,GAAjB,EAAsBL,SAAtB,EAAiCL,eAAjC,EAAkDO,YAAlD;AACD;AACF","sourcesContent":["import getBindingKey from './_getbindingkey';\nimport bindNode from '../../bindnode';\nimport lookForBinder from '../../lookforbinder';\n\n// a binder for instance of Attr\nconst attributeBinder = {\n  setValue(value) {\n    this.value = value;\n  }\n};\n\n// adds binding for an attribute\n// its logic is much harder than for text node\n// check out imported modules for more info\nexport default function processAttribute({\n  node,\n  attribute,\n  object,\n  eventOptions\n}) {\n  const { name, value } = attribute;\n  const { type } = node;\n  // get a key which will be actually bound to an attribute\n  // getBindingKey analyzes given value, creates computable property and returns its key\n  const key = getBindingKey({\n    object,\n    text: value\n  });\n  const probablyValueInput = name === 'value' && type !== 'checkbox' && type !== 'radio';\n  const probablyCheckableInput = name === 'checked' && (type === 'checkbox' || type === 'radio');\n\n  let defaultBinder;\n\n  if (probablyValueInput || probablyCheckableInput) {\n    defaultBinder = lookForBinder(node);\n  }\n\n  if (defaultBinder) {\n    // if deault binder is found then this is default HTML5 form element\n    // remove the attribute and use found binder\n    node.removeAttribute(name);\n    bindNode(object, key, node, defaultBinder, eventOptions);\n  } else {\n    // simply bind an attribute\n    bindNode(object, key, attribute, attributeBinder, eventOptions);\n  }\n}\n"],"file":"index.js"}