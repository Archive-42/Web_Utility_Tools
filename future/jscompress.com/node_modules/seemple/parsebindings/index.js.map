{"version":3,"sources":["../../src/parsebindings/index.js"],"names":["parseBindings","object","givenNodes","eventOptions","isSeemple","extendedEventOptions","useExactBinder","fromParser","setValueOnBind","nodes","allNodes","leftBracket","parserData","bindingReg","indexOf","dom","$","parseHTML","node","push","i","ELEMENT_NODE","TEXT_NODE","nodeType","outerHTML","innerHTML","childNodes","attributes","length","attrs","Array","prototype","slice","call","attribute","test","value","j","childNode","textContent","textNode"],"mappings":"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","sourcesContent":["import checkObjectType from '../_helpers/checkobjecttype';\nimport dom from '../_dom';\nimport parserData from './_parserdata';\nimport processTextNode from './_processtextnode';\nimport processAttribute from './_processattribute';\nimport getNodes from '../bindnode/_getnodes';\nimport forEach from '../_helpers/foreach';\nimport assign from '../_helpers/assign';\n\n// makes parsing of given node (node, $(nodes), selector, HTML)\n// and initializes bindings for attributes and text nodes which contain things like {{foo}}\nexport default function parseBindings(object, givenNodes, eventOptions) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    eventOptions = givenNodes;\n    givenNodes = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'parseBindings');\n  }\n\n  const extendedEventOptions = {\n    // useExactBinder is little optimization\n    // without this option used binder is extended by default binder\n    useExactBinder: true,\n    fromParser: true,\n    setValueOnBind: true\n  };\n\n  if (typeof eventOptions === 'object') {\n    assign(extendedEventOptions, eventOptions);\n  }\n\n  let nodes;\n  const allNodes = [];\n  // extract all needed data from parserData\n  // check out what is parserData in its module\n  const {\n    leftBracket,\n    bindingReg\n  } = parserData;\n\n  if (typeof givenNodes === 'string') {\n    if (~givenNodes.indexOf('<')) {\n      // this is HTML\n      nodes = dom.$.parseHTML(givenNodes);\n      if (!~givenNodes.indexOf(leftBracket)) {\n        // if it doesn't include parser bracket then we don't need to check\n        // their existence for all included nodes in cycle below\n        return nodes;\n      }\n    } else {\n      // this is a selector\n      nodes = getNodes(object, givenNodes);\n    }\n  } else if (typeof givenNodes === 'object') {\n    // this is a node, nodeList or something else (eg array, jQuery instance etc)\n    nodes = dom.$(givenNodes);\n  }\n\n  // to make possible to not use recursion we're collecting all nodes to allNodes array\n  forEach(nodes, (node) => allNodes.push(node));\n\n  // on every cycle of array we're adding new descendants to allNodes\n  // increasing # of needed iterations\n  for (let i = 0; i < allNodes.length; i++) {\n    const node = allNodes[i];\n    const ELEMENT_NODE = 1;\n    const TEXT_NODE = 3;\n\n    // allow to parse elements only\n    if (node.nodeType !== ELEMENT_NODE) {\n      continue;\n    }\n\n    const {\n      outerHTML, innerHTML, childNodes, attributes\n    } = node;\n\n\n    // if outerHTML does't contain left bracket, then this node doesn't need to be parsed\n    // we may need to check outerHTML existence for older browsers\n    // we may need to add !~outerHTML.indexOf(encodeURI(leftBracket) to support old FF\n    if (!~outerHTML.indexOf(leftBracket)) {\n      continue;\n    }\n\n    // initialize bindings for attributes if they appear\n    if (attributes.length) {\n      // fixes Firefox issue: attributes.length can be changed by processAttribute\n      const attrs = attributes.length > 1\n        ? Array.prototype.slice.call(attributes)\n        : attributes;\n\n      forEach(attrs, (attribute) => {\n        if (bindingReg.test(attribute.value)) {\n          processAttribute({\n            node,\n            attribute,\n            object,\n            eventOptions: extendedEventOptions\n          });\n        }\n      });\n    }\n\n    // if innerHTML does't contain left bracket,\n    // then children of this node don't need to be parsed\n    // we may need to add !~innerHTML.indexOf(encodeURI(leftBracket) to support old FF\n    if (!~innerHTML.indexOf(leftBracket)) {\n      continue;\n    }\n\n    for (let j = 0; j < childNodes.length; j++) {\n      const childNode = childNodes[j];\n      const { nodeType, textContent } = childNode;\n\n      if (nodeType === ELEMENT_NODE) {\n        // if childNode is HTML element then add it to the end of allNodes array\n        // to check everything on next outer cycle iterations\n        allNodes.push(childNode);\n      } else if (nodeType === TEXT_NODE) {\n        // if childNode is text node which contains things like {{x}}\n        // then initialize bindings for this node\n        if (bindingReg.test(textContent)) {\n          processTextNode({\n            object,\n            node,\n            textNode: childNode,\n            eventOptions: extendedEventOptions\n          });\n        }\n      }\n    }\n  }\n\n  return nodes;\n}\n"],"file":"index.js"}