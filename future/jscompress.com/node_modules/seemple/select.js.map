{"version":3,"sources":["../src/select.js"],"names":["customSelectorTestReg","select","object","selector","isSeemple","test","def","defs","get","propDef","props","sandbox","bindings","i","length","node","selected","querySelector"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,qBAAqB,GAAG,4BAA9B,C,CAEA;;AACe,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAC/C,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,QAAQ,GAAGD,MAAX;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GAND,MAMO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,QAAxB;AACD,GAV8C,CAY/C;;;AACA,MAAIF,qBAAqB,CAACK,IAAtB,CAA2BF,QAA3B,CAAJ,EAA0C;AACxC,WAAO,6BAAYD,MAAZ,EAAoBC,QAApB,EAA8B,CAA9B,KAAoC,IAA3C;AACD;;AACD,MAAMG,GAAG,GAAGC,iBAAKC,GAAL,CAASN,MAAT,CAAZ;;AAEA,MAAI,CAACI,GAAD,IAAQ,OAAOH,QAAP,KAAoB,QAAhC,EAA0C;AACxC,WAAO,IAAP;AACD;;AAED,MAAMM,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAUC,OAA1B;;AAEA,MAAI,CAACF,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AA1B8C,MA4BvCG,QA5BuC,GA4B1BH,OA5B0B,CA4BvCG,QA5BuC;;AA8B/C,MAAIA,QAAJ,EAAc;AACZ;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAME,IAAI,GAAGH,QAAQ,CAACC,CAAD,CAAR,CAAYE,IAAzB;AACA,UAAMC,QAAQ,GAAGD,IAAI,CAACE,aAAL,CAAmBd,QAAnB,CAAjB;;AAEA,UAAIa,QAAJ,EAAc;AACZ,eAAOA,QAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["import defs from './_core/defs';\nimport selectNodes from './bindnode/_selectnodes';\nimport checkObjectType from './_helpers/checkobjecttype';\n\nconst customSelectorTestReg = /:sandbox|:bound\\(([^(]*)\\)/;\n\n// selects one node based on given selector\nexport default function select(object, selector) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    selector = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'select');\n  }\n\n  // the selector includes \"custom\" things like :sandbox or :bound(KEY)\n  if (customSelectorTestReg.test(selector)) {\n    return selectNodes(object, selector)[0] || null;\n  }\n  const def = defs.get(object);\n\n  if (!def || typeof selector !== 'string') {\n    return null;\n  }\n\n  const propDef = def.props.sandbox;\n\n  if (!propDef) {\n    return null;\n  }\n\n  const { bindings } = propDef;\n\n  if (bindings) {\n    // iterate over all bound nodes trying to find a descendant matched given selector\n    for (let i = 0; i < bindings.length; i++) {\n      const node = bindings[i].node;\n      const selected = node.querySelector(selector);\n\n      if (selected) {\n        return selected;\n      }\n    }\n  }\n\n  return null;\n}\n"],"file":"select.js"}