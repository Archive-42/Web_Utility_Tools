{"version":3,"sources":["../../src/trigger/index.js"],"names":["trigger","object","givenNames","triggerArgs","args","isSeemple","names","split","splitBySpaceReg","def","defs","get","allEvents","events","name","domEvtExecResult","domEventReg","exec","eventName","key","selector"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,OAAT,GAA0B;AACvC,MAAIC,MAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,WAAJ;;AAHuC,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAKvC,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;AACCH,IAAAA,UAF6C,GAEfE,IAFe;AAE9BD,IAAAA,WAF8B,GAEfC,IAFe;AAG9CH,IAAAA,MAAM,GAAG,IAAT;AACD,GAJD,MAIO;AACJA,IAAAA,MADI,GACkCG,IADlC;AACIF,IAAAA,UADJ,GACkCE,IADlC;AACmBD,IAAAA,WADnB,GACkCC,IADlC;AAEL;AACA,qCAAgBH,MAAhB,EAAwB,SAAxB;AACD;;AACD,MAAIK,KAAJ,CAduC,CAgBvC;;AACA,MAAI,OAAOJ,UAAP,KAAsB,QAA1B,EAAoC;AAClCI,IAAAA,KAAK,GAAGJ,UAAU,CAACK,KAAX,CAAiBC,8BAAjB,CAAR;AACD,GAFD,MAEO;AACL,UAAM,8BAAa,oBAAb,EAAmC;AAAEF,MAAAA,KAAK,EAAEJ;AAAT,KAAnC,CAAN;AACD;;AAED,MAAMO,GAAG,GAAGC,iBAAKC,GAAL,CAASV,MAAT,CAAZ,CAvBuC,CAyBvC;;;AACA,MAAI,CAACQ,GAAL,EAAU;AACR,WAAOR,MAAP;AACD;;AA5BsC,MA8BvBW,SA9BuB,GA8BTH,GA9BS,CA8B/BI,MA9B+B;;AAgCvC,MAAI,CAACD,SAAL,EAAgB;AACd,WAAOX,MAAP;AACD;;AAED,2BAAQK,KAAR,EAAe,UAACQ,IAAD,EAAU;AACvB,QAAMC,gBAAgB,GAAGC,2BAAYC,IAAZ,CAAiBH,IAAjB,CAAzB;;AAEA,QAAIC,gBAAJ,EAAsB;AACpB;AADoB,8DAE6BA,gBAF7B;AAAA,UAEXG,SAFW;AAAA;AAAA,UAEAC,GAFA,mCAEM,SAFN;AAAA,UAEiBC,QAFjB;;AAGpB,uCAAgBnB,MAAhB,EAAwBkB,GAAxB,EAA6BD,SAA7B,EAAwCE,QAAxC,EAAkDjB,WAAlD;AACD,KAJD,MAIO;AACL;AACA,kCAAWF,MAAX,EAAmBa,IAAnB,EAAyBX,WAAzB;AACD;AACF,GAXD;AAaA,SAAOF,MAAP;AACD","sourcesContent":["import domEventReg from '../on/_domeventregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport seempleError from '../_helpers/seempleerror';\nimport forEach from '../_helpers/foreach';\nimport splitBySpaceReg from '../on/_splitbyspaceregexp';\nimport defs from '../_core/defs';\nimport triggerOne from './_triggerone';\nimport triggerDomEvent from './_triggerdomevent';\n\n// triggers an event\nexport default function trigger(...args) {\n  let object;\n  let givenNames;\n  let triggerArgs;\n\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    [givenNames, ...triggerArgs] = args;\n    object = this;\n  } else {\n    [object, givenNames, ...triggerArgs] = args;\n    // throw error when object type is wrong\n    checkObjectType(object, 'trigger');\n  }\n  let names;\n\n  // allow to use strings only as event name\n  if (typeof givenNames === 'string') {\n    names = givenNames.split(splitBySpaceReg);\n  } else {\n    throw seempleError('trigger:names_type', { names: givenNames });\n  }\n\n  const def = defs.get(object);\n\n  // if no definition do nothing\n  if (!def) {\n    return object;\n  }\n\n  const { events: allEvents } = def;\n\n  if (!allEvents) {\n    return object;\n  }\n\n  forEach(names, (name) => {\n    const domEvtExecResult = domEventReg.exec(name);\n\n    if (domEvtExecResult) {\n      // if EVT::KEY(SELECTOR) ia passed as event name then trigger DOM event\n      const [, eventName, key = 'sandbox', selector] = domEvtExecResult;\n      triggerDomEvent(object, key, eventName, selector, triggerArgs);\n    } else {\n      // trigger ordinary event\n      triggerOne(object, name, triggerArgs);\n    }\n  });\n\n  return object;\n}\n"],"file":"index.js"}