"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('seemple'),
    calc = _require.calc,
    on = _require.on,
    onDebounce = _require.onDebounce,
    trigger = _require.trigger,
    set = _require.set;

function handleHashChange(router) {
  set(router, 'hashPath', window.location.hash, {
    hashEvent: true
  });
}

function handlePopStateChange(router) {
  set(router, 'path', window.location.pathname, {
    popEvent: true
  });
}

var Router =
/*#__PURE__*/
function () {
  function Router(type) {
    _classCallCheck(this, Router);

    _defineProperty(this, "parts", []);

    _defineProperty(this, "path", '/');

    _defineProperty(this, "hashPath", '#!/');

    // singletone pattern for history and hash router
    if (type in Router) {
      return Router[type];
    }

    this.type = type;
    return this;
  }

  _createClass(Router, [{
    key: "init",
    value: function init() {
      var _this = this;

      if (this.initialized) {
        return this;
      }

      var type = this.type;
      calc(this, {
        parts: {
          source: 'path',
          handler: function handler(path) {
            var fixed = path.replace(/\/\//g, '/').replace(/^\/|\/$/g, '');
            return fixed ? fixed.split('/') : [];
          }
        },
        path: {
          source: 'parts',
          handler: function handler(parts) {
            var nonEmptyParts = [];

            for (var i = 0; i < parts.length; i++) {
              if (parts[i]) {
                nonEmptyParts.push(parts[i]);
              } else {
                break;
              }
            }

            return nonEmptyParts.length ? "/".concat(nonEmptyParts.join('/'), "/") : '/';
          }
        }
      }, {
        debounceCalc: false
      });
      calc(this, {
        hashPath: {
          source: 'path',
          handler: function handler(path) {
            return path && path !== '/' ? "#!".concat(path) : '';
          }
        },
        path: {
          source: 'hashPath',
          handler: function handler(hashPath) {
            return hashPath ? hashPath.replace(/^#!/, '') : '';
          }
        }
      }, {
        debounceCalc: false
      });
      on(this, 'change:parts', function (evt) {
        var value = evt.value,
            previousValue = evt.previousValue;
        var equals = value.length === previousValue.length;

        if (equals) {
          for (var i = 0; i < value.length; i++) {
            if (value[i] !== previousValue[i]) {
              equals = false;
              break;
            }
          }
        }

        if (!equals) {
          trigger(_this, 'pathchange');
        }
      });

      if (typeof window !== 'undefined') {
        var _window = window,
            history = _window.history,
            location = _window.location;

        if (type === 'hash') {
          handleHashChange(this);
          window.addEventListener('hashchange', function () {
            return handleHashChange(_this);
          });
          onDebounce(this, 'change:hashPath', function (evt) {
            if (!evt || !evt.hashEvent) {
              location.hash = _this.hashPath;
            }
          }, true);
        } else if (type === 'history') {
          handlePopStateChange(this);
          window.addEventListener('popstate', function (evt) {
            if (evt.state && evt.state.validPush) {
              handlePopStateChange(_this);
            }
          });
          onDebounce(this, 'change:path', function (evt) {
            if (!evt || !evt.popEvent) {
              history.pushState({
                validPush: true
              }, '', _this.path + location.hash);
            }
          }, true);
        }
      }

      this.initialized = true;
      return this;
    }
  }, {
    key: "subscribe",
    value: function subscribe(obj, route) {
      var _this2 = this;

      var keys = route.replace(/\/\//g, '/').replace(/^\/|\/$/g, '').split('/');
      var changeEvents = [];
      var filteredKeys = keys.filter(function (key) {
        return key !== '*';
      });
      var parts = [];
      this.init();

      for (var i = 0; i < filteredKeys.length; i++) {
        var key = filteredKeys[i];
        changeEvents.push("change:".concat(key));
      }

      on(obj, changeEvents, function (evt) {
        if (evt && evt.routeSilent) {
          return;
        }

        var values = [];

        for (var _i = 0; _i < keys.length; _i++) {
          var value = keys[_i] === '*' ? _this2.parts[_i] : obj[keys[_i]];

          if (value) {
            values.push(value);
          } else {
            break;
          }
        }

        _this2.parts = values;
      });

      for (var _i2 = 0; _i2 < keys.length; _i2++) {
        parts.push(obj[keys[_i2]] === '*' ? this.parts[_i2] : obj[keys[_i2]] || this.parts[_i2]);
      }

      for (var _i3 = 0; _i3 < keys.length; _i3++) {
        if (typeof obj[keys[_i3]] === 'undefined' && this.parts[_i3] && keys[_i3] !== '*') {
          set(obj, keys[_i3], this.parts[_i3], {
            routeSilent: true
          });
        }
      }

      on(this, 'pathchange', function () {
        for (var _i4 = 0; _i4 < keys.length; _i4++) {
          if (keys[_i4] !== '*') {
            set(obj, keys[_i4], _this2.parts[_i4] || null, {
              routeSilent: true
            });
          }
        }
      });
      this.parts = parts;
      return this;
    }
  }]);

  return Router;
}();

Router.history = new Router('history');
Router.hash = new Router('hash');
module.exports = Router;