"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processRendering;

var _defs = _interopRequireDefault(require("../../_core/defs"));

var _seempleerror = _interopRequireDefault(require("../../_helpers/seempleerror"));

var _processpush = _interopRequireDefault(require("./processpush"));

var _processunshift = _interopRequireDefault(require("./processunshift"));

var _processrecreate = _interopRequireDefault(require("./processrecreate"));

var _processsort = _interopRequireDefault(require("./processsort"));

var _processremove = _interopRequireDefault(require("./processremove"));

var _processrerender = _interopRequireDefault(require("./processrerender"));

var _processspliceadd = _interopRequireDefault(require("./processspliceadd"));

// makes possible to render array items based on a name of called method
function processRendering(_ref) {
  var self = _ref.self,
      eventOptions = _ref.eventOptions;
  var method = eventOptions.method,
      added = eventOptions.added,
      removed = eventOptions.removed; // nodes object always exist at Seemple instances

  var container = self.nodes.container || self.nodes.sandbox;

  var selfDef = _defs["default"].get(self);

  if (!container) {
    return;
  }

  switch (method) {
    case 'fill':
    case 'copyWithin':
      throw (0, _seempleerror["default"])('array:method_compat_renderer', {
        method: method
      });

    case 'push':
      (0, _processpush["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'unshift':
      (0, _processunshift["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'pull':
    case 'pop':
    case 'shift':
      (0, _processremove["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'sort':
    case 'reverse':
      (0, _processsort["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'rerender':
      (0, _processrerender["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'recreate':
      (0, _processrecreate["default"])({
        self: self,
        selfDef: selfDef,
        eventOptions: eventOptions,
        container: container
      });
      break;

    case 'splice':
      if (added.length) {
        (0, _processspliceadd["default"])({
          self: self,
          selfDef: selfDef,
          eventOptions: eventOptions,
          container: container
        });
      }

      if (removed.length) {
        (0, _processremove["default"])({
          self: self,
          selfDef: selfDef,
          eventOptions: eventOptions,
          container: container
        });
      }

      break;

    default:
  }
}
//# sourceMappingURL=index.js.map