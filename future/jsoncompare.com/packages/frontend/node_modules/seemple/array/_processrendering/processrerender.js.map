{"version":3,"sources":["../../../src/array/_processrendering/processrerender.js"],"names":["processRerender","self","selfDef","eventOptions","container","forceRerender","silent","i","length","item","alreadyRenderedNode","appendChild","contains","removeChild","node","itemEventOptions"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACe,SAASA,eAAT,OAKZ;AAAA,MAJDC,IAIC,QAJDA,IAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,SACC,QADDA,SACC;AAAA,MACOC,aADP,GACiCF,YADjC,CACOE,aADP;AAAA,MACsBC,MADtB,GACiCH,YADjC,CACsBG,MADtB,EAGD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAME,IAAI,GAAGR,IAAI,CAACM,CAAD,CAAjB;;AACA,QAAIE,IAAI,IAAI,yBAAOA,IAAP,MAAgB,QAA5B,EAAsC;AACpC,UAAMC,mBAAmB,GAAG,oCAAmB;AAC7CD,QAAAA,IAAI,EAAJA,IAD6C;AAE7CP,QAAAA,OAAO,EAAPA;AAF6C,OAAnB,CAA5B,CADoC,CAMpC;AACA;;AACA,UAAI,CAACG,aAAD,IAAkBK,mBAAtB,EAA2C;AACzCN,QAAAA,SAAS,CAACO,WAAV,CAAsBD,mBAAtB;AACA;AACD,OAXmC,CAapC;AACA;;;AACA,UAAIA,mBAAJ,EAAyB;AACvB,YAAIN,SAAS,CAACQ,QAAV,CAAmBF,mBAAnB,CAAJ,EAA6C;AAC3CN,UAAAA,SAAS,CAACS,WAAV,CAAsBH,mBAAtB;AACD;AACF,OAnBmC,CAqBpC;;;AArBoC,4BAsBD,gCAAe;AAChDR,QAAAA,OAAO,EAAPA,OADgD;AAEhDD,QAAAA,IAAI,EAAJA,IAFgD;AAGhDQ,QAAAA,IAAI,EAAJA,IAHgD;AAIhDN,QAAAA,YAAY,EAAZA;AAJgD,OAAf,CAtBC;AAAA,UAsB5BW,IAtB4B,mBAsB5BA,IAtB4B;AAAA,UAsBtBC,gBAtBsB,mBAsBtBA,gBAtBsB;;AA6BpC,UAAID,IAAJ,EAAU;AACRV,QAAAA,SAAS,CAACO,WAAV,CAAsBG,IAAtB;;AAEA,YAAI,CAACR,MAAL,EAAa;AACX,sCAAWG,IAAX,EAAiB,aAAjB,EAAgCM,gBAAhC;AACD;AACF;AACF;AACF;AACF","sourcesContent":["import getAlreadyRendered from './getalreadyrendered';\nimport renderItemNode from './renderitemnode';\nimport triggerOne from '../../trigger/_triggerone';\n\n// this function re-inserts rendered DOM nodes of items\n// if they are rendered and forceRerender is falsy\n// and renders array items from scratch if they aren't rendered yet or forceRerender is truthy\nexport default function processRerender({\n  self,\n  selfDef,\n  eventOptions,\n  container\n}) {\n  const { forceRerender, silent } = eventOptions;\n\n  // iterate over all items\n  for (let i = 0; i < self.length; i++) {\n    const item = self[i];\n    if (item && typeof item === 'object') {\n      const alreadyRenderedNode = getAlreadyRendered({\n        item,\n        selfDef\n      });\n\n      // if item is already rendered and forceRerender is falsy then re-insert DOM node\n      // go to the next cycle iteration then\n      if (!forceRerender && alreadyRenderedNode) {\n        container.appendChild(alreadyRenderedNode);\n        continue;\n      }\n\n      // node removal is called when an item is rendered\n      // and forceRerender is truty\n      if (alreadyRenderedNode) {\n        if (container.contains(alreadyRenderedNode)) {\n          container.removeChild(alreadyRenderedNode);\n        }\n      }\n\n      // render new node\n      const { node, itemEventOptions } = renderItemNode({\n        selfDef,\n        self,\n        item,\n        eventOptions\n      });\n\n      if (node) {\n        container.appendChild(node);\n\n        if (!silent) {\n          triggerOne(item, 'afterrender', itemEventOptions);\n        }\n      }\n    }\n  }\n}\n"],"file":"processrerender.js"}