{"version":3,"sources":["../../../src/array/_processrendering/processspliceadd.js"],"names":["processSpliceAdd","self","selfDef","eventOptions","container","added","silent","nextIndex","lastIndexOf","length","next","nextNode","item","node","itemEventOptions","insertBefore","appendChild"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,gBAAT,OAKZ;AAAA,MAJDC,IAIC,QAJDA,IAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,SACC,QADDA,SACC;AAAA,MACOC,KADP,GACyBF,YADzB,CACOE,KADP;AAAA,MACcC,MADd,GACyBH,YADzB,CACcG,MADd;AAED,MAAMC,SAAS,GAAGN,IAAI,CAACO,WAAL,CAAiBH,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAtB,IAA4C,CAA9D;AACA,MAAMC,IAAI,GAAGT,IAAI,CAACM,SAAD,CAAjB;AACA,MAAII,QAAJ,CAJC,CAMD;AACA;;AACA,MAAID,IAAI,IAAI,yBAAOA,IAAP,MAAgB,QAA5B,EAAsC;AACpCC,IAAAA,QAAQ,GAAG,oCAAmB;AAC5BC,MAAAA,IAAI,EAAEF,IADsB;AAE5BR,MAAAA,OAAO,EAAPA;AAF4B,KAAnB,CAAX;AAID;;AAED,2BAAQG,KAAR,EAAe,UAACO,IAAD,EAAU;AACvB,QAAIA,IAAI,IAAI,yBAAOA,IAAP,MAAgB,QAA5B,EAAsC;AACpC;AACA,4CAAqB;AACnBA,QAAAA,IAAI,EAAJA,IADmB;AAEnBV,QAAAA,OAAO,EAAPA;AAFmB,OAArB;;AAFoC,4BAOD,gCAAe;AAChDA,QAAAA,OAAO,EAAPA,OADgD;AAEhDD,QAAAA,IAAI,EAAJA,IAFgD;AAGhDW,QAAAA,IAAI,EAAJA,IAHgD;AAIhDT,QAAAA,YAAY,EAAZA;AAJgD,OAAf,CAPC;AAAA,UAO5BU,IAP4B,mBAO5BA,IAP4B;AAAA,UAOtBC,gBAPsB,mBAOtBA,gBAPsB;;AAcpC,UAAID,IAAJ,EAAU;AACR,YAAIF,QAAJ,EAAc;AACZP,UAAAA,SAAS,CAACW,YAAV,CAAuBF,IAAvB,EAA6BF,QAA7B;AACD,SAFD,MAEO;AACLP,UAAAA,SAAS,CAACY,WAAV,CAAsBH,IAAtB;AACD;;AAED,YAAI,CAACP,MAAL,EAAa;AACX,sCAAWM,IAAX,EAAiB,aAAjB,EAAgCE,gBAAhC;AACD;AACF;AACF;AACF,GA3BD;AA4BD","sourcesContent":["import renderItemNode from './renderitemnode';\nimport triggerOne from '../../trigger/_triggerone';\nimport forEach from '../../_helpers/foreach';\nimport checkAlreadyRendered from './checkalreadyrendered';\nimport getAlreadyRendered from './getalreadyrendered';\n\n// the function handles rendering of added items passed as third and rest arguments to splice method\nexport default function processSpliceAdd({\n  self,\n  selfDef,\n  eventOptions,\n  container\n}) {\n  const { added, silent } = eventOptions;\n  const nextIndex = self.lastIndexOf(added[added.length - 1]) + 1;\n  const next = self[nextIndex];\n  let nextNode;\n\n  // get a node of an item which is placed next to the last added item\n  // it is needed to insert newly rendered items before\n  if (next && typeof next === 'object') {\n    nextNode = getAlreadyRendered({\n      item: next,\n      selfDef\n    });\n  }\n\n  forEach(added, (item) => {\n    if (item && typeof item === 'object') {\n      // throw an error if node of an item is alread rendered\n      checkAlreadyRendered({\n        item,\n        selfDef\n      });\n\n      const { node, itemEventOptions } = renderItemNode({\n        selfDef,\n        self,\n        item,\n        eventOptions\n      });\n\n      if (node) {\n        if (nextNode) {\n          container.insertBefore(node, nextNode);\n        } else {\n          container.appendChild(node);\n        }\n\n        if (!silent) {\n          triggerOne(item, 'afterrender', itemEventOptions);\n        }\n      }\n    }\n  });\n}\n"],"file":"processspliceadd.js"}