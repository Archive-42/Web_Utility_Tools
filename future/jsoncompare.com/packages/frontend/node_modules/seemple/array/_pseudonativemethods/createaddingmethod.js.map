{"version":3,"sources":["../../../src/array/_pseudonativemethods/createaddingmethod.js"],"names":["createAddingMethod","name","hasOptions","pseudoNativeMethod","itemMediator","argsLength","arguments","length","args","Array","givenEventOptions","useMediator","skipItemMediator","isPush","i","arg","index","eventOptions","method","self","added","removed"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACe,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,UAAlC,EAA8C;AAC3D,SAAO,SAASC,kBAAT,GAA8B;AAAA,uBACV,sBAAY,IAAZ,CADU;AAAA,QAC3BC,YAD2B,gBAC3BA,YAD2B,EAEnC;;;AACA,QAAMC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAACL,UAAvC;AACA,QAAMM,IAAI,GAAGC,KAAK,CAACJ,UAAD,CAAlB;AACA,QAAMK,iBAAiB,GAAGR,UAAU,GAAGI,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAZ,GAAqC,IAAzE;AACA,QAAMI,WAAW,GAAG,OAAOP,YAAP,KAAwB,UAAxB,KACR,CAACM,iBAAD,IAAsB,CAACA,iBAAiB,CAACE,gBADjC,CAApB;AAEA,QAAMC,MAAM,GAAGZ,IAAI,KAAK,MAAxB;AARmC,QAS7BM,MAT6B,GASlB,IATkB,CAS7BA,MAT6B,EAWnC;;AACA,QAAI,CAACF,UAAL,EAAiB;AACf,aAAOE,MAAP;AACD,KAdkC,CAgBnC;;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,EAAjC,EAAqC;AACnC,UAAMC,GAAG,GAAGT,SAAS,CAACQ,CAAD,CAArB;;AACA,UAAIH,WAAJ,EAAiB;AACf,YAAMK,KAAK,GAAGH,MAAM,GAAGC,CAAC,GAAGP,MAAP,GAAgBO,CAApC;AACAN,QAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUV,YAAY,CAACW,GAAD,EAAMC,KAAN,CAAtB;AACD,OAHD,MAGO;AACLR,QAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUC,GAAV;AACD;AACF;;AAED,QAAIF,MAAJ,EAAY;AACV;AACA,WAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGT,UAApB,EAAgCS,EAAC,EAAjC,EAAqC;AACnC,aAAKP,MAAM,GAAGO,EAAd,IAAmBN,IAAI,CAACM,EAAD,CAAvB;AACD;AACF,KALD,MAKO;AACL;AACA,WAAK,IAAIA,GAAC,GAAGP,MAAM,GAAG,CAAtB,EAAyBO,GAAC,IAAI,CAA9B,EAAiCA,GAAC,EAAlC,EAAsC;AACpC,aAAKT,UAAU,GAAGS,GAAlB,IAAuB,KAAKA,GAAL,CAAvB;AACD,OAJI,CAKL;;;AACA,WAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGT,UAApB,EAAgCS,GAAC,EAAjC,EAAqC;AACnC,aAAKA,GAAL,IAAUN,IAAI,CAACM,GAAD,CAAd;AACD;AACF,KAzCkC,CA2CnC;;;AACAP,IAAAA,MAAM,IAAIF,UAAV;AACA,SAAKE,MAAL,GAAcA,MAAd;AAEA,QAAMU,YAAY,GAAG;AACnBC,MAAAA,MAAM,EAAEjB,IADW;AAEnBkB,MAAAA,IAAI,EAAE,IAFa;AAGnBC,MAAAA,KAAK,EAAEZ,IAHY;AAInBa,MAAAA,OAAO,EAAE;AAJU,KAArB,CA/CmC,CAsDnC;;AACA,QAAInB,UAAJ,EAAgB;AACd,UAAIQ,iBAAiB,IAAI,yBAAOA,iBAAP,MAA6B,QAAtD,EAAgE;AAC9D,gCAAOO,YAAP,EAAqBP,iBAArB;AACD;AACF;;AAED,oCAAe,IAAf,EAAqBO,YAArB;AAEA,WAAOV,MAAP;AACD,GAhED;AAiED","sourcesContent":["import initSeemple from '../../_core/init';\nimport reportModified from '../_reportmodified';\nimport assign from '../../_helpers/assign';\n\n// creates methods: push, unshift, push_, unshift_\nexport default function createAddingMethod(name, hasOptions) {\n  return function pseudoNativeMethod() {\n    const { itemMediator } = initSeemple(this);\n    // +hasOptions is converted to 0 or 1 depending on its value (false/true)\n    const argsLength = arguments.length - +hasOptions;\n    const args = Array(argsLength);\n    const givenEventOptions = hasOptions ? arguments[arguments.length - 1] : null;\n    const useMediator = typeof itemMediator === 'function'\n            && (!givenEventOptions || !givenEventOptions.skipItemMediator);\n    const isPush = name === 'push';\n    let { length } = this;\n\n    // if no arguments are passed\n    if (!argsLength) {\n      return length;\n    }\n\n    // convert arguments to array and call item mediator on every item if it's possible\n    for (let i = 0; i < argsLength; i++) {\n      const arg = arguments[i];\n      if (useMediator) {\n        const index = isPush ? i + length : i;\n        args[i] = itemMediator(arg, index);\n      } else {\n        args[i] = arg;\n      }\n    }\n\n    if (isPush) {\n      // insert new items to the end of array\n      for (let i = 0; i < argsLength; i++) {\n        this[length + i] = args[i];\n      }\n    } else {\n      // move current items to new indexes\n      for (let i = length - 1; i >= 0; i--) {\n        this[argsLength + i] = this[i];\n      }\n      // insert new items to the begin of array\n      for (let i = 0; i < argsLength; i++) {\n        this[i] = args[i];\n      }\n    }\n\n    // update length\n    length += argsLength;\n    this.length = length;\n\n    const eventOptions = {\n      method: name,\n      self: this,\n      added: args,\n      removed: []\n    };\n\n    // extend event options by custom event options if they are given\n    if (hasOptions) {\n      if (givenEventOptions && typeof givenEventOptions === 'object') {\n        assign(eventOptions, givenEventOptions);\n      }\n    }\n\n    reportModified(this, eventOptions);\n\n    return length;\n  };\n}\n"],"file":"createaddingmethod.js"}