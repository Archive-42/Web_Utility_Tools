"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = recreate;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _init = _interopRequireDefault(require("../../_core/init"));

var _reportmodified = _interopRequireDefault(require("../_reportmodified"));

var _updatetracked = _interopRequireDefault(require("./_updatetracked"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// recreates an array
function recreate() {
  var givenNewItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var eventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var def = (0, _init["default"])(this);
  var itemMediator = def.itemMediator;
  var newLength = givenNewItems.length;
  var oldLength = this.length;
  var lengthDiff = oldLength - newLength;
  var was = this.toJSON(false);
  var trackBy = this.trackBy;
  var skipItemMediator = eventOptions.skipItemMediator,
      silent = eventOptions.silent,
      dontRender = eventOptions.dontRender;
  var added;
  var removed;
  var newItems;

  if (trackBy) {
    // if trackBy property is given then update givenNewItems array
    newItems = (0, _updatetracked["default"])({
      arr: this,
      givenNewItems: givenNewItems,
      trackBy: trackBy
    });
  } else {
    // if trackBy is not given then use given new items as is
    newItems = givenNewItems;
  } // call item mediator for every new item (but don't modify passed newItems)


  if (itemMediator && !skipItemMediator) {
    var toMediate = newItems;
    newItems = Array(newLength);

    for (var i = 0; i < newLength; i++) {
      newItems[i] = itemMediator(toMediate[i], i);
    }
  } // update array indexes with new values


  for (var _i = 0; _i < newLength; _i++) {
    this[_i] = newItems[_i];
  } // remove old items that is out of new length


  for (var _i2 = 0; _i2 < lengthDiff; _i2++) {
    delete this[_i2 + newLength];
  } // update length


  this.length = newLength;

  if (silent && dontRender) {
    return this;
  } // create an array of removed items
  // TODO: Optimize creation of "added" and "removed" options in recreate method
  // ... (do not use indexOf)


  if (newLength) {
    if (oldLength) {
      removed = [];

      for (var _i3 = 0; _i3 < oldLength; _i3++) {
        if (!~newItems.indexOf(was[_i3])) {
          removed.push(was[_i3]);
        }
      }
    } else {
      removed = [];
    }
  } else {
    removed = was;
  } // create an array of added items


  if (oldLength) {
    if (newLength) {
      added = [];

      for (var _i4 = 0; _i4 < newLength; _i4++) {
        if (!~was.indexOf(newItems[_i4])) {
          added.push(newItems[_i4]);
        }
      }
    } else {
      added = [];
    }
  } else {
    added = newItems;
  }

  (0, _reportmodified["default"])(this, _objectSpread({
    added: added,
    removed: removed,
    method: 'recreate',
    self: this
  }, eventOptions));
  return this;
}
//# sourceMappingURL=index.js.map