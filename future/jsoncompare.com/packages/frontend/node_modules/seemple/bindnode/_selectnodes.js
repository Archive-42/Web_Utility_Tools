"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = selectNodes;

var _defs = _interopRequireDefault(require("../_core/defs"));

var _toarray = _interopRequireDefault(require("../_helpers/toarray"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

var _dom = _interopRequireDefault(require("../_dom"));

var customSelectorReg = /\s*:bound\(([^(]*)\)\s*([\S\s]*)\s*|\s*:sandbox\s*([\S\s]*)\s*/;
var randomAttr = "".concat(Math.random().toString().replace('0.', 'x'), "y"); // x12345y
// the function selects nodes based on a selector (including custom values, eg :sandbox)
// TODO: selectNodes looks not good, it needs to be refactored and accelerated if possible

function selectNodes(object, givenSelector) {
  var _defs$get = _defs["default"].get(object),
      props = _defs$get.props;

  var selectors = givenSelector.split(',');

  var result = _dom["default"].$();

  (0, _foreach["default"])(selectors, function (selector) {
    var execResult = customSelectorReg.exec(selector);

    if (execResult) {
      var boundKey = execResult[3] !== undefined ? 'sandbox' : execResult[1];
      var subSelector = execResult[3] !== undefined ? execResult[3] : execResult[2];
      var propDef = props[boundKey];

      if (propDef) {
        var bindings = propDef.bindings;

        if (bindings) {
          var boundNodes = Array(bindings.length);
          (0, _foreach["default"])(bindings, function (binding, i) {
            boundNodes[i] = binding.node;
          }); // if native selector passed after :bound(KEY) is not empty string
          // for example ":bound(KEY) .my-selector"

          if (subSelector) {
            // if native selector contains children selector
            // for example ":bound(KEY) > .my-selector"
            if (subSelector.indexOf('>') === 0) {
              // selecting children
              (0, _foreach["default"])(boundNodes, function (node) {
                node.setAttribute(randomAttr, randomAttr);
                var selected = node.querySelectorAll("[".concat(randomAttr, "=\"").concat(randomAttr, "\"] ").concat(subSelector));
                result = result.add((0, _toarray["default"])(selected));
                node.removeAttribute(randomAttr);
              });
            } else {
              // if native selector doesn't contain children selector
              (0, _foreach["default"])(boundNodes, function (node) {
                var selected = node.querySelectorAll(subSelector);
                result = result.add((0, _toarray["default"])(selected));
              });
            }
          } else {
            // if native selector is empty string just add bound nodes to result
            result = result.add(boundNodes);
          }
        }
      }
    } else {
      // if it's native selector (no custom things)
      result = result.add(selector);
    }
  });
  return result;
}
//# sourceMappingURL=_selectnodes.js.map