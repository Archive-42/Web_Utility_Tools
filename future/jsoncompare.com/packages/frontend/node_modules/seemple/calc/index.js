"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = calc;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _init = _interopRequireDefault(require("../_core/init"));

var _checkobjecttype = _interopRequireDefault(require("../_helpers/checkobjecttype"));

var _seempleerror = _interopRequireDefault(require("../_helpers/seempleerror"));

var _assign = _interopRequireDefault(require("../_helpers/assign"));

var _debounce = _interopRequireDefault(require("../_helpers/debounce"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

var _forown = _interopRequireDefault(require("../_helpers/forown"));

var _addsource = _interopRequireDefault(require("./_addsource"));

var _createcalchandler = _interopRequireDefault(require("./_createcalchandler"));

var _defineprop = _interopRequireDefault(require("../_core/defineprop"));

// defines a property which is dependend on other properties
function calc(object, target, sources, givenHandler, eventOptions) {
  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args

    /* eslint-disable no-param-reassign */
    eventOptions = givenHandler;
    givenHandler = sources;
    sources = target;
    target = object;
    object = this;
    /* eslint-enable no-param-reassign */
  } else {
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'calc');
  }

  if (target instanceof Object) {
    /*
         * accept an object
         * this.calc({target: { source, handler, event } }, commonEventOptions);
         */
    (0, _forown["default"])(target, function (_ref, itemTarget) {
      var itemSource = _ref.source,
          itemHandler = _ref.handler,
          itemEventOptions = _ref.event;
      var commonEventOptions = sources;
      var mergedEventOptions = {};

      if (commonEventOptions) {
        // extend event object by "global" event
        (0, _assign["default"])(mergedEventOptions, commonEventOptions);
      }

      if (itemEventOptions) {
        // extend event object by "local" event ("event" key of an object)
        (0, _assign["default"])(mergedEventOptions, itemEventOptions);
      }

      calc(object, itemTarget, itemSource, itemHandler, mergedEventOptions);
    });
    return object;
  }

  if (typeof target !== 'string') {
    throw (0, _seempleerror["default"])('calc:target_type', {
      target: target
    });
  }

  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign

  var def = (0, _init["default"])(object);
  var _eventOptions = eventOptions,
      _eventOptions$setOnIn = _eventOptions.setOnInit,
      setOnInit = _eventOptions$setOnIn === void 0 ? true : _eventOptions$setOnIn,
      _eventOptions$debounc = _eventOptions.debounceCalcOnInit,
      debounceCalcOnInit = _eventOptions$debounc === void 0 ? false : _eventOptions$debounc,
      _eventOptions$debounc2 = _eventOptions.debounceCalc,
      debounceCalc = _eventOptions$debounc2 === void 0 ? true : _eventOptions$debounc2,
      _eventOptions$debounc3 = _eventOptions.debounceCalcDelay,
      debounceCalcDelay = _eventOptions$debounc3 === void 0 ? 0 : _eventOptions$debounc3,
      _eventOptions$isTarge = _eventOptions.isTargetPropertyHidden,
      isTargetPropertyHidden = _eventOptions$isTarge === void 0 ? false : _eventOptions$isTarge;

  var defaultHandler = function defaultHandler(value) {
    return value;
  };

  var handler = givenHandler || defaultHandler;
  var allSources = [];
  var syncCalcHandler = (0, _createcalchandler["default"])({
    object: object,
    eventOptions: eventOptions,
    allSources: allSources,
    target: target,
    def: def,
    handler: handler
  });
  var debouncedCalcHandler;
  var calcHandler;

  if (debounceCalcOnInit || debounceCalc) {
    debouncedCalcHandler = (0, _debounce["default"])(syncCalcHandler, debounceCalcDelay);
  }

  (0, _defineprop["default"])(object, target, isTargetPropertyHidden);

  if (!(sources instanceof Array)) {
    sources = [sources]; // eslint-disable-line no-param-reassign
  }

  if (debounceCalc) {
    calcHandler = debouncedCalcHandler;
  } else {
    calcHandler = syncCalcHandler;
  }

  (0, _foreach["default"])(sources, function (source) {
    if (typeof source === 'string') {
      // source object is current object
      (0, _addsource["default"])({
        calcHandler: calcHandler,
        allSources: allSources,
        sourceKey: source,
        sourceObject: object,
        eventOptions: eventOptions
      });
    } else {
      // source object is external object
      if (!source || (0, _typeof2["default"])(source) !== 'object') {
        throw (0, _seempleerror["default"])('calc:source_type', {
          source: source
        });
      }

      var sourceKey = source.key;
      var sourceObject = source.object;

      if (sourceKey instanceof Array) {
        // many keys are passed
        (0, _foreach["default"])(sourceKey, function (sourceKeyItem) {
          (0, _addsource["default"])({
            calcHandler: calcHandler,
            allSources: allSources,
            sourceKey: sourceKeyItem,
            sourceObject: sourceObject,
            eventOptions: eventOptions
          });
        });
      } else {
        // one key is passed
        (0, _addsource["default"])({
          calcHandler: calcHandler,
          allSources: allSources,
          sourceKey: sourceKey,
          sourceObject: sourceObject,
          eventOptions: eventOptions
        });
      }
    }
  });

  if (setOnInit) {
    if (debounceCalcOnInit) {
      debouncedCalcHandler();
    } else {
      syncCalcHandler();
    }
  }

  return object;
}
//# sourceMappingURL=index.js.map