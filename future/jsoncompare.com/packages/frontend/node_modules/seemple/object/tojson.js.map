{"version":3,"sources":["../../src/object/tojson.js"],"names":["toJSON","recursive","keys","result","_","key","value"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;AACe,SAASA,MAAT,GAAkC;AAAA;;AAAA,MAAlBC,SAAkB,uEAAN,IAAM;;AAAA,qBAC9B,sBAAY,IAAZ,CAD8B;AAAA,MACvCC,IADuC,gBACvCA,IADuC;;AAE/C,MAAMC,MAAM,GAAG,EAAf;AAEA,0BAAOD,IAAP,EAAa,UAACE,CAAD,EAAIC,GAAJ,EAAY;AACvB,QAAMC,KAAK,GAAG,KAAI,CAACD,GAAD,CAAlB,CADuB,CAEvB;;AACA,QAAIJ,SAAS,IAAIK,KAAb,IAAsB,OAAOA,KAAK,CAACN,MAAb,KAAwB,UAAlD,EAA8D;AAC5DG,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcC,KAAK,CAACN,MAAN,CAAa,IAAb,CAAd;AACD,KAFD,MAEO;AACLG,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcC,KAAd;AACD;AACF,GARD;AAUA,SAAOH,MAAP;AACD","sourcesContent":["import initSeemple from '../_core/init';\nimport forOwn from '../_helpers/forown';\n\n// converts Seemple.Object instance to ordinary object\nexport default function toJSON(recursive = true) {\n  const { keys } = initSeemple(this);\n  const result = {};\n\n  forOwn(keys, (_, key) => {\n    const value = this[key];\n    // when recursive is true and when value has toJSON method then call it recusively\n    if (recursive && value && typeof value.toJSON === 'function') {\n      result[key] = value.toJSON(true);\n    } else {\n      result[key] = value;\n    }\n  });\n\n  return result;\n}\n"],"file":"tojson.js"}