{"version":3,"sources":["../../src/off/_removelistener.js"],"names":["removeListener","object","name","callback","context","info","def","defs","get","allEvents","events","retain","noTrigger","domEventExecResult","domEventReg","exec","eventName","key","selector","removeDomListener","require","allEventsItem","allEventsName","event","removeEventData","argCallback","_callback","eventCallback","push","length"],"mappings":"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","sourcesContent":["import defs from '../_core/defs';\nimport triggerOne from '../trigger/_triggerone';\nimport domEventReg from '../on/_domeventregexp';\nimport forEach from '../_helpers/foreach';\nimport forOwn from '../_helpers/forown';\n\n// removes simple event listener from an object\nexport default function removeListener(object, name, callback, context, info) {\n  const def = defs.get(object);\n\n  // if no definition do nothing\n  if (!def) {\n    return false;\n  }\n\n  const { events: allEvents } = def;\n  const events = allEvents[name];\n  const retain = [];\n  const noTrigger = name ? name[0] === '_' : false;\n  const domEventExecResult = domEventReg.exec(name);\n\n  if (domEventExecResult) {\n    const [, eventName, key = 'sandbox', selector] = domEventExecResult;\n    // fixing circular reference issue\n    const removeDomListener = require('./_removedomlistener').default;\n\n    removeDomListener(object, key, eventName, selector, callback, context, info);\n\n    return true;\n  }\n\n  // if all events need to be removed\n  if (typeof name === 'undefined') {\n    if (!noTrigger) {\n      forOwn(allEvents, (allEventsItem, allEventsName) => {\n        forEach(allEventsItem, (event) => {\n          const removeEventData = {\n            allEventsName,\n            callback: event.callback,\n            context: event.context\n          };\n\n          triggerOne(object, `removeevent:${name}`, removeEventData);\n          triggerOne(object, 'removeevent', removeEventData);\n        });\n      });\n    }\n\n    // restore default value of \"events\"\n    def.events = {};\n  } else if (events) {\n    // if events with given name are found\n    forEach(events, (event) => {\n      const argCallback = (callback && callback._callback) || callback;\n      const eventCallback = event.callback._callback || event.callback;\n\n      if ((argCallback && argCallback !== eventCallback)\n                || (context && context !== event.context)) {\n        // keep event\n        retain.push(event);\n      } else {\n        const removeEventData = {\n          name,\n          callback: event.callback,\n          context: event.context\n        };\n\n        if (!noTrigger) {\n          triggerOne(object, `removeevent:${name}`, removeEventData);\n          triggerOne(object, 'removeevent', removeEventData);\n        }\n      }\n    });\n\n    if (retain.length) {\n      allEvents[name] = retain;\n    } else {\n      delete def.events[name];\n    }\n  }\n\n  return false;\n}\n"],"file":"_removelistener.js"}