"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = undelegateListener;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defs = _interopRequireDefault(require("../_core/defs"));

var _removelistener = _interopRequireDefault(require("./_removelistener"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

// the function removes internally used events such as _asterisk:add
function detatchDelegatedLogic(_ref) {
  var delegatedEventName = _ref.delegatedEventName,
      pathStr = _ref.pathStr,
      allEvents = _ref.allEvents;
  var retain = [];
  var events = allEvents[delegatedEventName];
  (0, _foreach["default"])(events, function (event) {
    // pathStr is assigned to info in delegateListener
    if (event.info.pathStr !== pathStr) {
      retain.push(event);
    }
  });

  if (retain.length) {
    allEvents[delegatedEventName] = retain;
  } else {
    delete allEvents[delegatedEventName];
  }
} // removes delegated event listener from an object by given path


function undelegateListener(object, givenPath, name, callback, context) {
  var info = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

  var def = _defs["default"].get(object); // if no definition do nothing


  if (!def) {
    return;
  }

  var allEvents = def.events;
  var path = typeof givenPath === 'string' && givenPath !== '' ? givenPath.split('.') : givenPath;

  if (!path || !path.length) {
    // if no path then remove listener
    (0, _removelistener["default"])(object, name, callback, context, info);
  } else {
    // else do all magic
    var key = path[0];
    var pathStr;

    if (path.length > 1) {
      path = path.slice(1);
      pathStr = path.join('.');
    } else {
      path = [];
      pathStr = path[0] || '';
    }

    if (key === '*') {
      // remove asterisk events
      if (object.isSeempleArray) {
        var delegatedAddEvtName = '_asterisk:add';

        if (allEvents[delegatedAddEvtName]) {
          detatchDelegatedLogic({
            delegatedEventName: delegatedAddEvtName,
            pathStr: pathStr,
            allEvents: allEvents
          });
        }

        var delegatedRemoveEvtName = '_asterisk:remove';

        if (allEvents[delegatedRemoveEvtName]) {
          detatchDelegatedLogic({
            delegatedEventName: delegatedRemoveEvtName,
            pathStr: pathStr,
            allEvents: allEvents
          });
        } // undelegate asterisk events for existing items


        if (object.length) {
          (0, _foreach["default"])(object, function (item) {
            if (item && (0, _typeof2["default"])(item) === 'object') {
              undelegateListener(item, path, name, callback, context, info);
            }
          });
        }
      } else if (object.isSeempleObject) {
        var delegatedSetEvtName = '_asterisk:set';

        if (allEvents[delegatedSetEvtName]) {
          detatchDelegatedLogic({
            delegatedEventName: delegatedSetEvtName,
            pathStr: pathStr,
            allEvents: allEvents
          });
        }

        var _delegatedRemoveEvtName = '_asterisk:remove';

        if (allEvents[_delegatedRemoveEvtName]) {
          detatchDelegatedLogic({
            delegatedEventName: _delegatedRemoveEvtName,
            pathStr: pathStr,
            allEvents: allEvents
          });
        }

        object.each(function (item) {
          if (item && (0, _typeof2["default"])(item) === 'object') {
            undelegateListener(item, path, name, callback, context, info);
          }
        });
      }
    } else {
      // remove non-asterisk delegated events
      var delegatedChangeEvtName = "_change:delegated:".concat(key);

      if (allEvents[delegatedChangeEvtName]) {
        detatchDelegatedLogic({
          delegatedEventName: delegatedChangeEvtName,
          pathStr: pathStr,
          allEvents: allEvents
        });
      }

      if ((0, _typeof2["default"])(object[key]) === 'object') {
        undelegateListener(object[key], path, name, callback, context, info);
      }
    }
  }
}
//# sourceMappingURL=_undelegatelistener.js.map