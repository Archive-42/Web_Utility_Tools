{"version":3,"sources":["../../src/off/index.js"],"names":["off","object","givenNames","callback","context","isSeemple","isNamesVarArray","Array","def","defs","get","namesObjCallback","namesObjName","events","props","propName","bindings","node","eventNamespace","id","dom","$","names","split","splitBySpaceReg","name","delegatedEventParts","length","path","delegatedName"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,GAAT,CAAaC,MAAb,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,OAA3C,EAAoD;AACjE,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,OAAO,GAAGD,QAAV;AACAA,IAAAA,QAAQ,GAAGD,UAAX;AACAA,IAAAA,UAAU,GAAGD,MAAb;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GARD,MAQO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,KAAxB;AACD;;AAED,MAAMK,eAAe,GAAGJ,UAAU,YAAYK,KAA9C;;AACA,MAAMC,GAAG,GAAGC,iBAAKC,GAAL,CAAST,MAAT,CAAZ,CAfiE,CAiBjE;AACA;;;AACA,MAAIC,UAAU,IAAI,yBAAOA,UAAP,MAAsB,QAApC,IAAgD,CAACI,eAArD,EAAsE;AACpE,4BAAOJ,UAAP,EAAmB,UAACS,gBAAD,EAAmBC,YAAnB;AAAA,aAAoCZ,GAAG,CACxDC,MADwD,EAChDW,YADgD,EAClCD,gBADkC,EAChBR,QADgB,CAAvC;AAAA,KAAnB;AAGA,WAAOF,MAAP;AACD;;AAGD,MAAI,CAACC,UAAD,IAAe,CAACC,QAAhB,IAA4B,CAACC,OAAjC,EAA0C;AACxCI,IAAAA,GAAG,CAACK,MAAJ,GAAa,EAAb;AAEA,4BAAOL,GAAG,CAACM,KAAX,EAAkB,gBAAeC,QAAf,EAA4B;AAAA,UAAzBC,QAAyB,QAAzBA,QAAyB;;AAC5C,UAAIA,QAAJ,EAAc;AACZ,iCAAQA,QAAR,EAAkB,iBAAc;AAAA,cAAXC,IAAW,SAAXA,IAAW;AAC9B,cAAMC,cAAc,GAAGV,GAAG,CAACW,EAAJ,GAASJ,QAAhC;;AACAK,0BAAIC,CAAJ,CAAMJ,IAAN,EAAYjB,GAAZ,YAAoBkB,cAApB;AACD,SAHD;AAID;AACF,KAPD;AASA,WAAOjB,MAAP;AACD,GAxCgE,CA0CjE;AACA;;;AACA,MAAMqB,KAAK,GAAGhB,eAAe,GAAGJ,UAAH,GAAgBA,UAAU,CAACqB,KAAX,CAAiBC,8BAAjB,CAA7C;AAEA,2BAAQF,KAAR,EAAe,UAACG,IAAD,EAAU;AACvB,QAAMC,mBAAmB,GAAGD,IAAI,CAACF,KAAL,CAAW,GAAX,CAA5B;;AACA,QAAIG,mBAAmB,CAACC,MAApB,GAA6B,CAAjC,EAAoC;AAAA,iEACJD,mBADI;AAAA,UAC3BE,IAD2B;AAAA,UACrBC,aADqB;;AAElC,0CAAmB5B,MAAnB,EAA2B2B,IAA3B,EAAiCC,aAAjC,EAAgD1B,QAAhD,EAA0DC,OAA1D;AACD,KAHD,MAGO;AACL,sCAAeH,MAAf,EAAuBwB,IAAvB,EAA6BtB,QAA7B,EAAuCC,OAAvC;AACD;AACF,GARD;AAUA,SAAOH,MAAP;AACD","sourcesContent":["import splitBySpaceReg from '../on/_splitbyspaceregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport forOwn from '../_helpers/forown';\nimport forEach from '../_helpers/foreach';\nimport defs from '../_core/defs';\nimport removeListener from './_removelistener';\nimport undelegateListener from './_undelegatelistener';\nimport dom from '../_dom';\n\n// removes event listener\nexport default function off(object, givenNames, callback, context) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    context = callback;\n    callback = givenNames;\n    givenNames = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'off');\n  }\n\n  const isNamesVarArray = givenNames instanceof Array;\n  const def = defs.get(object);\n\n  // allow to pass name-handler object\n  // TODO: Name-handler object passed to off method is non-documented feature\n  if (givenNames && typeof givenNames === 'object' && !isNamesVarArray) {\n    forOwn(givenNames, (namesObjCallback, namesObjName) => off(\n      object, namesObjName, namesObjCallback, callback\n    ));\n    return object;\n  }\n\n\n  if (!givenNames && !callback && !context) {\n    def.events = {};\n\n    forOwn(def.props, ({ bindings }, propName) => {\n      if (bindings) {\n        forEach(bindings, ({ node }) => {\n          const eventNamespace = def.id + propName;\n          dom.$(node).off(`.${eventNamespace}`);\n        });\n      }\n    });\n\n    return object;\n  }\n\n  // TODO: Array of names passed to off method is non-documented feature\n  // split by spaces\n  const names = isNamesVarArray ? givenNames : givenNames.split(splitBySpaceReg);\n\n  forEach(names, (name) => {\n    const delegatedEventParts = name.split('@');\n    if (delegatedEventParts.length > 1) {\n      const [path, delegatedName] = delegatedEventParts;\n      undelegateListener(object, path, delegatedName, callback, context);\n    } else {\n      removeListener(object, name, callback, context);\n    }\n  });\n\n  return object;\n}\n"],"file":"index.js"}