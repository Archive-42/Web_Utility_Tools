"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = addDomListener;

var _init = _interopRequireDefault(require("../_core/init"));

var _defineprop = _interopRequireDefault(require("../_core/defineprop"));

var _addlistener = _interopRequireDefault(require("./_addlistener"));

var _dom = _interopRequireDefault(require("../_dom"));

var _createdomeventhandler = _interopRequireDefault(require("./_createdomeventhandler"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

// returns an object with event handlers used at addDomListener
function createBindingHandlers(_ref) {
  var fullEventName = _ref.fullEventName,
      domEventHandler = _ref.domEventHandler,
      selector = _ref.selector;
  return {
    bindHandler: function bindHandler() {
      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var node = evt.node;

      if (node) {
        _dom["default"].$(node).on(fullEventName, selector, domEventHandler);
      }
    },
    unbindHandler: function unbindHandler() {
      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var node = evt.node;

      if (node) {
        _dom["default"].$(node).off(fullEventName, selector, domEventHandler);
      }
    }
  };
} // adds DOM event listener for nodes bound to given property


function addDomListener(object, key, eventName, selector, callback, context, info) {
  var def = (0, _init["default"])(object);
  var propDef = (0, _defineprop["default"])(object, key);
  var domEventHandler = (0, _createdomeventhandler["default"])({
    key: key,
    object: object,
    callback: callback,
    context: context || object
  }); // making possible to remove this event listener

  domEventHandler._callback = callback;
  var eventNamespace = def.id + key;
  var fullEventName = "".concat(eventName, ".").concat(eventNamespace);

  var _createBindingHandler = createBindingHandlers({
    fullEventName: fullEventName,
    domEventHandler: domEventHandler,
    selector: selector
  }),
      bindHandler = _createBindingHandler.bindHandler,
      unbindHandler = _createBindingHandler.unbindHandler;

  var addBindListenerResult = (0, _addlistener["default"])(object, "bind:".concat(key), bindHandler, context, info);
  var addUnbindListenerResult = (0, _addlistener["default"])(object, "unbind:".concat(key), unbindHandler, context, info); // if events are added successfully then run bindHandler for every node immediately
  // TODO: Describe why do we need addBindListenerResult and addUnbindListenerResult

  if (addBindListenerResult && addUnbindListenerResult) {
    var bindings = propDef.bindings;

    if (bindings) {
      (0, _foreach["default"])(bindings, function (_ref2) {
        var node = _ref2.node;
        return bindHandler({
          node: node
        });
      });
    }
  }

  return object;
}
//# sourceMappingURL=_adddomlistener.js.map