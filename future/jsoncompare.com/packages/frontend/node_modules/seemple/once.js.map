{"version":3,"sources":["../src/once.js"],"names":["once","object","names","givenCallback","context","isSeemple","isNamesVarArray","Array","namesObjCallback","namesObjName","callback","onceCallback","arguments","_callback"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,aAA7B,EAA4CC,OAA5C,EAAqD;AAClE,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,OAAO,GAAGD,aAAV;AACAA,IAAAA,aAAa,GAAGD,KAAhB;AACAA,IAAAA,KAAK,GAAGD,MAAR;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GARD,MAQO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,MAAxB;AACD;;AAED,MAAMK,eAAe,GAAGJ,KAAK,YAAYK,KAAzC,CAdkE,CAgBlE;;AACA,MAAIL,KAAK,IAAI,yBAAOA,KAAP,MAAiB,QAA1B,IAAsC,CAACI,eAA3C,EAA4D;AAC1D,4BAAOJ,KAAP,EAAc,UAACM,gBAAD,EAAmBC,YAAnB;AAAA,aAAoCT,IAAI,CACpDC,MADoD,EAC5CQ,YAD4C,EAC9BD,gBAD8B,EACZL,aADY,CAAxC;AAAA,KAAd;AAGA,WAAOF,MAAP;AACD;;AAED,MAAMS,QAAQ,GAAG,SAASC,YAAT,GAAwB;AACvC,2BAAMR,aAAN,EAAqB,IAArB,EAA2BS,SAA3B,EADuC,CAEvC;;AACA,yBAAIX,MAAJ,EAAYC,KAAZ,EAAmBS,YAAnB,EAAiCP,OAAjC;AACD,GAJD,CAxBkE,CA8BlE;;;AACAM,EAAAA,QAAQ,CAACG,SAAT,GAAqBV,aAArB;AAEA,SAAO,oBAAGF,MAAH,EAAWC,KAAX,EAAkBQ,QAAlB,EAA4BN,OAA5B,CAAP;AACD","sourcesContent":["import on from './on';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport forOwn from './_helpers/forown';\nimport off from './off';\nimport apply from './_helpers/apply';\n\n// adds event listener which will be removed immediately after its first call\nexport default function once(object, names, givenCallback, context) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    context = givenCallback;\n    givenCallback = names;\n    names = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'once');\n  }\n\n  const isNamesVarArray = names instanceof Array;\n\n  // allow to pass name-handler object\n  if (names && typeof names === 'object' && !isNamesVarArray) {\n    forOwn(names, (namesObjCallback, namesObjName) => once(\n      object, namesObjName, namesObjCallback, givenCallback\n    ));\n    return object;\n  }\n\n  const callback = function onceCallback() {\n    apply(givenCallback, this, arguments);\n    // remove event listener after its call\n    off(object, names, onceCallback, context);\n  };\n\n  // allow to remove event listener py passing original callback to \"off\"\n  callback._callback = givenCallback;\n\n  return on(object, names, callback, context);\n}\n"],"file":"once.js"}