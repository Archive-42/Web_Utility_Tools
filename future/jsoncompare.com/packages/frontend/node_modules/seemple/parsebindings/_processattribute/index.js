"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processAttribute;

var _getbindingkey = _interopRequireDefault(require("./_getbindingkey"));

var _bindnode = _interopRequireDefault(require("../../bindnode"));

var _lookforbinder = _interopRequireDefault(require("../../lookforbinder"));

// a binder for instance of Attr
var attributeBinder = {
  setValue: function setValue(value) {
    this.value = value;
  }
}; // adds binding for an attribute
// its logic is much harder than for text node
// check out imported modules for more info

function processAttribute(_ref) {
  var node = _ref.node,
      attribute = _ref.attribute,
      object = _ref.object,
      eventOptions = _ref.eventOptions;
  var name = attribute.name,
      value = attribute.value;
  var type = node.type; // get a key which will be actually bound to an attribute
  // getBindingKey analyzes given value, creates computable property and returns its key

  var key = (0, _getbindingkey["default"])({
    object: object,
    text: value
  });
  var probablyValueInput = name === 'value' && type !== 'checkbox' && type !== 'radio';
  var probablyCheckableInput = name === 'checked' && (type === 'checkbox' || type === 'radio');
  var defaultBinder;

  if (probablyValueInput || probablyCheckableInput) {
    defaultBinder = (0, _lookforbinder["default"])(node);
  }

  if (defaultBinder) {
    // if deault binder is found then this is default HTML5 form element
    // remove the attribute and use found binder
    node.removeAttribute(name);
    (0, _bindnode["default"])(object, key, node, defaultBinder, eventOptions);
  } else {
    // simply bind an attribute
    (0, _bindnode["default"])(object, key, attribute, attributeBinder, eventOptions);
  }
}
//# sourceMappingURL=index.js.map