"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = select;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defs = _interopRequireDefault(require("./_core/defs"));

var _selectnodes = _interopRequireDefault(require("./bindnode/_selectnodes"));

var _checkobjecttype = _interopRequireDefault(require("./_helpers/checkobjecttype"));

var customSelectorTestReg = /:sandbox|:bound\(([^(]*)\)/; // selects one node based on given selector

function select(object, selector) {
  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args

    /* eslint-disable no-param-reassign */
    selector = object;
    object = this;
    /* eslint-enable no-param-reassign */
  } else {
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'select');
  } // the selector includes "custom" things like :sandbox or :bound(KEY)


  if (customSelectorTestReg.test(selector)) {
    return (0, _selectnodes["default"])(object, selector)[0] || null;
  }

  var def = _defs["default"].get(object);

  if (!def || typeof selector !== 'string') {
    return null;
  }

  var propDef = def.props.sandbox;

  if (!propDef) {
    return null;
  }

  var bindings = propDef.bindings;

  if (bindings) {
    // iterate over all bound nodes trying to find a descendant matched given selector
    for (var i = 0; i < bindings.length; i++) {
      var node = bindings[i].node;
      var selected = node.querySelector(selector);

      if (selected) {
        return selected;
      }
    }
  }

  return null;
}
//# sourceMappingURL=select.js.map