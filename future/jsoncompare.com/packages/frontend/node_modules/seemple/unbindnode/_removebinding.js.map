{"version":3,"sources":["../../src/unbindnode/_removebinding.js"],"names":["spaceReg","removeBinding","object","key","eventOptions","binding","bindingOptions","binder","node","nodeHandler","objectHandler","destroy","on","silent","disabled","split","evtName","removeEventListener","call","extendedEventOptions"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAG,KAAjB,C,CAEA;AACA;;AACe,SAASC,aAAT,OAKZ;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,GAGC,QAHDA,GAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,OACC,QADDA,OACC;AAAA,MAECC,cAFD,GAOGD,OAPH,CAECC,cAFD;AAAA,MAGCC,MAHD,GAOGF,OAPH,CAGCE,MAHD;AAAA,MAICC,IAJD,GAOGH,OAPH,CAICG,IAJD;AAAA,MAKCC,WALD,GAOGJ,OAPH,CAKCI,WALD;AAAA,MAMCC,aAND,GAOGL,OAPH,CAMCK,aAND;AAAA,MAQOC,OARP,GAQuBJ,MARvB,CAQOI,OARP;AAAA,MAQgBC,EARhB,GAQuBL,MARvB,CAQgBK,EARhB;AAAA,MASOC,MATP,GASkBT,YATlB,CASOS,MATP,EAWD;AACA;AACA;;AACA,MAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5BH,IAAAA,WAAW,CAACK,QAAZ,GAAuB,IAAvB;AACD,GAFD,MAEO,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AACjC;AACA;AACA,6BACEA,EAAE,CAACG,KAAH,CAASf,QAAT,CADF,EAEE,UAACgB,OAAD;AAAA,aAAaR,IAAI,CAACS,mBAAL,CAAyBD,OAAzB,EAAkCP,WAAlC,CAAb;AAAA,KAFF;AAID,GAvBA,CAyBD;;;AACA,kCAAeP,MAAf,6BAA2CC,GAA3C,GAAkDO,aAAlD,EA1BC,CA4BD;;AACA,MAAIC,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACO,IAAR,CAAaV,IAAb,EAAmBF,cAAnB;AACD,GA/BA,CAiCD;;;AACA,MAAI,CAACO,MAAL,EAAa;AACX,QAAMM,oBAAoB;AACxBhB,MAAAA,GAAG,EAAHA,GADwB;AAExBK,MAAAA,IAAI,EAAJA;AAFwB,OAGrBJ,YAHqB,CAA1B;;AAMA,gCAAWF,MAAX,mBAA6BC,GAA7B,GAAoCgB,oBAApC;AACA,gCAAWjB,MAAX,EAAmB,QAAnB,EAA6BiB,oBAA7B;AACD;AACF","sourcesContent":["import removeListener from '../off/_removelistener';\nimport triggerOne from '../trigger/_triggerone';\nimport forEach from '../_helpers/foreach';\n\nconst spaceReg = /\\s+/;\n\n// the function removes single binding for single object\n// called by unbindNode\nexport default function removeBinding({\n  object,\n  key,\n  eventOptions,\n  binding\n}) {\n  const {\n    bindingOptions,\n    binder,\n    node,\n    nodeHandler,\n    objectHandler\n  } = binding;\n  const { destroy, on } = binder;\n  const { silent } = eventOptions;\n\n  // if \"on\" is a function then disable it\n  // we cannot \"turn off\" custom listener defined by a programmer\n  // programmer needs to remove custom listener maually inside binder.destroy\n  if (typeof on === 'function') {\n    nodeHandler.disabled = true;\n  } else if (typeof on === 'string') {\n    // remove DOM event listener\n    // removeEventListener is faster than \"on\" method from any DOM library\n    forEach(\n      on.split(spaceReg),\n      (evtName) => node.removeEventListener(evtName, nodeHandler)\n    );\n  }\n\n  // remove object event listener\n  removeListener(object, `_change:bindings:${key}`, objectHandler);\n\n  // if binder.destroy is given call it\n  if (destroy) {\n    destroy.call(node, bindingOptions);\n  }\n\n  // fire events\n  if (!silent) {\n    const extendedEventOptions = {\n      key,\n      node,\n      ...eventOptions\n    };\n\n    triggerOne(object, `unbind:${key}`, extendedEventOptions);\n    triggerOne(object, 'unbind', extendedEventOptions);\n  }\n}\n"],"file":"_removebinding.js"}