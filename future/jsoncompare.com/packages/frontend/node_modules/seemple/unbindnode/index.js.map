{"version":3,"sources":["../../src/unbindnode/index.js"],"names":["unbindNode","object","key","node","eventOptions","isSeemple","Array","itemKey","itemNode","itemEventOptions","event","commonEventOptions","mergedEventOptions","keyObjValue","keyObjKey","constructor","Object","length","keyObjValueItem","deep","def","defs","get","props","propsItem","propsKey","deepPath","split","deepPathLength","target","i","slice","propDef","bindings","binding","nodes","$nodes","retainBindings","retainNodes","nodesItem","push","dom","$"],"mappings":"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","sourcesContent":["import checkObjectType from '../_helpers/checkobjecttype';\nimport defs from '../_core/defs';\nimport getNodes from '../bindnode/_getnodes';\nimport removeTreeListener from '../off/_removetreelistener';\nimport forEach from '../_helpers/foreach';\nimport forOwn from '../_helpers/forown';\nimport assign from '../_helpers/assign';\nimport removeBinding from './_removebinding';\nimport dom from '../_dom';\n\n// unbinds a node\nexport default function unbindNode(object, key, node, eventOptions) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    eventOptions = node;\n    node = key;\n    key = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'unbindNode');\n  }\n\n  if (key instanceof Array) {\n    if (typeof key[0] === 'string') {\n      /*\n             * accept array of keys\n             * this.unbindNode(['a', 'b', 'c'], node)\n             */\n\n      forEach(key, (itemKey) => unbindNode(object, itemKey, node, eventOptions));\n    } else {\n      /*\n             * acept array of objects\n             * this.unbindNode([{ key, node, binder, event }], { silent: true });\n             */\n      forEach(key, ({\n        key: itemKey,\n        node: itemNode,\n        event: itemEventOptions\n      }) => {\n        const commonEventOptions = node;\n        const mergedEventOptions = {};\n\n        if (commonEventOptions) {\n          // extend event object by \"global\" event\n          assign(mergedEventOptions, commonEventOptions);\n        }\n\n        if (itemEventOptions) {\n          // extend event object by \"local\" event (\"event\" key of an object)\n          assign(mergedEventOptions, itemEventOptions);\n        }\n\n        unbindNode(object, itemKey, itemNode, mergedEventOptions);\n      });\n    }\n\n    return object;\n  }\n\n  if (key && typeof key === 'object') {\n    forOwn(key, (keyObjValue, keyObjKey) => {\n      if (keyObjValue.constructor === Object && 'node' in keyObjValue) {\n        // this.unbindNode({ key: { node: $(), binder } ) }, { silent: true });\n        unbindNode(object, keyObjKey, keyObjValue.node, node);\n      } else if (\n        keyObjValue.constructor === Array\n                && keyObjValue.length\n                && keyObjValue[0].constructor === Object\n                && 'node' in keyObjValue[0]\n      ) {\n        // this.unbindNode({ key: [{ node: $(), binder }] ) }, { silent: true });\n        forEach(keyObjValue, (keyObjValueItem) => {\n          unbindNode(object, keyObjKey, keyObjValueItem.node, node);\n        });\n      } else {\n        // this.unbindNode({ key: $() }, { silent: true });\n        unbindNode(object, keyObjKey, keyObjValue, node);\n      }\n    });\n    return object;\n  }\n\n  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n  const { deep } = eventOptions;\n  const def = defs.get(object);\n\n  if (!def) {\n    return object;\n  }\n\n  const { props } = def;\n\n  // allow to pass null or undefined as key\n  // if passed then remove bindings of all keys for given object\n  if (key === null || typeof key === 'undefined') {\n    forOwn(props, (propsItem, propsKey) => {\n      unbindNode(object, propsKey, null, eventOptions);\n    });\n\n    return object;\n  }\n\n  // remove delegated binding\n  if (deep !== false) {\n    const deepPath = key.split('.');\n    const deepPathLength = deepPath.length;\n\n    if (deepPathLength > 1) {\n      let target = object;\n\n      for (let i = 0; i < deepPathLength - 1; i++) {\n        // TODO: Do we need to throw an error when a target is falsy?\n        target = target[deepPath[i]];\n      }\n\n      // TODO: Potential bug! This may undelegate listener for all bindings with the same path\n      // ...(cannot reproduce)\n      removeTreeListener(object, deepPath.slice(0, deepPathLength - 2));\n\n      unbindNode(target, deepPath[deepPathLength - 1], node, eventOptions);\n\n      return object;\n    }\n  }\n\n  const propDef = props[key];\n\n  // when no propdef do nothing\n  if (!propDef) {\n    return object;\n  }\n\n  const { bindings } = propDef;\n\n  // if the property doesn't have any bindings do nothing\n  if (!bindings) {\n    return object;\n  }\n\n  // if no node is pased remove all bindings for given key\n  if (!node) {\n    forEach(bindings, (binding) => {\n      removeBinding({\n        object, key, eventOptions, binding\n      });\n    });\n\n    propDef.bindings = null;\n\n    // update nodes and $nodes for Seemple instance\n    if (object.isSeemple) {\n      delete object.nodes[key];\n      delete object.$nodes[key];\n    }\n\n    return object;\n  }\n\n  const $nodes = getNodes(object, node);\n  const retainBindings = [];\n  const retainNodes = [];\n\n  // iterate over all bindngs and compare their node with given nodes\n  forEach($nodes, (nodesItem) => {\n    forEach(bindings, (binding) => {\n      if (binding.node === nodesItem) {\n        removeBinding({\n          object, key, eventOptions, binding\n        });\n      } else {\n        retainBindings.push(binding);\n        retainNodes.push(nodesItem);\n      }\n    });\n  });\n\n  // update nodes and $nodes for Seemple instance\n  if (object.isSeemple) {\n    if (retainNodes.length) {\n      object.nodes[key] = retainNodes[0];\n      object.$nodes[key] = dom.$(retainNodes);\n    } else {\n      delete object.nodes[key];\n      delete object.$nodes[key];\n    }\n  }\n\n  // update bindings object\n  if (retainBindings.length) {\n    propDef.bindings = retainBindings;\n  } else {\n    propDef.bindings = null;\n  }\n\n  return object;\n}\n"],"file":"index.js"}