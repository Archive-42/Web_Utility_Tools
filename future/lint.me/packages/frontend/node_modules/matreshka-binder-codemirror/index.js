'use strict';

var _codemirror = require('codemirror');

var _codemirror2 = _interopRequireDefault(_codemirror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function codeMirrorBinder(config) {
    var instance = void 0;
    var changeCallback = void 0;

    return {
        on: function on(callback) {
            changeCallback = callback;
            instance.on('change', changeCallback);
        },
        getValue: function getValue() {
            instance.save();
            return instance.getValue();
        },
        setValue: function setValue(value) {
            instance.setValue(value);
            instance.save();
        },
        initialize: function initialize() {
            /* istanbul ignore if */
            if (!this.parentNode) {
                throw new Error('parentNode isn\'n found' + ' you need to insert textarea into the document before binder use');
            }

            instance = _codemirror2.default.fromTextArea(this, config);
        },
        destroy: function destroy() {
            instance.off('change', changeCallback);
            instance.toTextArea();
        }
    };
}

module.exports = codeMirrorBinder;

// extend binders object in browser environment
/* istanbul ignore if */
if (typeof Matreshka === 'function') {
    var _Matreshka = Matreshka;
    var binders = _Matreshka.binders;


    binders.codeMirror = codeMirrorBinder;
}
