'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _balajs = require('balajs');

var _balajs2 = _interopRequireDefault(_balajs);

var _select = require('matreshka/select');

var _select2 = _interopRequireDefault(_select);

var _bindnode = require('matreshka/bindnode');

var _bindnode2 = _interopRequireDefault(_bindnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseForm(object, selector, callback, eventOptions) {
    var form = /:sandbox|:bound/.test(selector) ? (0, _select2.default)(object, selector) : _balajs2.default.one(selector);
    var fields = (0, _balajs2.default)('input, textarea, output, progress, select', form);

    if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' && typeof object !== 'function') {
        throw Error('parseForm should accept an object or a function as the first argument');
    }

    for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        var name = field.name;


        if (name) {
            (0, _bindnode2.default)(object, name, field, undefined, eventOptions);
            if (callback) {
                callback(name, field);
            }
        }
    }

    return form;
}

module.exports = parseForm;

// extend Matreshka in browser environment
/* istanbul ignore if */
if (typeof Matreshka === 'function') {
    Matreshka.parseForm = parseForm;
}
