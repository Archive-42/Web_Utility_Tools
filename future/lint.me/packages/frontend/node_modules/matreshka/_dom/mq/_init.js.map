{"version":3,"sources":["../../../src/_dom/mq/_init.js"],"names":["win","window","MQInit","selector","context","result","nodeType","test","html2nodeList","newContext","querySelectorAll","document","length","i","push","prototype"],"mappings":";;4BAA0B,kB;;AAE1B,IAAMA,MAAMC,MAAZ;;AAEA;AACA;AACA,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AAC/B,QAAIC,eAAJ;;AAEA,QAAIF,QAAJ,EAAc;AACV,YAAIA,SAASG,QAAT,IAAsB,OAAON,GAAP,KAAe,QAAf,IAA2BG,aAAaH,GAAlE,EAAwE;AACpEK,qBAAS,CAACF,QAAD,CAAT;AACH,SAFD,MAEO,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACrC,gBAAI,IAAII,IAAJ,CAASJ,QAAT,CAAJ,EAAwB;AACpBE,yBAASG,cAAcL,QAAd,CAAT;AACH,aAFD,MAEO,IAAIC,OAAJ,EAAa;AAChB,oBAAMK,aAAc,IAAIP,MAAJ,CAAWE,OAAX,CAAD,CAAsB,CAAtB,CAAnB;;AAEA,oBAAIK,UAAJ,EAAgB;AACZJ,6BAASI,WAAWC,gBAAX,CAA4BP,QAA5B,CAAT;AACH;AACJ,aANM,MAMA;AACHE,yBAASL,IAAIW,QAAJ,CAAaD,gBAAb,CAA8BP,QAA9B,CAAT;AACH;AACJ,SAZM,MAYA,IAAI,YAAYA,QAAhB,EAA0B;AAC7B;AACAE,qBAASF,QAAT;AACH,SAHM,MAGA;AACH;AACAE,qBAAS,CAACF,QAAD,CAAT;AACH;AACJ;;AAED,QAAMS,SAASP,UAAUA,OAAOO,MAAhC;;AAEA,QAAIA,MAAJ,EAAY;AACR,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC7B,iBAAKC,IAAL,CAAUT,OAAOQ,CAAP,CAAV;AACH;AACJ;AACJ;;AAEDX,OAAOa,SAAP,GAAmB,EAAnB;;iBAEeb,M","file":"_init.js","sourcesContent":["import html2nodeList from './_html2nodelist';\n\nconst win = window;\n\n// function-constructor of mq library\n// accepts many kinds of arguments (selector, html, function)\nfunction MQInit(selector, context) {\n    let result;\n\n    if (selector) {\n        if (selector.nodeType || (typeof win === 'object' && selector === win)) {\n            result = [selector];\n        } else if (typeof selector === 'string') {\n            if (/</.test(selector)) {\n                result = html2nodeList(selector);\n            } else if (context) {\n                const newContext = (new MQInit(context))[0];\n\n                if (newContext) {\n                    result = newContext.querySelectorAll(selector);\n                }\n            } else {\n                result = win.document.querySelectorAll(selector);\n            }\n        } else if ('length' in selector) {\n            // if it's something array-like (eg NodeList)\n            result = selector;\n        } else {\n            // this is somethong another (eg Attr)\n            result = [selector];\n        }\n    }\n\n    const length = result && result.length;\n\n    if (length) {\n        for (let i = 0; i < length; i++) {\n            this.push(result[i]);\n        }\n    }\n}\n\nMQInit.prototype = [];\n\nexport default MQInit;\n"]}