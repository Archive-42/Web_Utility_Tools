'use strict';

var data = require('./_data');

var splitBySpaceReg = /\s+/;
var splitByDotReg = /\.(.+)/;

// removes event handler from a set of elements
module.exports = off;
function off(namesStr, selector, handler) {
    if (typeof selector === 'function') {
        handler = selector; // eslint-disable-line no-param-reassign
        selector = null; // eslint-disable-line no-param-reassign
    }

    var names = namesStr.split(splitBySpaceReg);

    for (var i = 0; i < names.length; i++) {
        var _names$i$split = names[i].split(splitByDotReg),
            name = _names$i$split[0],
            namespace = _names$i$split[1];

        for (var j = 0; j < this.length; j++) {
            var node = this[j];

            if (!name && namespace) {
                for (var k = 0, keys = Object.keys(data.allEvents); k < keys.length; k++) {
                    var _events = data.allEvents[keys[k]];

                    for (var l = 0; l < _events.length; l++) {
                        var event = _events[i];
                        if (event.namespace === namespace && event.nodeID === node.b$) {
                            node.removeEventListener(event.name, event.delegate || event.handler);
                            _events.splice(l, 1);
                            l -= 1;
                        }
                    }
                }

                continue;
            }

            var events = data.allEvents[name + node.b$];
            if (events) {
                for (var _k = 0; _k < events.length; _k++) {
                    var _event = events[_k];
                    if ((!handler || handler === _event.handler || handler === _event.delegate) && (!namespace || namespace === _event.namespace) && (!selector || selector === _event.selector)) {
                        node.removeEventListener(name, _event.delegate || _event.handler);
                        events.splice(_k, 1);
                        _k -= 1;
                    }
                }
            } else if (!namespace && !selector) {
                node.removeEventListener(name, handler);
            }
        }
    }

    return this;
}
//# sourceMappingURL=off.js.map