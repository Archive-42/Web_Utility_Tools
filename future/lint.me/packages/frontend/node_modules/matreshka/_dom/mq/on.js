'use strict';

var data = require('./_data');

var splitBySpaceReg = /\s+/;
var splitByDotReg = /\.(.+)/;
var randomID = Math.random().toString().replace('0.', 'x') + 'y'; // x12345y

// checks an element against a selector
function is(node, selector) {
    return (node.matches || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector).call(node, selector);
}

// the function is used when a selector is given
function delegateHandler(evt, selector, handler) {
    var scopeSelector = '[' + randomID + '="' + randomID + '"] ';
    var splittedSelector = selector.split(',');

    var matching = '';

    for (var i = 0; i < splittedSelector.length; i++) {
        var sel = splittedSelector[i];
        matching += '' + (i === 0 ? '' : ',') + scopeSelector + sel + ',' + scopeSelector + sel + ' *';
    }

    this.setAttribute(randomID, randomID);

    if (is(evt.target, matching)) {
        handler.call(this, evt);
    }

    this.removeAttribute(randomID);
}

// adds event listener to a set of elemnts
module.exports = on;
function on(namesStr, selector, handler) {
    var names = namesStr.split(splitBySpaceReg);
    var delegate = void 0;

    if (typeof selector === 'function') {
        handler = selector; // eslint-disable-line no-param-reassign
        selector = null; // eslint-disable-line no-param-reassign
    }

    if (selector) {
        delegate = function uniqueDelegateHandler(evt) {
            delegateHandler.call(this, evt, selector, handler);
        };
    }

    for (var i = 0; i < names.length; i++) {
        var _names$i$split = names[i].split(splitByDotReg),
            name = _names$i$split[0],
            namespace = _names$i$split[1];

        for (var j = 0; j < this.length; j++) {
            var node = this[j];
            var nodeID = node.b$ = node.b$ || ++data.nodeIndex; // eslint-disable-line no-plusplus
            var events = data.allEvents[name + nodeID] = data.allEvents[name + nodeID] || [];

            var exist = false;

            for (var k = 0; k < events.length; k++) {
                var event = events[k];

                if (handler === event.handler && (!selector || selector === event.selector)) {
                    exist = true;
                    break;
                }
            }

            if (!exist) {
                events.push({
                    delegate: delegate,
                    handler: handler,
                    namespace: namespace,
                    selector: selector,
                    nodeID: nodeID,
                    name: name
                });

                node.addEventListener(name, delegate || handler, false);
            }
        }
    }

    return this;
}
//# sourceMappingURL=on.js.map