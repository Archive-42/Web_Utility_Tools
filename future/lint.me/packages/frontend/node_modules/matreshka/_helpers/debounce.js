'use strict';

var apply = require('./apply');

// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds.
// (c) https://davidwalsh.name/javascript-debounce-function

module.exports = debounce;
function debounce(func, givenDelay, thisArg) {
    var timeout = void 0;
    var delay = void 0;
    if (typeof givenDelay !== 'number') {
        thisArg = givenDelay; // eslint-disable-line no-param-reassign
        delay = 0;
    } else {
        delay = givenDelay || 0;
    }

    return function debounced() {
        var args = arguments;
        var callContext = thisArg || this;

        clearTimeout(timeout);

        timeout = setTimeout(function () {
            return apply(func, callContext, args);
        }, delay);
    };
}
//# sourceMappingURL=debounce.js.map