{"version":3,"sources":["../../src/_helpers/debounce.js"],"names":["debounce","func","givenDelay","thisArg","timeout","delay","debounced","args","arguments","callContext","clearTimeout","setTimeout","apply"],"mappings":";;oBAAkB,S;;AAElB;AACA;AACA;AACA;;iBAEwBA,Q;AAAT,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,EAAoCC,OAApC,EAA6C;AACxD,QAAIC,gBAAJ;AACA,QAAIC,cAAJ;AACA,QAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAChCC,kBAAUD,UAAV,CADgC,CACV;AACtBG,gBAAQ,CAAR;AACH,KAHD,MAGO;AACHA,gBAAQH,cAAc,CAAtB;AACH;;AAED,WAAO,SAASI,SAAT,GAAqB;AACxB,YAAMC,OAAOC,SAAb;AACA,YAAMC,cAAcN,WAAW,IAA/B;;AAEAO,qBAAaN,OAAb;;AAEAA,kBAAUO,WAAW;AAAA,mBAAMC,MAAMX,IAAN,EAAYQ,WAAZ,EAAyBF,IAAzB,CAAN;AAAA,SAAX,EAAiDF,KAAjD,CAAV;AACH,KAPD;AAQH","file":"debounce.js","sourcesContent":["import apply from './apply';\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds.\n// (c) https://davidwalsh.name/javascript-debounce-function\n\nexport default function debounce(func, givenDelay, thisArg) {\n    let timeout;\n    let delay;\n    if (typeof givenDelay !== 'number') {\n        thisArg = givenDelay; // eslint-disable-line no-param-reassign\n        delay = 0;\n    } else {\n        delay = givenDelay || 0;\n    }\n\n    return function debounced() {\n        const args = arguments;\n        const callContext = thisArg || this;\n\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => apply(func, callContext, args), delay);\n    };\n}\n"]}