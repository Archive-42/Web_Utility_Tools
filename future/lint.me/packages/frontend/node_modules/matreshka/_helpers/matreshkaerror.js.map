{"version":3,"sources":["../../src/_helpers/matreshkaerror.js"],"names":["bindingErrorPrefix","calcErrorPrefix","eventsErrorPrefix","arrayErrorPrefix","getType","variable","getTypeError","variableName","expectedType","errors","object","method","key","node","selectorInfo","$nodes","missing","target","sourceKey","sourceObject","source","Model","length","selector","toRemove","names","matreshkaError","data","getError","Error"],"mappings":"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","file":"matreshkaerror.js","sourcesContent":["/* eslint-disable prefer-template, max-len */\nconst bindingErrorPrefix = 'Binding error:';\nconst calcErrorPrefix = 'Calc error:';\nconst eventsErrorPrefix = 'Events error:';\nconst arrayErrorPrefix = 'Matreshka.Array error:';\n\nconst getType = (variable) => {\n    if (variable === null) {\n        return 'null';\n    }\n\n    return typeof variable;\n};\nconst getTypeError = (variable, variableName, expectedType) =>\n    `${variableName} must have type \"${expectedType}\" but got \"${getType(variable)}\" instead.`;\n\nconst errors = {\n    'common:object_type': ({ object, method }) => `Error in ${method}: `\n        + getTypeError(object, 'object', 'object'),\n    'common:call_class': () => 'Cannot call a class as a function',\n    'common:use_magic_props': () =>\n        '\"sandbox\" key (for all objects) and \"container\" key (for Matreshka.Array instances)'\n        + ' are reserved for service use and cannot be used as usual properties',\n\n    'binding:node_missing': ({ key, node }) => {\n        const selectorInfo = typeof node === 'string' ? ` (given selector is \"${node}\")` : '';\n        return `${bindingErrorPrefix} node is missing for key \"${key}\"${selectorInfo}.`;\n    },\n    'binding:falsy_key': () => `${bindingErrorPrefix} \"key\" arg cannot be falsy`,\n    'binding:instance_nodes_missing': ({ $nodes }) => {\n        const missing = !$nodes ? '$nodes' : 'nodes';\n        return `${bindingErrorPrefix} \"${missing}\" property of Matreshka instance is missing.`\n            + ' It must be an object and must not be reassigned.';\n    },\n    'binding:magic_props_nodes_length': () =>\n        `${bindingErrorPrefix} \"sandbox\" key (for all objects) and \"container\" key`\n        + ' (for Matreshka.Array instances) cannot have more than one bound node',\n\n    'calc:target_type': ({ target }) =>\n        `${calcErrorPrefix} ${getTypeError(target, 'target key', 'string')}`,\n    'calc:source_key_type': ({ sourceKey }) =>\n        `${calcErrorPrefix} ${getTypeError(sourceKey, 'source key', 'string')}`,\n    'calc:source_object_type': ({ sourceObject }) =>\n        `${calcErrorPrefix} ${getTypeError(sourceObject, 'source object', 'object')}`,\n    'calc:source_type': ({ source }) =>\n        `${calcErrorPrefix} ${getTypeError(source, 'source', 'object')}`,\n\n    'array:model_type': ({ Model }) =>\n        `${arrayErrorPrefix} ${getTypeError(Model, 'Model', 'function')}`,\n    'array:add_render_twice': () =>\n        `${arrayErrorPrefix} one rendered object was inserted twice.`,\n    'array:rendered_number_nodes': ({ length }) =>\n        `${arrayErrorPrefix} renderer returned ${length} nodes instead of one.`\n        + ` ${length > 0 ? 'To fix this wrap these nodes by single node.' : ''}`,\n    'array:renderer_node_missing': ({ selector }) =>\n        `${arrayErrorPrefix} renderer node is missing (given selector is \"${selector}\")`,\n    'array:nonexistent_method': ({ method }) =>\n            `${arrayErrorPrefix} Array.prototype.${method} doesn't exist.`\n            + ' You need to include a polyfill for it (e. g. babel-node)',\n    'array:method_compat_renderer': ({ method }) =>\n            `${arrayErrorPrefix} Not possible to render when ${method} method is called`,\n\n    'pull:to_remove_type': ({ toRemove }) =>\n        `Error in pull: ${getTypeError(toRemove, 'toRemove', 'number')}`,\n\n    'restore:no_nodes': () =>\n        `${arrayErrorPrefix} cannot find any container to restore an instance using \"restore\" method`,\n\n    'trigger:names_type': ({ names }) =>\n        `${eventsErrorPrefix} ${getTypeError(names, 'event name', 'string')}`,\n\n    'on:names_type': ({ names }) => errors['trigger:names_type']({ names }),\n\n    'removedatakeys:key_type': ({ key }) =>\n        `Error in removeDataKeys: ${getTypeError(key, 'key', 'string')}`,\n\n    'adddatakeys:key_type': ({ key }) =>\n        `Error in addDataKeys: ${getTypeError(key, 'key', 'string')}`,\n\n    'remove:key_type': ({ key }) =>\n        `Error in remove: ${getTypeError(key, 'key', 'string')}`,\n\n    'mediate:key_type': ({ key }) =>\n        `Error in mediate: ${getTypeError(key, 'key', 'string')}`\n};\n\nexport default function matreshkaError(key, data) {\n    const getError = errors[key];\n    if (!getError) {\n        throw Error(`Unknown error \"${key}\". Please report about this on Github.`);\n    }\n\n    return new Error(getError(data));\n}\n"]}