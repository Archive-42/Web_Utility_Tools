{"version":3,"sources":["../../src/array/_afterinit.js"],"names":["modelItemMediator","item","index","Model","itemData","toJSON","changeModel","matreshkaError","mediateItem","changeItemRendererHandler","eventOptions","forceRerender","rerender","afterMatreshkaArrayInit","hasModel","afterMatreshkaInit","call","addListener","skipChecks"],"mappings":";;iCAA+B,yB;;0BACP,oB;;6BACG,4B;;AAE3B;AACA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AAAA,QAC5BC,KAD4B,GAClB,IADkB,CAC5BA,KAD4B;;AAGpC;;AACA,QAAIF,gBAAgBE,KAApB,EAA2B;AACvB,eAAOF,IAAP;AACH;;AAED,QAAIG,iBAAJ;;AAEA,QAAIH,QAAQ,OAAOA,KAAKI,MAAZ,KAAuB,UAAnC,EAA+C;AAC3C;AACA;AACAD,mBAAWH,KAAKI,MAAL,CAAY,KAAZ,CAAX;AACH,KAJD,MAIO;AACH;AACAD,mBAAWH,IAAX;AACH;;AAED,WAAO,IAAIE,KAAJ,CAAUC,QAAV,EAAoB,IAApB,EAA0BF,KAA1B,CAAP;AACH;;AAED;AACA,SAASI,WAAT,GAAuB;AAAA,QACXH,KADW,GACD,IADC,CACXA,KADW;;AAGnB;;AACA,QAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC7B,cAAMI,eAAe,kBAAf,EAAmC,EAAEJ,YAAF,EAAnC,CAAN;AACH;;AAED;AACA,SAAKK,WAAL,CAAiBR,iBAAjB;AACH;;AAED;AACA,SAASS,yBAAT,GAAsD;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;AAAA,gCACjBA,YADiB,CAC1CC,aAD0C;AAAA,QAC1CA,aAD0C,yCAC1B,IAD0B;;AAElD,SAAKC,QAAL,CAAc,EAAED,4BAAF,EAAd;AACH;;AAED;iBACwBE,uB;AAAT,SAASA,uBAAT,GAAmC;AAC9C;AACA,QAAMC,WAAW,WAAW,IAA5B;;AAEA;AACAC,uBAAmBC,IAAnB,CAAwB,IAAxB;;AAEAC,gBAAY,IAAZ,EAAkB,sBAAlB,EAA0CX,WAA1C,EAAuD,IAAvD,EAA6D;AACzDY,oBAAY;AAD6C,KAA7D;;AAIAD,gBAAY,IAAZ,EAAkB,6BAAlB,EAAiDR,yBAAjD,EAA4E,IAA5E,EAAkF;AAC9ES,oBAAY;AADkE,KAAlF;;AAIA;AACA;AACA,QAAIJ,QAAJ,EAAc;AACVR,oBAAYU,IAAZ,CAAiB,IAAjB;AACH;AACJ","file":"_afterinit.js","sourcesContent":["import afterMatreshkaInit from '../matreshka/_afterinit';\nimport addListener from '../on/_addlistener';\nimport matreshkaError from '../_helpers/matreshkaerror';\n\n// the function returns array item converted to Model instance\nfunction modelItemMediator(item, index) {\n    const { Model } = this;\n\n    // if an item is already instance of Model\n    if (item instanceof Model) {\n        return item;\n    }\n\n    let itemData;\n\n    if (item && typeof item.toJSON === 'function') {\n        // if item is not falsy and if it has toJSON method\n        // then retrieve instance data by this method\n        itemData = item.toJSON(false);\n    } else {\n        // if not then use an item as its data\n        itemData = item;\n    }\n\n    return new Model(itemData, this, index);\n}\n\n// event handler to listen changes of Model property\nfunction changeModel() {\n    const { Model } = this;\n\n    // if model has wrong type then throw an error\n    if (typeof Model !== 'function') {\n        throw matreshkaError('array:model_type', { Model });\n    }\n\n    // attatch item mediator\n    this.mediateItem(modelItemMediator);\n}\n\n// event handler to listen changes of itemRenderer property\nfunction changeItemRendererHandler(eventOptions = {}) {\n    const { forceRerender = true } = eventOptions;\n    this.rerender({ forceRerender });\n}\n\n// Matreshka.Array initializer\nexport default function afterMatreshkaArrayInit() {\n    // we need to calculate hasModel before change:Model is added\n    const hasModel = 'Model' in this;\n\n    // call Matreshka initializer\n    afterMatreshkaInit.call(this);\n\n    addListener(this, '_change:common:Model', changeModel, this, {\n        skipChecks: true\n    });\n\n    addListener(this, '_change:common:itemRenderer', changeItemRendererHandler, this, {\n        skipChecks: true\n    });\n\n    // call changeModel handler immediately if model is present\n    // it will throw an error if Model is not a function\n    if (hasModel) {\n        changeModel.call(this);\n    }\n}\n"]}