{"version":3,"sources":["../../../src/array/_processrendering/index.js"],"names":["processRendering","self","eventOptions","method","added","removed","container","nodes","sandbox","selfDef","defs","get","matreshkaError","processPush","processUnshift","processRemove","processSort","processRerender","processRecreate","length","processSpliceAdd"],"mappings":";;mBAAiB,kB;;6BACU,+B;;0BACH,e;;6BACG,kB;;8BACC,mB;;0BACJ,e;;4BACE,iB;;8BACE,mB;;+BACC,oB;;AAE7B;iBACwBA,gB;AAAT,SAASA,gBAAT,OAGZ;AAAA,QAFCC,IAED,QAFCA,IAED;AAAA,QADCC,YACD,QADCA,YACD;AAAA,QACSC,MADT,GACoCD,YADpC,CACSC,MADT;AAAA,QACiBC,KADjB,GACoCF,YADpC,CACiBE,KADjB;AAAA,QACwBC,OADxB,GACoCH,YADpC,CACwBG,OADxB;AAEC;;AACA,QAAMC,YAAYL,KAAKM,KAAL,CAAWD,SAAX,IAAwBL,KAAKM,KAAL,CAAWC,OAArD;AACA,QAAMC,UAAUC,KAAKC,GAAL,CAASV,IAAT,CAAhB;;AAEA,QAAI,CAACK,SAAL,EAAgB;AACZ;AACH;;AAED,YAAQH,MAAR;AACI,aAAK,MAAL;AACA,aAAK,YAAL;AACI,kBAAMS,eAAe,8BAAf,EAA+C,EAAET,cAAF,EAA/C,CAAN;AACJ,aAAK,MAAL;AACIU,wBAAY;AACRZ,0BADQ;AAERQ,gCAFQ;AAGRP,0CAHQ;AAIRI;AAJQ,aAAZ;AAMA;AACJ,aAAK,SAAL;AACIQ,2BAAe;AACXb,0BADW;AAEXQ,gCAFW;AAGXP,0CAHW;AAIXI;AAJW,aAAf;AAMA;AACJ,aAAK,MAAL;AACA,aAAK,KAAL;AACA,aAAK,OAAL;AACIS,0BAAc;AACVd,0BADU;AAEVQ,gCAFU;AAGVP,0CAHU;AAIVI;AAJU,aAAd;AAMA;AACJ,aAAK,MAAL;AACA,aAAK,SAAL;AACIU,wBAAY;AACRf,0BADQ;AAERQ,gCAFQ;AAGRP,0CAHQ;AAIRI;AAJQ,aAAZ;AAMA;AACJ,aAAK,UAAL;AACIW,4BAAgB;AACZhB,0BADY;AAEZQ,gCAFY;AAGZP,0CAHY;AAIZI;AAJY,aAAhB;AAMA;AACJ,aAAK,UAAL;AACIY,4BAAgB;AACZjB,0BADY;AAEZQ,gCAFY;AAGZP,0CAHY;AAIZI;AAJY,aAAhB;AAMA;AACJ,aAAK,QAAL;AACI,gBAAIF,MAAMe,MAAV,EAAkB;AACdC,iCAAiB;AACbnB,8BADa;AAEbQ,oCAFa;AAGbP,8CAHa;AAIbI;AAJa,iBAAjB;AAMH;;AAED,gBAAID,QAAQc,MAAZ,EAAoB;AAChBJ,8BAAc;AACVd,8BADU;AAEVQ,oCAFU;AAGVP,8CAHU;AAIVI;AAJU,iBAAd;AAMH;;AAED;AACJ;AACI;AA5ER;AA8EH","file":"index.js","sourcesContent":["import defs from '../../_core/defs';\nimport matreshkaError from '../../_helpers/matreshkaerror';\nimport processPush from './processpush';\nimport processUnshift from './processunshift';\nimport processRecreate from './processrecreate';\nimport processSort from './processsort';\nimport processRemove from './processremove';\nimport processRerender from './processrerender';\nimport processSpliceAdd from './processspliceadd';\n\n// makes possible to render array items based on a name of called method\nexport default function processRendering({\n    self,\n    eventOptions\n}) {\n    const { method, added, removed } = eventOptions;\n    // nodes object always exist at Matreshka instances\n    const container = self.nodes.container || self.nodes.sandbox;\n    const selfDef = defs.get(self);\n\n    if (!container) {\n        return;\n    }\n\n    switch (method) {\n        case 'fill':\n        case 'copyWithin':\n            throw matreshkaError('array:method_compat_renderer', { method });\n        case 'push':\n            processPush({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'unshift':\n            processUnshift({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'pull':\n        case 'pop':\n        case 'shift':\n            processRemove({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'sort':\n        case 'reverse':\n            processSort({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'rerender':\n            processRerender({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'recreate':\n            processRecreate({\n                self,\n                selfDef,\n                eventOptions,\n                container\n            });\n            break;\n        case 'splice':\n            if (added.length) {\n                processSpliceAdd({\n                    self,\n                    selfDef,\n                    eventOptions,\n                    container\n                });\n            }\n\n            if (removed.length) {\n                processRemove({\n                    self,\n                    selfDef,\n                    eventOptions,\n                    container\n                });\n            }\n\n            break;\n        default:\n            return;\n    }\n}\n"]}