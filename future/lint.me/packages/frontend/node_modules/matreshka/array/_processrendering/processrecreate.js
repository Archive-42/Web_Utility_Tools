'use strict';

var renderItemNode = require('./renderitemnode');

var triggerOne = require('../../trigger/_triggerone');

var defs = require('../../_core/defs');

var matreshkaError = require('../../_helpers/matreshkaerror');

var getAlreadyRendered = require('./getalreadyrendered');

// this function renders inserted items if possible when recreate method is called
module.exports = processRecreate;
function processRecreate(_ref) {
    var self = _ref.self,
        selfDef = _ref.selfDef,
        eventOptions = _ref.eventOptions,
        container = _ref.container;
    var removed = eventOptions.removed,
        silent = eventOptions.silent;
    var selfId = selfDef.id;

    // iterate over removed items and remove their nodes

    for (var _target = removed, _index = 0, item, _l = _target.length; item = _target[_index], _index < _l; _index++) {
        var itemDef = defs.get(item);

        if (itemDef) {
            var renderedInArrays = itemDef.renderedInArrays;

            var node = renderedInArrays && renderedInArrays[selfId];
            if (node) {
                delete itemDef.renderedInArrays[selfId];
                container.removeChild(node);
            }
        }
    }

    var alreadyRenderedMap = {};

    // iterate over all items
    // the following approach allows to throw an error when two added objects are the same
    // (not only compare existing items with old ones)

    for (var _target2 = self, _index2 = 0, item, _l2 = _target2.length; item = _target2[_index2], _index2 < _l2; _index2++) {
        if (item && typeof item === 'object') {
            var itemDef = defs.get(item);
            var alreadyRenderedNode = void 0;

            if (itemDef) {
                alreadyRenderedNode = getAlreadyRendered({
                    item: item,
                    selfDef: selfDef
                });
            }

            if (alreadyRenderedNode) {
                // if an item is already rendered (old item)
                if (itemDef.id in alreadyRenderedMap) {
                    // if an item is rendered twice throw an error
                    throw matreshkaError('array:add_render_twice');
                }

                alreadyRenderedMap[itemDef.id] = true;

                container.appendChild(alreadyRenderedNode);
            } else {
                // this is newly added item
                var _renderItemNode = renderItemNode({
                    selfDef: selfDef,
                    self: self,
                    item: item,
                    eventOptions: eventOptions
                }),
                    node = _renderItemNode.node,
                    itemEventOptions = _renderItemNode.itemEventOptions;

                if (node) {
                    // itemDef is defined at renderItemNode if not defined before
                    // reload this variable
                    itemDef = itemDef || defs.get(item);

                    if (itemDef.id in alreadyRenderedMap) {
                        // if newly added item is rendered twice throw an error
                        throw matreshkaError('array:add_render_twice');
                    }

                    alreadyRenderedMap[itemDef.id] = true;

                    container.appendChild(node);

                    if (!silent) {
                        triggerOne(item, 'afterrender', itemEventOptions);
                    }
                }
            }
        }
    }
}
//# sourceMappingURL=processrecreate.js.map