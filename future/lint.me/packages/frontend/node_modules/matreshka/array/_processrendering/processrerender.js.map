{"version":3,"sources":["../../../src/array/_processrendering/processrerender.js"],"names":["processRerender","self","selfDef","eventOptions","container","forceRerender","silent","i","length","item","alreadyRenderedNode","getAlreadyRendered","appendChild","contains","removeChild","renderItemNode","node","itemEventOptions","triggerOne"],"mappings":";;iCAA+B,sB;;6BACJ,kB;;yBACJ,2B;;AAEvB;AACA;AACA;iBACwBA,e;AAAT,SAASA,eAAT,OAKZ;AAAA,QAJCC,IAID,QAJCA,IAID;AAAA,QAHCC,OAGD,QAHCA,OAGD;AAAA,QAFCC,YAED,QAFCA,YAED;AAAA,QADCC,SACD,QADCA,SACD;AAAA,QACSC,aADT,GACmCF,YADnC,CACSE,aADT;AAAA,QACwBC,MADxB,GACmCH,YADnC,CACwBG,MADxB;;AAGC;;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,KAAKO,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,YAAME,OAAOR,KAAKM,CAAL,CAAb;AACA,YAAIE,QAAQ,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAClC,gBAAMC,sBAAsBC,mBAAmB;AAC3CF,0BAD2C;AAE3CP;AAF2C,aAAnB,CAA5B;;AAKA;AACA;AACA,gBAAI,CAACG,aAAD,IAAkBK,mBAAtB,EAA2C;AACvCN,0BAAUQ,WAAV,CAAsBF,mBAAtB;AACA;AACH;;AAED;AACA;AACA,gBAAIA,mBAAJ,EAAyB;AACrB,oBAAIN,UAAUS,QAAV,CAAmBH,mBAAnB,CAAJ,EAA6C;AACzCN,8BAAUU,WAAV,CAAsBJ,mBAAtB;AACH;AACJ;;AAED;;AArBkC,kCAsBCK,eAAe;AAC9Cb,gCAD8C;AAE9CD,0BAF8C;AAG9CQ,0BAH8C;AAI9CN;AAJ8C,aAAf,CAtBD;AAAA,gBAsB1Ba,IAtB0B,mBAsB1BA,IAtB0B;AAAA,gBAsBpBC,gBAtBoB,mBAsBpBA,gBAtBoB;;AA6BlC,gBAAID,IAAJ,EAAU;AACNZ,0BAAUQ,WAAV,CAAsBI,IAAtB;;AAEA,oBAAI,CAACV,MAAL,EAAa;AACTY,+BAAWT,IAAX,EAAiB,aAAjB,EAAgCQ,gBAAhC;AACH;AACJ;AACJ;AACJ;AACJ","file":"processrerender.js","sourcesContent":["import getAlreadyRendered from './getalreadyrendered';\nimport renderItemNode from './renderitemnode';\nimport triggerOne from '../../trigger/_triggerone';\n\n// this function re-inserts rendered DOM nodes of items\n// if they are rendered and forceRerender is falsy\n// and renders array items from scratch if they aren't rendered yet or forceRerender is truthy\nexport default function processRerender({\n    self,\n    selfDef,\n    eventOptions,\n    container\n}) {\n    const { forceRerender, silent } = eventOptions;\n\n    // iterate over all items\n    for (let i = 0; i < self.length; i++) {\n        const item = self[i];\n        if (item && typeof item === 'object') {\n            const alreadyRenderedNode = getAlreadyRendered({\n                item,\n                selfDef\n            });\n\n            // if item is already rendered and forceRerender is falsy then re-insert DOM node\n            // go to the next cycle iteration then\n            if (!forceRerender && alreadyRenderedNode) {\n                container.appendChild(alreadyRenderedNode);\n                continue;\n            }\n\n            // node removal is called when an item is rendered\n            // and forceRerender is truty\n            if (alreadyRenderedNode) {\n                if (container.contains(alreadyRenderedNode)) {\n                    container.removeChild(alreadyRenderedNode);\n                }\n            }\n\n            // render new node\n            const { node, itemEventOptions } = renderItemNode({\n                selfDef,\n                self,\n                item,\n                eventOptions\n            });\n\n            if (node) {\n                container.appendChild(node);\n\n                if (!silent) {\n                    triggerOne(item, 'afterrender', itemEventOptions);\n                }\n            }\n        }\n    }\n}\n"]}