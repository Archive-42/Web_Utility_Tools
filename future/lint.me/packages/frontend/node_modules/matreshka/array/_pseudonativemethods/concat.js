'use strict';

var apply = require('../../_helpers/apply');

// the method works just like Array.prototype.concat but
// - flattens both Array and Matreshka.Array
// - returns Matreshka.Array
module.exports = concat;
function concat() {
    // fix circular dependency issue
    var MatreshkaArray = require('../');

    var args = Array(arguments.length);

    // convert all instances of Matreshka.Array to Array

    // call original concat method
    for (var _target = arguments, index = 0, arg, _l = _target.length; arg = _target[index], index < _l; index++) {
        if (arg && typeof arg === 'object' && arg.isMatreshkaArray) {
            args[index] = arg.toJSON(false);
        } else {
            args[index] = arg;
        }
    }

    var nativeCallResult = apply(Array.prototype.concat, this.toJSON(false), args);

    // convert returned value to Matreshka.Array
    var result = new MatreshkaArray();

    for (var _target2 = nativeCallResult, index = 0, item, _l2 = _target2.length; item = _target2[index], index < _l2; index++) {
        result[index] = item;
    }

    result.length = nativeCallResult.length;

    return result;
}
//# sourceMappingURL=concat.js.map