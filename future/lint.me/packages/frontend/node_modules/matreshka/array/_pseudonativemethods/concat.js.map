{"version":3,"sources":["../../../src/array/_pseudonativemethods/concat.js"],"names":["concat","MatreshkaArray","require","args","Array","arguments","length","index","arg","isMatreshkaArray","toJSON","nativeCallResult","apply","prototype","result","item"],"mappings":";;oBAAkB,sB;;AAElB;AACA;AACA;iBACwBA,M;AAAT,SAASA,MAAT,GAAkB;AAC7B;AACA,QAAMC,iBAAiBC,QAAQ,KAAR,CAAvB;;AAEA,QAAMC,OAAOC,MAAMC,UAAUC,MAAhB,CAAb;;AAEA;;AASA;AAf6B,uBAOhBD,SAPgB,EAOCE,KAPD,MAOJC,GAPI,uBAOJA,GAPI,WAOCD,KAPD,GAOCA,KAPD,OAOCA,KAPD,IAOW;AACpC,YAAIC,OAAO,OAAOA,GAAP,KAAe,QAAtB,IAAkCA,IAAIC,gBAA1C,EAA4D;AACxDN,iBAAKI,KAAL,IAAcC,IAAIE,MAAJ,CAAW,KAAX,CAAd;AACH,SAFD,MAEO;AACHP,iBAAKI,KAAL,IAAcC,GAAd;AACH;AACJ;;AAGD,QAAMG,mBAAmBC,MAAMR,MAAMS,SAAN,CAAgBb,MAAtB,EAA8B,KAAKU,MAAL,CAAY,KAAZ,CAA9B,EAAkDP,IAAlD,CAAzB;;AAEA;AACA,QAAMW,SAAS,IAAIb,cAAJ,EAAf;;AAnB6B,wBAoBhBU,gBApBgB,EAoBSJ,KApBT,MAoBGQ,IApBH,yBAoBGA,IApBH,YAoBSR,KApBT,GAoBSA,KApBT,QAoBSA,KApBT,IAoBmB;AAC5CO,eAAOP,KAAP,IAAgBQ,IAAhB;AACH;;AAEDD,WAAOR,MAAP,GAAgBK,iBAAiBL,MAAjC;;AAEA,WAAOQ,MAAP;AACH","file":"concat.js","sourcesContent":["import apply from '../../_helpers/apply';\n\n// the method works just like Array.prototype.concat but\n// - flattens both Array and Matreshka.Array\n// - returns Matreshka.Array\nexport default function concat() {\n    // fix circular dependency issue\n    const MatreshkaArray = require('../');\n\n    const args = Array(arguments.length);\n\n    // convert all instances of Matreshka.Array to Array\n    nofn.forEach(arguments, (arg, index) => {\n        if (arg && typeof arg === 'object' && arg.isMatreshkaArray) {\n            args[index] = arg.toJSON(false);\n        } else {\n            args[index] = arg;\n        }\n    });\n\n    // call original concat method\n    const nativeCallResult = apply(Array.prototype.concat, this.toJSON(false), args);\n\n    // convert returned value to Matreshka.Array\n    const result = new MatreshkaArray();\n    nofn.forEach(nativeCallResult, (item, index) => {\n        result[index] = item;\n    });\n\n    result.length = nativeCallResult.length;\n\n    return result;\n}\n"]}