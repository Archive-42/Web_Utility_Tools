'use strict';

var initMK = require('../../_core/init');

var reportModified = require('../_reportmodified');

// creates methods: push, unshift, push_, unshift_
module.exports = createAddingMethod;
function createAddingMethod(name, hasOptions) {
    return function pseudoNativeMethod() {
        var _initMK = initMK(this),
            itemMediator = _initMK.itemMediator;
        // +hasOptions is converted to 0 or 1 depending on its value (false/true)


        var argsLength = arguments.length - +hasOptions;
        var args = Array(argsLength);
        var givenEventOptions = hasOptions ? arguments[arguments.length - 1] : null;
        var useMediator = typeof itemMediator === 'function' && (!givenEventOptions || !givenEventOptions.skipItemMediator);
        var isPush = name === 'push';
        var length = this.length;

        // if no arguments are passed

        if (!argsLength) {
            return length;
        }

        // convert arguments to array and call item mediator on every item if it's possible
        for (var i = 0; i < argsLength; i++) {
            var arg = arguments[i];
            if (useMediator) {
                var index = isPush ? i + length : i;
                args[i] = itemMediator(arg, index);
            } else {
                args[i] = arg;
            }
        }

        if (isPush) {
            // insert new items to the end of array
            for (var _i = 0; _i < argsLength; _i++) {
                this[length + _i] = args[_i];
            }
        } else {
            // move current items to new indexes
            for (var _i2 = length - 1; _i2 >= 0; _i2--) {
                this[argsLength + _i2] = this[_i2];
            }
            // insert new items to the begin of array
            for (var _i3 = 0; _i3 < argsLength; _i3++) {
                this[_i3] = args[_i3];
            }
        }

        // update length
        length += argsLength;
        this.length = length;

        var eventOptions = {
            method: name,
            self: this,
            added: args,
            removed: []
        };

        // extend event options by custom event options if they are given
        if (hasOptions) {
            if (givenEventOptions && typeof givenEventOptions === 'object') {
                var _result = eventOptions;

                for (var _source2 = givenEventOptions, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i5 = 0, _key2; _i5 < _l2; _i5++) {
                    _key2 = _keys2[_i5];
                    _result[_key2] = _source2[_key2];
                }
            }
        }

        reportModified(this, eventOptions);

        return length;
    };
}
//# sourceMappingURL=createaddingmethod.js.map