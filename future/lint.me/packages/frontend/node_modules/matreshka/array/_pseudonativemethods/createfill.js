'use strict';

var apply = require('../../_helpers/apply');

var reportModified = require('../_reportmodified');

var matreshkaError = require('../../_helpers/matreshkaerror');

module.exports = createFill;
function createFill(hasOptions) {
    return function fill(value) {
        var originalFill = Array.prototype.fill;

        /* istanbul ignore if  */
        if (typeof originalFill !== 'function') {
            throw matreshkaError('array:nonexistent_method', { method: 'fill' });
        }
        // +hasOptions is converted to 0 or 1 depending on its value (false/true)
        var argsLength = arguments.length - +hasOptions;
        var args = Array(argsLength);
        var givenEventOptions = hasOptions ? arguments[arguments.length - 1] : null;

        for (var i = 0; i < argsLength; i++) {
            args[i] = arguments[i];
        }

        apply(originalFill, this, args);

        var eventOptions = {
            method: 'fill',
            self: this,
            added: [value],
            removed: []
        };

        // extend event options by custom event options if they are given
        if (hasOptions) {
            if (givenEventOptions && typeof givenEventOptions === 'object') {
                var _result = eventOptions;

                for (var _source2 = givenEventOptions, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i2 = 0, _key2; _i2 < _l2; _i2++) {
                    _key2 = _keys2[_i2];
                    _result[_key2] = _source2[_key2];
                }
            }
        }

        reportModified(this, eventOptions);

        return this;
    };
}
//# sourceMappingURL=createfill.js.map