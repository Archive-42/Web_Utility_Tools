{"version":3,"sources":["../../../src/array/_pseudonativemethods/createpseudonativemethod.js"],"names":["arrayPrototype","Array","prototype","createPseudoNativeMethod","name","hasOptions","pseudoNativeMethod","callback","thisArg","call","a","b","toMatreshkaArray","originalMethod","matreshkaError","method","separator","searchElement","fromIndex","apply","arguments","createSortingMethod","createRemovingMethod","createAddingMethod","createSplice","createCopyWithin","createFill","undefined"],"mappings":"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","file":"createpseudonativemethod.js","sourcesContent":["import toMatreshkaArray from '../_tomatreshkaarray';\nimport createSortingMethod from './createsortingmethod';\nimport createRemovingMethod from './createremovingmethod';\nimport createAddingMethod from './createaddingmethod';\nimport createSplice from './createsplice';\nimport createCopyWithin from './createcopywithin';\nimport createFill from './createfill';\nimport apply from '../../_helpers/apply';\nimport matreshkaError from '../../_helpers/matreshkaerror';\n\nconst arrayPrototype = Array.prototype;\n\n// creates pseudo native method and returns it (push, push_, sort, sort_...)\nexport default function createPseudoNativeMethod(name, hasOptions = false) {\n    switch (name) {\n        case 'forEach':\n            return function pseudoNativeMethod(callback, thisArg) {\n                arrayPrototype[name].call(this, callback, thisArg);\n                // return this for nicer chain calls\n                return this;\n            };\n        case 'map':\n        case 'filter':\n        case 'slice':\n            // TODO: Improve readability of pseudoNativeMethod, arguments \"a, b\" look not good\n            return function pseudoNativeMethod(a, b) {\n                return toMatreshkaArray(arrayPrototype[name].call(this, a, b));\n            };\n        case 'every':\n        case 'some':\n        case 'findIndex':\n        case 'find':\n            return function pseudoNativeMethod(callback, thisArg) {\n                const originalMethod = arrayPrototype[name];\n\n                /* istanbul ignore if  */\n                if (typeof originalMethod !== 'function') {\n                    throw matreshkaError('array:nonexistent_method', { method: name });\n                }\n                return originalMethod.call(this, callback, thisArg);\n            };\n        case 'join':\n            return function pseudoNativeMethod(separator = ',') {\n                return arrayPrototype[name].call(this, separator);\n            };\n        case 'indexOf':\n        case 'lastIndexOf':\n        case 'includes':\n            return function pseudoNativeMethod(searchElement, fromIndex) {\n                const originalMethod = arrayPrototype[name];\n\n                /* istanbul ignore if  */\n                if (typeof originalMethod !== 'function') {\n                    throw matreshkaError('array:nonexistent_method', { method: name });\n                }\n\n                if (typeof fromIndex === 'undefined') {\n                    return originalMethod.call(this, searchElement);\n                }\n\n                return originalMethod.call(this, searchElement, fromIndex);\n            };\n        case 'reduce':\n        case 'reduceRight':\n            return function pseudoNativeMethod() {\n                return apply(arrayPrototype[name], this, arguments);\n            };\n        case 'sort':\n        case 'reverse':\n            return createSortingMethod(name, hasOptions);\n        case 'pop':\n        case 'shift':\n            return createRemovingMethod(name, hasOptions);\n        case 'push':\n        case 'unshift':\n            return createAddingMethod(name, hasOptions);\n        case 'splice':\n            return createSplice(hasOptions);\n        case 'copyWithin':\n            return createCopyWithin(hasOptions);\n        case 'fill':\n            return createFill(hasOptions);\n        default:\n            return undefined;\n    }\n}\n"]}