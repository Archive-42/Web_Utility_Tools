'use strict';

var initMK = require('../../_core/init');

var reportModified = require('../_reportmodified');

// creates removing method and returns it (pop, shift, pop_, shift_)
module.exports = createRemovingMethod;
function createRemovingMethod(name, hasOptions) {
    return function pseudoNativeMethod(givenEventOptions) {
        if (!this.length) {
            return undefined;
        }
        initMK(this);

        // call original method
        var returns = Array.prototype[name].call(this);
        var eventOptions = {
            method: name,
            self: this,
            added: [],
            removed: [returns]
        };

        // extend event options by custom event options if they are given
        if (hasOptions) {
            if (givenEventOptions && typeof givenEventOptions === 'object') {
                var _result = eventOptions;

                for (var _source2 = givenEventOptions, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i2 = 0, _key2; _i2 < _l2; _i2++) {
                    _key2 = _keys2[_i2];
                    _result[_key2] = _source2[_key2];
                }
            }
        }

        reportModified(this, eventOptions);

        return returns;
    };
}
//# sourceMappingURL=createremovingmethod.js.map