'use strict';

var initMK = require('../../_core/init');

var reportModified = require('../_reportmodified');

var toMatreshkaArray = require('../_tomatreshkaarray');

var apply = require('../../_helpers/apply');

// creates splice or splice_ method and returns it
// TODO: Improve readability of createSplice function
module.exports = createSplice;
function createSplice(hasOptions) {
    return function pseudoNativeMethod() {
        var _initMK = initMK(this),
            itemMediator = _initMK.itemMediator;

        var functionArguments = arguments;
        var argsLength = functionArguments.length - +hasOptions;
        var args = Array(argsLength);
        var givenEventOptions = hasOptions ? functionArguments[functionArguments.length - 1] : null;
        var useMediator = typeof itemMediator === 'function' && (!givenEventOptions || !givenEventOptions.skipItemMediator);
        var added = [];
        var start = args[0];
        var length = this.length;


        start = start < 0 ? length + start : start;

        // convert arguments to array and call item mediator on every new item if it's possible
        args[0] = functionArguments[0];
        args[1] = functionArguments[1];
        for (var i = 2; i < argsLength; i++) {
            var arg = functionArguments[i];
            if (useMediator) {
                args[i] = itemMediator(arg, start + (i - 2));
            } else {
                args[i] = arg;
            }

            added[i - 2] = args[i];
        }

        // call original method
        // TODO: Change array manually in splice method for better performance
        var returns = apply(Array.prototype.splice, this, args);
        // removed items mean returned items
        var removed = returns;

        // if something is added or removed
        if (added.length || removed.length) {
            var eventOptions = {
                added: added,
                removed: removed,
                method: 'splice',
                self: this
            };

            // extend event options by custom event options if they are given
            if (hasOptions) {
                if (givenEventOptions && typeof givenEventOptions === 'object') {
                    var _result = eventOptions;

                    for (var _source2 = givenEventOptions, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i2 = 0, _key2; _i2 < _l2; _i2++) {
                        _key2 = _keys2[_i2];
                        _result[_key2] = _source2[_key2];
                    }
                }
            }

            reportModified(this, eventOptions);
        }

        return toMatreshkaArray(returns);
    };
}
//# sourceMappingURL=createsplice.js.map