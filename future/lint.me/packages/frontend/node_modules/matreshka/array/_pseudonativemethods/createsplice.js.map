{"version":3,"sources":["../../../src/array/_pseudonativemethods/createsplice.js"],"names":["createSplice","hasOptions","pseudoNativeMethod","initMK","itemMediator","functionArguments","arguments","argsLength","length","args","Array","givenEventOptions","useMediator","skipItemMediator","added","start","i","arg","returns","apply","prototype","splice","removed","eventOptions","method","self","reportModified","toMatreshkaArray"],"mappings":";;qBAAmB,kB;;6BACQ,oB;;+BACE,sB;;oBACX,sB;;AAElB;AACA;iBACwBA,Y;AAAT,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAC7C,WAAO,SAASC,kBAAT,GAA8B;AAAA,sBACRC,OAAO,IAAP,CADQ;AAAA,YACzBC,YADyB,WACzBA,YADyB;;AAEjC,YAAMC,oBAAoBC,SAA1B;AACA,YAAMC,aAAaF,kBAAkBG,MAAlB,GAA2B,CAACP,UAA/C;AACA,YAAMQ,OAAOC,MAAMH,UAAN,CAAb;AACA,YAAMI,oBAAoBV,aACpBI,kBAAkBA,kBAAkBG,MAAlB,GAA2B,CAA7C,CADoB,GAEpB,IAFN;AAGA,YAAMI,cAAc,OAAOR,YAAP,KAAwB,UAAxB,KACZ,CAACO,iBAAD,IAAsB,CAACA,kBAAkBE,gBAD7B,CAApB;AAEA,YAAMC,QAAQ,EAAd;AACA,YAAIC,QAAQN,KAAK,CAAL,CAAZ;AAXiC,YAYzBD,MAZyB,GAYd,IAZc,CAYzBA,MAZyB;;;AAcjCO,gBAAQA,QAAQ,CAAR,GAAYP,SAASO,KAArB,GAA6BA,KAArC;;AAEA;AACAN,aAAK,CAAL,IAAUJ,kBAAkB,CAAlB,CAAV;AACAI,aAAK,CAAL,IAAUJ,kBAAkB,CAAlB,CAAV;AACA,aAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIT,UAApB,EAAgCS,GAAhC,EAAqC;AACjC,gBAAMC,MAAMZ,kBAAkBW,CAAlB,CAAZ;AACA,gBAAIJ,WAAJ,EAAiB;AACbH,qBAAKO,CAAL,IAAUZ,aAAaa,GAAb,EAAkBF,SAASC,IAAI,CAAb,CAAlB,CAAV;AACH,aAFD,MAEO;AACHP,qBAAKO,CAAL,IAAUC,GAAV;AACH;;AAEDH,kBAAME,IAAI,CAAV,IAAeP,KAAKO,CAAL,CAAf;AACH;;AAED;AACA;AACA,YAAME,UAAUC,MAAMT,MAAMU,SAAN,CAAgBC,MAAtB,EAA8B,IAA9B,EAAoCZ,IAApC,CAAhB;AACA;AACA,YAAMa,UAAUJ,OAAhB;;AAEA;AACA,YAAIJ,MAAMN,MAAN,IAAgBc,QAAQd,MAA5B,EAAoC;AAChC,gBAAMe,eAAe;AACjBT,4BADiB;AAEjBQ,gCAFiB;AAGjBE,wBAAQ,QAHS;AAIjBC,sBAAM;AAJW,aAArB;;AAOA;AACA,gBAAIxB,UAAJ,EAAgB;AACZ,oBAAIU,qBAAqB,OAAOA,iBAAP,KAA6B,QAAtD,EAAgE;AAAA,kCAChDY,YADgD;;AAAA,wCAClCZ,iBADkC;AAAA;AAAA;AAAA;AAE/D;AACJ;;AAEDe,2BAAe,IAAf,EAAqBH,YAArB;AACH;;AAED,eAAOI,iBAAiBT,OAAjB,CAAP;AACH,KAxDD;AAyDH","file":"createsplice.js","sourcesContent":["import initMK from '../../_core/init';\nimport reportModified from '../_reportmodified';\nimport toMatreshkaArray from '../_tomatreshkaarray';\nimport apply from '../../_helpers/apply';\n\n// creates splice or splice_ method and returns it\n// TODO: Improve readability of createSplice function\nexport default function createSplice(hasOptions) {\n    return function pseudoNativeMethod() {\n        const { itemMediator } = initMK(this);\n        const functionArguments = arguments;\n        const argsLength = functionArguments.length - +hasOptions;\n        const args = Array(argsLength);\n        const givenEventOptions = hasOptions\n            ? functionArguments[functionArguments.length - 1]\n            : null;\n        const useMediator = typeof itemMediator === 'function'\n            && (!givenEventOptions || !givenEventOptions.skipItemMediator);\n        const added = [];\n        let start = args[0];\n        const { length } = this;\n\n        start = start < 0 ? length + start : start;\n\n        // convert arguments to array and call item mediator on every new item if it's possible\n        args[0] = functionArguments[0];\n        args[1] = functionArguments[1];\n        for (let i = 2; i < argsLength; i++) {\n            const arg = functionArguments[i];\n            if (useMediator) {\n                args[i] = itemMediator(arg, start + (i - 2));\n            } else {\n                args[i] = arg;\n            }\n\n            added[i - 2] = args[i];\n        }\n\n        // call original method\n        // TODO: Change array manually in splice method for better performance\n        const returns = apply(Array.prototype.splice, this, args);\n        // removed items mean returned items\n        const removed = returns;\n\n        // if something is added or removed\n        if (added.length || removed.length) {\n            const eventOptions = {\n                added,\n                removed,\n                method: 'splice',\n                self: this\n            };\n\n            // extend event options by custom event options if they are given\n            if (hasOptions) {\n                if (givenEventOptions && typeof givenEventOptions === 'object') {\n                    nofn.assign(eventOptions, givenEventOptions);\n                }\n            }\n\n            reportModified(this, eventOptions);\n        }\n\n        return toMatreshkaArray(returns);\n    };\n}\n"]}