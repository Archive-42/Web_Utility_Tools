'use strict';

var defs = require('../_core/defs');

var triggerOne = require('../trigger/_triggerone');

var processRendering = require('./_processrendering');

// fires events and triggers rendering logic
module.exports = reportModified;
function reportModified(self, eventOptions) {
    var added = eventOptions.added,
        removed = eventOptions.removed,
        silent = eventOptions.silent,
        method = eventOptions.method,
        dontRender = eventOptions.dontRender;

    var addedLength = added.length;
    var removedLength = removed.length;
    var modified = addedLength || removedLength || method === 'sort' || method === 'reverse';

    var _defs$get = defs.get(self),
        events = _defs$get.events;

    var _self$renderIfPossibl = self.renderIfPossible,
        renderIfPossible = _self$renderIfPossibl === undefined ? true : _self$renderIfPossibl;

    var asteriskAddEvtName = '_asterisk:add';
    var asteriskRemoveEvtName = '_asterisk:remove';

    // if something is added and an array has delegated "asterisk" events
    // then attatch delegated event handlers to newly added items
    if (addedLength && events[asteriskAddEvtName]) {
        triggerOne(self, asteriskAddEvtName, eventOptions);
    }

    // if something is removed and an array has delegated "asterisk" events
    // then remove delegated event handlers from removed items
    if (removedLength && events[asteriskRemoveEvtName]) {
        triggerOne(self, asteriskRemoveEvtName, eventOptions);
    }

    if (!silent) {
        // fire additional event name (like "push")
        if (events[method]) {
            triggerOne(self, method, eventOptions);
        }

        // if something is added then fire add and addone events
        if (addedLength) {
            if (events.add) {
                triggerOne(self, 'add', eventOptions);
            }

            if (events.addone) {
                for (var i = 0; i < addedLength; i++) {
                    triggerOne(self, 'addone', {
                        self: self,
                        addedItem: added[i]
                    });
                }
            }
        }

        // if something is removed then fire add and addone events
        if (removedLength) {
            if (events.remove) {
                triggerOne(self, 'remove', eventOptions);
            }

            if (events.removeone) {
                for (var _i = 0; _i < removedLength; _i++) {
                    triggerOne(self, 'removeone', {
                        self: self,
                        removedItem: removed[_i]
                    });
                }
            }
        }

        // modify event says that something is added or removed
        if (events.modify) {
            triggerOne(self, 'modify', eventOptions);
        }
    }

    // trigger rendering logic if possible
    if (modified && !dontRender && renderIfPossible) {
        processRendering({
            self: self,
            eventOptions: eventOptions
        });
    }
}
//# sourceMappingURL=_reportmodified.js.map