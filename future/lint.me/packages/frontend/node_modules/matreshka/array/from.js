'use strict';

var cheapRecreate = require('./_cheaprecreate');

// creates a new Matreshka.Array instance from an array-like or iterable object
module.exports = from;
function from(arrayLike, mapFn, thisArg) {
    // allow to inherit this method by child classes
    // require('./') fixes circular ref issue
    var ParentClass = typeof this === 'function' ? this : require('./');

    var result = new ParentClass();
    var length = arrayLike.length;
    var arrayFrom = Array.from;
    var newItems = void 0;

    /* istanbul ignore else */
    if (typeof arrayFrom === 'function') {
        // if Array.from exist, let it do all the job (work with iterable objects etc)
        newItems = arrayFrom(arrayLike, mapFn, thisArg);
    } else {
        // convert array-like object for older browsers
        // @IE
        newItems = Array(length);

        for (var i = 0; i < length; i++) {
            if (typeof mapFn === 'function') {
                newItems[i] = mapFn.call(thisArg, arrayLike[i], i, arrayLike);
            } else {
                newItems[i] = arrayLike[i];
            }
        }
    }

    return cheapRecreate(result, newItems);
}
//# sourceMappingURL=from.js.map