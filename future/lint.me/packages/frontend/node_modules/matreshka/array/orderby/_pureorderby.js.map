{"version":3,"sources":["../../../src/array/orderby/_pureorderby.js"],"names":["pureOrderBy","arr","givenKeys","orders","defaultOrder","commonOrder","Array","length","result","i","keys","sort","a","b","key","order"],"mappings":";;AAAA;iBACwBA,W;AAAT,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6C;AACxD,QAAI,YAAYF,GAAZ,IAAmB,OAAOA,GAAP,KAAe,QAAtC,EAAgD;AAAA;AAC5C,gBAAMG,eAAe,KAArB;AACA,gBAAIC,oBAAJ;;AAEA,gBAAI,EAAEF,kBAAkBG,KAApB,CAAJ,EAAgC;AAC5BD,8BAAcF,UAAUC,YAAxB;AACH;;AAN2C,gBAQpCG,MARoC,GAQzBN,GARyB,CAQpCM,MARoC;;AAS5C,gBAAMC,SAASF,MAAMC,MAAN,CAAf;;AAEA,iBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4BE,GAA5B,EAAiC;AAC7BD,uBAAOC,CAAP,IAAYR,IAAIQ,CAAJ,CAAZ;AACH;;AAED,gBAAI,CAACP,SAAL,EAAgB;AACZ;AAAA,uBAAOM;AAAP;AACH;;AAED,gBAAME,OAAOR,qBAAqBI,KAArB,GAA6BJ,SAA7B,GAAyC,CAACA,SAAD,CAAtD;;AAEA;AAAA,mBAAOM,OAAOG,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzB,wBAAID,KAAKC,CAAT,EAAY;AACR,6BAAK,IAAIJ,KAAI,CAAb,EAAgBA,KAAIC,KAAKH,MAAzB,EAAiCE,IAAjC,EAAsC;AAClC,gCAAMK,MAAMJ,KAAKD,EAAL,CAAZ;AACA,gCAAMM,QAAQ,CAACV,eAAeF,OAAOM,EAAP,CAAhB,MAA+B,MAA/B,GAAwC,CAAC,CAAzC,GAA6C,CAA3D;;AAEA,gCAAIG,EAAEE,GAAF,IAASD,EAAEC,GAAF,CAAb,EAAqB;AACjB,uCAAO,CAACC,KAAR;AACH,6BAFD,MAEO,IAAIH,EAAEE,GAAF,IAASD,EAAEC,GAAF,CAAb,EAAqB;AACxB,uCAAOC,KAAP;AACH;AACJ;AACJ;;AAED,2BAAO,CAAP;AACH,iBAfM;AAAP;AArB4C;;AAAA;AAqC/C;;AAED,WAAO,EAAP;AACH","file":"_pureorderby.js","sourcesContent":["// the function orders by given order data any array-like object\nexport default function pureOrderBy(arr, givenKeys, orders) {\n    if ('length' in arr && typeof arr === 'object') {\n        const defaultOrder = 'asc';\n        let commonOrder;\n\n        if (!(orders instanceof Array)) {\n            commonOrder = orders || defaultOrder;\n        }\n\n        const { length } = arr;\n        const result = Array(length);\n\n        for (let i = 0; i < length; i++) {\n            result[i] = arr[i];\n        }\n\n        if (!givenKeys) {\n            return result;\n        }\n\n        const keys = givenKeys instanceof Array ? givenKeys : [givenKeys];\n\n        return result.sort((a, b) => {\n            if (a && b) {\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    const order = (commonOrder || orders[i]) !== 'desc' ? -1 : 1;\n\n                    if (a[key] > b[key]) {\n                        return -order;\n                    } else if (a[key] < b[key]) {\n                        return order;\n                    }\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    return [];\n}\n"]}