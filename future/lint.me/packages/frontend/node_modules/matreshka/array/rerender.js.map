{"version":3,"sources":["../../src/array/rerender.js"],"names":["rerender","eventOptions","renderIfPossible","method","added","removed","processRendering","self"],"mappings":";;+BAA6B,qB;;AAE7B;AACA;iBACwBA,Q;AAAT,SAASA,QAAT,GAAqC;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;AAAA,4BACZ,IADY,CACxCC,gBADwC;AAAA,QACxCA,gBADwC,qCACrB,IADqB;;AAEhD,QAAIA,gBAAJ,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAIVC,MAJU,GAIF;AAJE,gBAKVC,KALU,GAKH;AALG,gBAMVC,OANU,GAMD;;AANC,uBAOPJ,YAPO;AAAA;AAAA;AAAA;;AAClBK,yBAAiB;AACbC,kBAAM,IADO;AAEbN;AAFa,SAAjB;AASH;;AAED,WAAO,IAAP;AACH","file":"rerender.js","sourcesContent":["import processRendering from './_processrendering';\n\n// rerenders not rendered items in an array\n// force rerender when forceRerender event option is truthy\nexport default function rerender(eventOptions = {}) {\n    const { renderIfPossible = true } = this;\n    if (renderIfPossible) {\n        processRendering({\n            self: this,\n            eventOptions: {\n                method: 'rerender',\n                added: [],\n                removed: [],\n                ...eventOptions\n            }\n        });\n    }\n\n    return this;\n}\n"]}