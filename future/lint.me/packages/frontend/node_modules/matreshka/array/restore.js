'use strict';

var initMK = require('../_core/init');

var matreshkaError = require('../_helpers/matreshkaerror');

var bindNode = require('../bindnode');

var triggerOne = require('../trigger/_triggerone');

var getNodes = require('../bindnode/_getnodes');

// restores Matreshka.Array from external nodes
module.exports = restore;
function restore(selector) {
    var _this = this;

    var eventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var selfDef = initMK(this);
    var Model = this.Model;
    var silent = eventOptions.silent;

    var newItems = [];
    var nodes = void 0;

    if (typeof selector === 'string') {
        // get nodes by selector
        nodes = getNodes(this, selector);
    } else {
        // get nodes from rendering container
        var container = this.nodes.container || this.nodes.sandbox;

        if (container) {
            nodes = container.children;
        } else {
            // no container is bound, throw an error
            throw matreshkaError('restore:no_nodes');
        }
    }

    // recreate an array but don't render newly added items
    for (var _target = nodes, index = 0, node, _l = _target.length; node = _target[index], index < _l; index++) {
        var _itemDef$renderedInAr;

        var item = Model ? new Model({}, _this, index) : {}; // create new item
        var bindRenderedAsSandbox = item.bindRenderedAsSandbox;

        var itemDef = initMK(item);

        itemDef.renderedInArrays = (_itemDef$renderedInAr = {}, _itemDef$renderedInAr[selfDef.id] = node, _itemDef$renderedInAr);

        if (bindRenderedAsSandbox !== false) {
            bindNode(item, 'sandbox', node, null, eventOptions);
        }

        if (!silent) {
            // trigger needed events
            var itemEventOptions = {
                node: node,
                self: item,
                parentArray: _this
            };

            var onRender = item.onRender;
            var onItemRender = _this.onItemRender;


            if (onRender) {
                onRender.call(item, itemEventOptions);
            }

            if (onItemRender) {
                onItemRender.call(_this, item, itemEventOptions);
            }

            triggerOne(item, 'render', itemEventOptions);

            // call afterrender immediately because a node already exists in DOM tree
            triggerOne(item, 'afterrender', itemEventOptions);
        }

        newItems.push(item);
    }

    var _keys,
        _l2,
        _i,
        _source,
        _key,
        _result = {};

    _result.dontRender = true

    for (_source = eventOptions, _keys = Object.keys(_source), _l2 = _keys.length, _i = 0; _i < _l2; _i++) {
        _key = _keys[_i];
        _result[_key] = _source[_key];
    }

    return this.recreate(newItems, _result);
}
//# sourceMappingURL=restore.js.map