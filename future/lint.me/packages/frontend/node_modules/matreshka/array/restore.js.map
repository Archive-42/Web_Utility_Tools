{"version":3,"sources":["../../src/array/restore.js"],"names":["restore","selector","eventOptions","selfDef","initMK","Model","silent","newItems","nodes","getNodes","container","sandbox","children","matreshkaError","index","node","item","bindRenderedAsSandbox","itemDef","renderedInArrays","id","bindNode","itemEventOptions","self","parentArray","onRender","onItemRender","call","triggerOne","push","dontRender","recreate"],"mappings":";;qBAAmB,e;;6BACQ,4B;;uBACN,a;;yBACE,wB;;uBACF,uB;;AAErB;iBACwBA,O;AAAT,SAASA,OAAT,CAAiBC,QAAjB,EAA8C;AAAA;;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;;AACzD,QAAMC,UAAUC,OAAO,IAAP,CAAhB;AADyD,QAEjDC,KAFiD,GAEvC,IAFuC,CAEjDA,KAFiD;AAAA,QAGjDC,MAHiD,GAGtCJ,YAHsC,CAGjDI,MAHiD;;AAIzD,QAAMC,WAAW,EAAjB;AACA,QAAIC,cAAJ;;AAEA,QAAI,OAAOP,QAAP,KAAoB,QAAxB,EAAkC;AAC9B;AACAO,gBAAQC,SAAS,IAAT,EAAeR,QAAf,CAAR;AACH,KAHD,MAGO;AACH;AACA,YAAMS,YAAY,KAAKF,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWG,OAArD;;AAEA,YAAID,SAAJ,EAAe;AACXF,oBAAQE,UAAUE,QAAlB;AACH,SAFD,MAEO;AACH;AACA,kBAAMC,eAAe,kBAAf,CAAN;AACH;AACJ;;AA2CD;AA/DyD,uBAsB5CL,KAtB4C,EAsB9BM,KAtB8B,MAsBpCC,IAtBoC,uBAsBpCA,IAtBoC,WAsB9BD,KAtB8B,GAsB9BA,KAtB8B,OAsB9BA,KAtB8B,IAsBpB;AAAA;;AACjC,YAAME,OAAOX,QAAQ,IAAIA,KAAJ,CAAU,EAAV,SAAoBS,KAApB,CAAR,GAAqC,EAAlD,CADiC,CACqB;AADrB,YAEzBG,qBAFyB,GAECD,IAFD,CAEzBC,qBAFyB;;AAGjC,YAAMC,UAAUd,OAAOY,IAAP,CAAhB;;AAEAE,gBAAQC,gBAAR,sDACKhB,QAAQiB,EADb,IACkBL,IADlB;;AAIA,YAAIE,0BAA0B,KAA9B,EAAqC;AACjCI,qBAASL,IAAT,EAAe,SAAf,EAA0BD,IAA1B,EAAgC,IAAhC,EAAsCb,YAAtC;AACH;;AAED,YAAI,CAACI,MAAL,EAAa;AACT;AACA,gBAAMgB,mBAAmB;AACrBP,0BADqB;AAErBQ,sBAAMP,IAFe;AAGrBQ;AAHqB,aAAzB;;AAFS,gBAQDC,QARC,GAQYT,IARZ,CAQDS,QARC;AAAA,gBASDC,YATC,SASDA,YATC;;;AAWT,gBAAID,QAAJ,EAAc;AACVA,yBAASE,IAAT,CAAcX,IAAd,EAAoBM,gBAApB;AACH;;AAED,gBAAII,YAAJ,EAAkB;AACdA,6BAAaC,IAAb,QAAwBX,IAAxB,EAA8BM,gBAA9B;AACH;;AAEDM,uBAAWZ,IAAX,EAAiB,QAAjB,EAA2BM,gBAA3B;;AAEA;AACAM,uBAAWZ,IAAX,EAAiB,aAAjB,EAAgCM,gBAAhC;AACH;;AAEDf,iBAASsB,IAAT,CAAcb,IAAd;AACH;;AA7DwD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAiErDc,UAjEqD,GAiEzC;;AAjEyC,mBAkElD5B,YAlEkD;AAAA;AAAA;AAAA;;AAgEzD,WAAO,KAAK6B,QAAL,CAAcxB,QAAd,UAAP;AAIH","file":"restore.js","sourcesContent":["import initMK from '../_core/init';\nimport matreshkaError from '../_helpers/matreshkaerror';\nimport bindNode from '../bindnode';\nimport triggerOne from '../trigger/_triggerone';\nimport getNodes from '../bindnode/_getnodes';\n\n// restores Matreshka.Array from external nodes\nexport default function restore(selector, eventOptions = {}) {\n    const selfDef = initMK(this);\n    const { Model } = this;\n    const { silent } = eventOptions;\n    const newItems = [];\n    let nodes;\n\n    if (typeof selector === 'string') {\n        // get nodes by selector\n        nodes = getNodes(this, selector);\n    } else {\n        // get nodes from rendering container\n        const container = this.nodes.container || this.nodes.sandbox;\n\n        if (container) {\n            nodes = container.children;\n        } else {\n            // no container is bound, throw an error\n            throw matreshkaError('restore:no_nodes');\n        }\n    }\n\n    nofn.forEach(nodes, (node, index) => {\n        const item = Model ? new Model({}, this, index) : {}; // create new item\n        const { bindRenderedAsSandbox } = item;\n        const itemDef = initMK(item);\n\n        itemDef.renderedInArrays = {\n            [selfDef.id]: node\n        };\n\n        if (bindRenderedAsSandbox !== false) {\n            bindNode(item, 'sandbox', node, null, eventOptions);\n        }\n\n        if (!silent) {\n            // trigger needed events\n            const itemEventOptions = {\n                node,\n                self: item,\n                parentArray: this\n            };\n\n            const { onRender } = item;\n            const { onItemRender } = this;\n\n            if (onRender) {\n                onRender.call(item, itemEventOptions);\n            }\n\n            if (onItemRender) {\n                onItemRender.call(this, item, itemEventOptions);\n            }\n\n            triggerOne(item, 'render', itemEventOptions);\n\n            // call afterrender immediately because a node already exists in DOM tree\n            triggerOne(item, 'afterrender', itemEventOptions);\n        }\n\n        newItems.push(item);\n    });\n\n    // recreate an array but don't render newly added items\n    return this.recreate(newItems, {\n        dontRender: true,\n        ...eventOptions\n    });\n}\n"]}