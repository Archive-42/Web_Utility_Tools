{"version":3,"sources":["../../src/bindnode/_bindsinglenode.js"],"names":["spaceReg","bindSingleNode","object","givenBinder","binder","key","$nodes","node","eventOptions","propDef","silent","getValueOnBind","setValueOnBind","debounceSetValue","debounceGetValue","debounceSetValueOnBind","debounceGetValueOnBind","debounceSetValueDelay","debounceGetValueDelay","useExactBinder","bindings","value","bindingOptions","self","isUndefined","objectHandler","nodeHandler","length","isMatreshkaArray","matreshkaError","foundBinder","lookForBinder","getValue","setValue","on","initialize","call","syncNodeHandler","createNodeHandler","debouncedNodeHandler","debounce","split","evtName","addEventListener","syncObjectHandler","createObjectHandler","debouncedObjectHandler","addListener","skipChecks","push","extendedEventOptions","triggerOne"],"mappings":"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","file":"_bindsinglenode.js","sourcesContent":["import lookForBinder from '../lookforbinder';\nimport createNodeHandler from './_createnodehandler';\nimport createObjectHandler from './_createobjecthandler';\nimport triggerOne from '../trigger/_triggerone';\nimport addListener from '../on/_addlistener';\nimport debounce from '../_helpers/debounce';\nimport matreshkaError from '../_helpers/matreshkaerror';\n\nconst spaceReg = /\\s+/;\n\n// handles binding for single property & node\n// the function is used at bindNode\nexport default function bindSingleNode(object, {\n    binder: givenBinder,\n    key,\n    $nodes,\n    node,\n    eventOptions,\n    propDef\n}) {\n    const {\n        silent,\n        getValueOnBind,\n        setValueOnBind,\n        // TODO: We probably need some general flag to cancel or force debouncing\n        // ... which overrides the following flags (something like debounceBinding)\n        debounceSetValue = true,\n        debounceGetValue = true,\n        debounceSetValueOnBind = false,\n        debounceGetValueOnBind = false,\n        debounceSetValueDelay = 0,\n        debounceGetValueDelay = 0,\n        useExactBinder = false\n    } = eventOptions;\n    // create bindings array in property definition object\n    const bindings = propDef.bindings = propDef.bindings || [];\n    const { value } = propDef;\n    const bindingOptions = {\n        self: object,\n        key,\n        value,\n        $nodes,\n        node\n    };\n    let isUndefined = typeof value === 'undefined';\n    let binder;\n    let objectHandler;\n    let nodeHandler;\n\n    // do not allow to bind more than 2 nodes to \"sandbox\" (for all nodes)\n    // and \"container\" (for Matreshka.Array)\n    if (\n        bindings.length\n        && (key === 'sandbox' || (object.isMatreshkaArray && key === 'container'))\n    ) {\n        throw matreshkaError('binding:magic_props_nodes_length');\n    }\n\n    // get actual binder\n    if (givenBinder !== null) {\n        // by default binder passed to bindNode is extended by default binder\n        // useExactBinder turns this behavior off\n        if (useExactBinder) {\n            binder = givenBinder;\n        } else {\n            // getting default binder\n            const foundBinder = lookForBinder(node);\n\n            // if default binder is found\n            if (foundBinder) {\n                // extend found binder by given binder\n                if (givenBinder) {\n                    nofn.assign(foundBinder, givenBinder);\n                }\n\n                binder = foundBinder;\n            } else {\n                // default binder is not found\n                binder = givenBinder || {};\n            }\n        }\n    }\n\n    const { getValue, setValue, on, initialize } = binder;\n\n    // call binder.initialize\n    if (initialize) {\n        initialize.call(node, bindingOptions);\n    }\n\n    // add needed event handlers to given node when getValue is given\n    if (getValue) {\n        const syncNodeHandler = createNodeHandler({\n            object,\n            key,\n            node,\n            propDef,\n            binder,\n            bindingOptions\n        });\n\n        let debouncedNodeHandler;\n\n        if (debounceGetValue || debounceGetValueOnBind) {\n            debouncedNodeHandler = debounce(syncNodeHandler, debounceGetValueDelay);\n        }\n\n        if (debounceGetValue) {\n            nodeHandler = debouncedNodeHandler;\n        } else {\n            nodeHandler = syncNodeHandler;\n        }\n\n        // TODO: Throw error when \"on\" and maybe other binder properties has wrong type\n        if (typeof on === 'function') {\n            on.call(node, nodeHandler, bindingOptions);\n        } else if (typeof on === 'string') {\n            // addEventListener is faster than \"on\" method from any DOM library\n            nofn.forEach(on.split(spaceReg),\n                evtName => node.addEventListener(evtName, nodeHandler));\n        }\n\n        if ((isUndefined && getValueOnBind !== false) || getValueOnBind === true) {\n            if (debounceGetValueOnBind) {\n                debouncedNodeHandler();\n            } else {\n                syncNodeHandler();\n            }\n        }\n\n        isUndefined = typeof propDef.value === 'undefined';\n    }\n\n    // add needed event handlers to the object when setValue is given\n    if (setValue) {\n        const syncObjectHandler = createObjectHandler({\n            node,\n            propDef,\n            binder,\n            bindingOptions,\n            eventOptions\n        });\n\n        let debouncedObjectHandler;\n\n        if (debounceSetValue || debounceSetValueOnBind) {\n            debouncedObjectHandler = debounce(syncObjectHandler, debounceSetValueDelay);\n        }\n\n        if (debounceSetValue) {\n            objectHandler = debouncedObjectHandler;\n        } else {\n            objectHandler = syncObjectHandler;\n        }\n\n        // TODO: Is it possible to get previous value of a property?\n        addListener(object, `_change:bindings:${key}`, objectHandler, null, { skipChecks: true });\n\n        if ((!isUndefined && setValueOnBind !== false) || setValueOnBind === true) {\n            if (debounceSetValueOnBind) {\n                debouncedObjectHandler();\n            } else {\n                syncObjectHandler();\n            }\n        }\n    }\n\n    // add binding data to bindings array\n    bindings.push({\n        on,\n        node,\n        binder,\n        objectHandler,\n        nodeHandler,\n        bindingOptions\n    });\n\n    // fire events\n    if (!silent) {\n        const extendedEventOptions = {\n            key,\n            node,\n            ...eventOptions\n        };\n\n        triggerOne(object, `bind:${key}`, extendedEventOptions);\n        triggerOne(object, 'bind', extendedEventOptions);\n    }\n}\n"]}