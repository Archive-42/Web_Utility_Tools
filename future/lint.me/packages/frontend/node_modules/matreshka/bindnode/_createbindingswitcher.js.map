{"version":3,"sources":["../../src/bindnode/_createbindingswitcher.js"],"names":["createBindingSwitcher","object","deepPath","$nodes","binder","eventOptions","bindNode","bindingSwitcher","changeEvent","deepPathLength","length","lastDeepPathItem","value","previousValue","restPath","target","previousTarget","i","unbindNode"],"mappings":";;yBAAuB,e;;AAEvB;AACA;AACA;AACA;iBACwBA,qB;AAAT,SAASA,qBAAT,OAOZ;AAAA,QANCC,MAMD,QANCA,MAMD;AAAA,QALCC,QAKD,QALCA,QAKD;AAAA,QAJCC,MAID,QAJCA,MAID;AAAA,QAHCC,MAGD,QAHCA,MAGD;AAAA,QAFCC,YAED,QAFCA,YAED;AAAA,QADCC,QACD,QADCA,QACD;;AACC,WAAO,SAASC,eAAT,GAA2C;AAAA,YAAlBC,WAAkB,uEAAJ,EAAI;;AAC9C,YAAMC,iBAAiBP,SAASQ,MAAhC;AACA,YAAMC,mBAAmBT,SAASO,iBAAiB,CAA1B,CAAzB;AAF8C,YAI1CG,KAJ0C,GAO1CJ,WAP0C,CAI1CI,KAJ0C;AAAA,YAK1CC,aAL0C,GAO1CL,WAP0C,CAK1CK,aAL0C;AAAA,YAM1CC,QAN0C,GAO1CN,WAP0C,CAM1CM,QAN0C;;AAQ9C,YAAIC,eAAJ,CAR8C,CAQlC;AACZ,YAAIC,uBAAJ,CAT8C,CAS1B;;;AAGpB,YAAIJ,SAAS,OAAOA,KAAP,KAAiB,QAA1B,IAAsCE,QAA1C,EAAoD;AAChD;AACAC,qBAASH,KAAT;AACA,iBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIH,SAASJ,MAA7B,EAAqCO,GAArC,EAA0C;AACtCF,yBAASA,OAAOD,SAASG,CAAT,CAAP,CAAT;AACA,oBAAI,CAACF,MAAL,EAAa;AACT;AACH;AACJ;AACJ,SATD,MASO;AACH;AACAA,qBAASd,MAAT;AACA,iBAAK,IAAIgB,KAAI,CAAb,EAAgBA,KAAIR,iBAAiB,CAArC,EAAwCQ,IAAxC,EAA6C;AACzCF,yBAASA,OAAOb,SAASe,EAAT,CAAP,CAAT;AACA,oBAAI,CAACF,MAAL,EAAa;AACT;AACH;AACJ;AACJ;;AAED;AACA,YAAIF,iBAAiB,OAAOA,aAAP,KAAyB,QAA1C,IAAsDC,QAA1D,EAAoE;AAChEE,6BAAiBH,aAAjB;AACA,iBAAK,IAAII,MAAI,CAAb,EAAgBA,MAAIH,SAASJ,MAA7B,EAAqCO,KAArC,EAA0C;AACtCD,iCAAiBA,eAAeF,SAASG,GAAT,CAAf,CAAjB;AACA,oBAAI,CAACD,cAAL,EAAqB;AACjB;AACH;AACJ;AACJ;;AAED;AACA,YAAID,UAAU,OAAOA,MAAP,KAAkB,QAAhC,EAA0C;AACtCT,qBAASS,MAAT,EAAiBJ,gBAAjB,EAAmCR,MAAnC,EAA2CC,MAA3C,EAAmDC,YAAnD;AACH;;AAED;AACA,YAAIW,kBAAkB,OAAOA,cAAP,KAA0B,QAAhD,EAA0D;AACtDE,uBAAWF,cAAX,EAA2BL,gBAA3B,EAA6CR,MAA7C;AACH;AACJ,KApDD;AAqDH","file":"_createbindingswitcher.js","sourcesContent":["import unbindNode from '../unbindnode';\n\n// returns a function which re-adds binding when object branch is changed\n// the function is called by bindNode when something like\n// 'foo.bar.baz' is passed to it as key argument value\n// this is one of the hardest things in the framework to understand\nexport default function createBindingSwitcher({\n    object,\n    deepPath,\n    $nodes,\n    binder,\n    eventOptions,\n    bindNode\n}) {\n    return function bindingSwitcher(changeEvent = {}) {\n        const deepPathLength = deepPath.length;\n        const lastDeepPathItem = deepPath[deepPathLength - 1];\n        const {\n            value, // new value of a branch\n            previousValue, // previous value of a branch\n            restPath // path starting currently changed branch (passed by addTreeListener)\n        } = changeEvent;\n        let target; // an object to call bindNode\n        let previousTarget; // an object to call unbindNode\n\n\n        if (value && typeof value === 'object' && restPath) {\n            // if rest path is given and new value is an object\n            target = value;\n            for (let i = 0; i < restPath.length; i++) {\n                target = target[restPath[i]];\n                if (!target) {\n                    break;\n                }\n            }\n        } else {\n            // if rest path is not given\n            target = object;\n            for (let i = 0; i < deepPathLength - 1; i++) {\n                target = target[deepPath[i]];\n                if (!target) {\n                    break;\n                }\n            }\n        }\n\n        // if rest path is given and previous value is an object\n        if (previousValue && typeof previousValue === 'object' && restPath) {\n            previousTarget = previousValue;\n            for (let i = 0; i < restPath.length; i++) {\n                previousTarget = previousTarget[restPath[i]];\n                if (!previousTarget) {\n                    break;\n                }\n            }\n        }\n\n        // add binding for new target\n        if (target && typeof target === 'object') {\n            bindNode(target, lastDeepPathItem, $nodes, binder, eventOptions);\n        }\n\n        // remove binding for previously used object\n        if (previousTarget && typeof previousTarget === 'object') {\n            unbindNode(previousTarget, lastDeepPathItem, $nodes);\n        }\n    };\n}\n"]}