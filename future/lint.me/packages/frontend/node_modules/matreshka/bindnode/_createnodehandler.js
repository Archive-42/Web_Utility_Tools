'use strict';

var is = require('../_helpers/is');

var set = require('../set');

// returns a function which called when bound node state is changed (eg DOM event is fired)
module.exports = createNodeHandler;
function createNodeHandler(_ref) {
    var object = _ref.object,
        key = _ref.key,
        node = _ref.node,
        propDef = _ref.propDef,
        binder = _ref.binder,
        bindingOptions = _ref.bindingOptions;

    return function nodeHandler() {
        var domEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        // nodeHandler.disabled = true is set in unbindNode
        // we cannot "turn off" binder.on when its value is a function
        // developer needs to clean memory ("turn off" callback) manualy in binder.destroy
        if (nodeHandler.disabled) {
            return;
        }

        var previousValue = propDef.value;
        var which = domEvent.which,
            target = domEvent.target,
            ctrlKey = domEvent.ctrlKey,
            altKey = domEvent.altKey;
        var getValue = binder.getValue;

        var _keys,
            _l,
            _i,
            _source,
            _key,
            _result = {};

        _result.previousValue = previousValue
        _result.domEvent = domEvent
        _result.originalEvent = domEvent.originalEvent || domEvent

        _result.preventDefault = function () {
            return domEvent.preventDefault();
        }

        _result.stopPropagation = function () {
            return domEvent.stopPropagation();
        }

        _result.which = which
        _result.target = target
        _result.ctrlKey = ctrlKey
        _result.altKey = altKey

        for (_source = bindingOptions, _keys = Object.keys(_source), _l = _keys.length, _i = 0; _i < _l; _i++) {
            _key = _keys[_i];
            _result[_key] = _source[_key];
        }

        var value = getValue.call(node, _result);

        if (!is(value, previousValue)) {
            set(object, key, value, {
                fromNode: true,
                // the following properties are needed to avoid circular changes
                // they are used at objectHandler
                changedNode: node,
                onChangeValue: value,
                binder: binder
            });
        }
    };
}
//# sourceMappingURL=_createnodehandler.js.map