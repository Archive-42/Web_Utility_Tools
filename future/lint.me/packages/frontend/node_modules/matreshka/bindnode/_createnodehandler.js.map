{"version":3,"sources":["../../src/bindnode/_createnodehandler.js"],"names":["createNodeHandler","object","key","node","propDef","binder","bindingOptions","nodeHandler","domEvent","disabled","previousValue","value","which","target","ctrlKey","altKey","getValue","originalEvent","preventDefault","stopPropagation","call","is","set","fromNode","changedNode","onChangeValue"],"mappings":";;iBAAe,gB;;kBACC,Q;;AAEhB;iBACwBA,iB;AAAT,SAASA,iBAAT,OAOZ;AAAA,QANCC,MAMD,QANCA,MAMD;AAAA,QALCC,GAKD,QALCA,GAKD;AAAA,QAJCC,IAID,QAJCA,IAID;AAAA,QAHCC,OAGD,QAHCA,OAGD;AAAA,QAFCC,MAED,QAFCA,MAED;AAAA,QADCC,cACD,QADCA,cACD;;AACC,WAAO,SAASC,WAAT,GAAoC;AAAA,YAAfC,QAAe,uEAAJ,EAAI;;AACvC;AACA;AACA;AACA,YAAID,YAAYE,QAAhB,EAA0B;AACtB;AACH;;AAED,YAAMC,gBAAgBN,QAAQO,KAA9B;AARuC,YAS/BC,KAT+B,GASIJ,QATJ,CAS/BI,KAT+B;AAAA,YASxBC,MATwB,GASIL,QATJ,CASxBK,MATwB;AAAA,YAShBC,OATgB,GASIN,QATJ,CAShBM,OATgB;AAAA,YASPC,MATO,GASIP,QATJ,CASPO,MATO;AAAA,YAU/BC,QAV+B,GAUlBX,MAVkB,CAU/BW,QAV+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAYnCN,aAZmC,GAYnCA;AAZmC,gBAanCF,QAbmC,GAanCA;AAbmC,gBAcnCS,aAdmC,GAcpBT,SAASS,aAAT,IAA0BT;;AAdN,gBAgBnCU,cAhBmC,GAgBnB;AAAA,mBAAMV,SAASU,cAAT,EAAN;AAAA;;AAhBmB,gBAkBnCC,eAlBmC,GAkBlB;AAAA,mBAAMX,SAASW,eAAT,EAAN;AAAA;;AAlBkB,gBAmBnCP,KAnBmC,GAmBnCA;AAnBmC,gBAoBnCC,MApBmC,GAoBnCA;AApBmC,gBAqBnCC,OArBmC,GAqBnCA;AArBmC,gBAsBnCC,MAtBmC,GAsBnCA;;AAtBmC,uBAuBhCT,cAvBgC;AAAA;AAAA;AAAA;;AAWvC,YAAMK,QAAQK,SAASI,IAAT,CAAcjB,IAAd,UAAd;;AAeA,YAAI,CAACkB,GAAGV,KAAH,EAAUD,aAAV,CAAL,EAA+B;AAC3BY,gBAAIrB,MAAJ,EAAYC,GAAZ,EAAiBS,KAAjB,EAAwB;AACpBY,0BAAU,IADU;AAEpB;AACA;AACAC,6BAAarB,IAJO;AAKpBsB,+BAAed,KALK;AAMpBN;AANoB,aAAxB;AAQH;AACJ,KApCD;AAqCH","file":"_createnodehandler.js","sourcesContent":["import is from '../_helpers/is';\nimport set from '../set';\n\n// returns a function which called when bound node state is changed (eg DOM event is fired)\nexport default function createNodeHandler({\n    object,\n    key,\n    node,\n    propDef,\n    binder,\n    bindingOptions\n}) {\n    return function nodeHandler(domEvent = {}) {\n        // nodeHandler.disabled = true is set in unbindNode\n        // we cannot \"turn off\" binder.on when its value is a function\n        // developer needs to clean memory (\"turn off\" callback) manualy in binder.destroy\n        if (nodeHandler.disabled) {\n            return;\n        }\n\n        const previousValue = propDef.value;\n        const { which, target, ctrlKey, altKey } = domEvent;\n        const { getValue } = binder;\n        const value = getValue.call(node, {\n            previousValue,\n            domEvent,\n            originalEvent: domEvent.originalEvent || domEvent, // jQuery thing\n            // will throw \"preventDefault is not a function\" when domEvent is empty object\n            preventDefault: () => domEvent.preventDefault(),\n            // will throw \"stopPropagation is not a function\" when domEvent is empty object\n            stopPropagation: () => domEvent.stopPropagation(),\n            which,\n            target,\n            ctrlKey,\n            altKey,\n            ...bindingOptions\n        });\n\n        if (!is(value, previousValue)) {\n            set(object, key, value, {\n                fromNode: true,\n                // the following properties are needed to avoid circular changes\n                // they are used at objectHandler\n                changedNode: node,\n                onChangeValue: value,\n                binder\n            });\n        }\n    };\n}\n"]}