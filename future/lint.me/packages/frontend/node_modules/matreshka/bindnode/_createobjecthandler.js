'use strict';

// returns a function which is called when property value is changed
module.exports = createObjectHandler;
function createObjectHandler(_ref) {
    var node = _ref.node,
        propDef = _ref.propDef,
        binder = _ref.binder,
        bindingOptions = _ref.bindingOptions;

    return function objectHandler() {
        var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var value = propDef.value;
        var onChangeValue = eventOptions.onChangeValue,
            changedNode = eventOptions.changedNode,
            evtBinder = eventOptions.binder;
        var setValue = binder.setValue;
        // dirty hack for https://github.com/matreshkajs/matreshka/issues/19

        var dirtyHackValue = onChangeValue === 'string' && typeof value === 'number' ? '' + value : value;

        // don't call setValue if a property is changed via getValue of the same binder
        if (changedNode === node && onChangeValue === dirtyHackValue && evtBinder === binder) {
            return;
        }

        var _keys,
            _l,
            _i,
            _source,
            _key,
            _result = {};

        _result.value = value

        for (_source = bindingOptions, _keys = Object.keys(_source), _l = _keys.length, _i = 0; _i < _l; _i++) {
            _key = _keys[_i];
            _result[_key] = _source[_key];
        }

        setValue.call(node, value, _result);
    };
}
//# sourceMappingURL=_createobjecthandler.js.map