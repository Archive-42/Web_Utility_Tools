{"version":3,"sources":["../../src/bindnode/_createobjecthandler.js"],"names":["createObjectHandler","node","propDef","binder","bindingOptions","objectHandler","eventOptions","value","onChangeValue","changedNode","evtBinder","setValue","dirtyHackValue","call"],"mappings":";;AAAA;iBACwBA,mB;AAAT,SAASA,mBAAT,OAKZ;AAAA,QAJCC,IAID,QAJCA,IAID;AAAA,QAHCC,OAGD,QAHCA,OAGD;AAAA,QAFCC,MAED,QAFCA,MAED;AAAA,QADCC,cACD,QADCA,cACD;;AACC,WAAO,SAASC,aAAT,GAA0C;AAAA,YAAnBC,YAAmB,uEAAJ,EAAI;AAAA,YACrCC,KADqC,GAC3BL,OAD2B,CACrCK,KADqC;AAAA,YAErCC,aAFqC,GAEaF,YAFb,CAErCE,aAFqC;AAAA,YAEtBC,WAFsB,GAEaH,YAFb,CAEtBG,WAFsB;AAAA,YAEDC,SAFC,GAEaJ,YAFb,CAETH,MAFS;AAAA,YAGrCQ,QAHqC,GAGxBR,MAHwB,CAGrCQ,QAHqC;AAI7C;;AACA,YAAMC,iBAAiBJ,kBAAkB,QAAlB,IAA8B,OAAOD,KAAP,KAAiB,QAA/C,QACdA,KADc,GACJA,KADnB;;AAGA;AACA,YAAIE,gBAAgBR,IAAhB,IAAwBO,kBAAkBI,cAA1C,IAA4DF,cAAcP,MAA9E,EAAsF;AAClF;AACH;;AAX4C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAczCI,KAdyC,GAczCA;;AAdyC,uBAetCH,cAfsC;AAAA;AAAA;AAAA;;AAa7CO,iBAASE,IAAT,CAAcZ,IAAd,EAAoBM,KAApB;AAIH,KAjBD;AAkBH","file":"_createobjecthandler.js","sourcesContent":["// returns a function which is called when property value is changed\nexport default function createObjectHandler({\n    node,\n    propDef,\n    binder,\n    bindingOptions\n}) {\n    return function objectHandler(eventOptions = {}) {\n        const { value } = propDef;\n        const { onChangeValue, changedNode, binder: evtBinder } = eventOptions;\n        const { setValue } = binder;\n        // dirty hack for https://github.com/matreshkajs/matreshka/issues/19\n        const dirtyHackValue = onChangeValue === 'string' && typeof value === 'number'\n            ? `${value}` : value;\n\n        // don't call setValue if a property is changed via getValue of the same binder\n        if (changedNode === node && onChangeValue === dirtyHackValue && evtBinder === binder) {\n            return;\n        }\n\n        setValue.call(node, value, {\n            value,\n            ...bindingOptions\n        });\n    };\n}\n"]}