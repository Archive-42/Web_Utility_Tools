'use strict';

var defs = require('../_core/defs');

var toArray = require('../_helpers/toarray');

var dom = require('../_dom');

var customSelectorReg = /\s*:bound\(([^(]*)\)\s*([\S\s]*)\s*|\s*:sandbox\s*([\S\s]*)\s*/;
var randomAttr = Math.random().toString().replace('0.', 'x') + 'y'; // x12345y

// the function selects nodes based on a selector (including custom values, eg :sandbox)
// TODO: selectNodes looks not good, it needs to be refactored and accelerated if possible
module.exports = selectNodes;
function selectNodes(object, givenSelector) {
    var _defs$get = defs.get(object),
        props = _defs$get.props;

    var selectors = givenSelector.split(',');
    var result = dom.$();

    for (var _target4 = selectors, _index3 = 0, selector, _l4 = _target4.length; selector = _target4[_index3], _index3 < _l4; _index3++) {
        var execResult = customSelectorReg.exec(selector);
        if (execResult) {
            (function () {
                var boundKey = execResult[3] !== undefined ? 'sandbox' : execResult[1];
                var subSelector = execResult[3] !== undefined ? execResult[3] : execResult[2];
                var propDef = props[boundKey];

                if (propDef) {
                    var bindings = propDef.bindings;

                    if (bindings) {
                        (function () {
                            var boundNodes = Array(bindings.length);

                            // if native selector passed after :bound(KEY) is not empty string
                            // for example ":bound(KEY) .my-selector"
                            for (var _target = bindings, i = 0, binding, _l = _target.length; binding = _target[i], i < _l; i++) {
                                boundNodes[i] = binding.node;
                            }

                            if (subSelector) {
                                // if native selector contains children selector
                                // for example ":bound(KEY) > .my-selector"
                                if (subSelector.indexOf('>') === 0) {
                                    for (var _target2 = boundNodes, _index = 0, node, _l2 = _target2.length; node = _target2[_index], _index < _l2; _index++) {
                                        node.setAttribute(randomAttr, randomAttr);
                                        var selected = node.querySelectorAll('[' + randomAttr + '="' + randomAttr + '"] ' + subSelector);
                                        result = result.add(toArray(selected));
                                        node.removeAttribute(randomAttr);
                                    }
                                    // selecting children

                                } else {
                                    for (var _target3 = boundNodes, _index2 = 0, node, _l3 = _target3.length; node = _target3[_index2], _index2 < _l3; _index2++) {
                                        var selected = node.querySelectorAll(subSelector);
                                        result = result.add(toArray(selected));
                                    }
                                    // if native selector doesn't contain children selector

                                }
                            } else {
                                // if native selector is empty string just add bound nodes to result
                                result = result.add(boundNodes);
                            }
                        })();
                    }
                }
            })();
        } else {
            // if it's native selector (no custom things)
            result = result.add(selector);
        }
    }

    return result;
}
//# sourceMappingURL=_selectnodes.js.map