{"version":3,"sources":["../../src/bindnode/_selectnodes.js"],"names":["customSelectorReg","randomAttr","Math","random","toString","replace","selectNodes","object","givenSelector","defs","get","props","selectors","split","result","dom","$","selector","execResult","exec","boundKey","undefined","subSelector","propDef","bindings","boundNodes","Array","length","i","binding","node","indexOf","setAttribute","selected","querySelectorAll","add","toArray","removeAttribute"],"mappings":";;mBAAiB,e;;sBACG,qB;;kBACJ,S;;AAEhB,IAAMA,oBAAoB,gEAA1B;AACA,IAAMC,aAAgBC,KAAKC,MAAL,GAAcC,QAAd,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAAhB,MAAN,C,CAAsE;;AAEtE;AACA;iBACwBC,W;AAAT,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,aAA7B,EAA4C;AAAA,oBACrCC,KAAKC,GAAL,CAASH,MAAT,CADqC;AAAA,QAC/CI,KAD+C,aAC/CA,KAD+C;;AAEvD,QAAMC,YAAYJ,cAAcK,KAAd,CAAoB,GAApB,CAAlB;AACA,QAAIC,SAASC,IAAIC,CAAJ,EAAb;;AAHuD,wBAK1CJ,SAL0C,eAK9BK,QAL8B,yBAK9BA,QAL8B,gDAKjB;AAClC,YAAMC,aAAalB,kBAAkBmB,IAAlB,CAAuBF,QAAvB,CAAnB;AACA,YAAIC,UAAJ,EAAgB;AAAA;AACZ,oBAAME,WAAWF,WAAW,CAAX,MAAkBG,SAAlB,GAA8B,SAA9B,GAA0CH,WAAW,CAAX,CAA3D;AACA,oBAAMI,cAAcJ,WAAW,CAAX,MAAkBG,SAAlB,GAA8BH,WAAW,CAAX,CAA9B,GAA8CA,WAAW,CAAX,CAAlE;AACA,oBAAMK,UAAUZ,MAAMS,QAAN,CAAhB;;AAEA,oBAAIG,OAAJ,EAAa;AAAA,wBACDC,QADC,GACYD,OADZ,CACDC,QADC;;AAET,wBAAIA,QAAJ,EAAc;AAAA;AACV,gCAAMC,aAAaC,MAAMF,SAASG,MAAf,CAAnB;;AAKA;AACA;AAPU,+CAEGH,QAFH,EAEuBI,CAFvB,MAEcC,OAFd,uBAEcA,OAFd,WAEuBD,CAFvB,GAEuBA,CAFvB,OAEuBA,CAFvB,IAE6B;AACnCH,2CAAWG,CAAX,IAAgBC,QAAQC,IAAxB;AACH;;AAID,gCAAIR,WAAJ,EAAiB;AACb;AACA;AACA,oCAAIA,YAAYS,OAAZ,CAAoB,GAApB,MAA6B,CAAjC,EAAoC;AAAA,wDAEnBN,UAFmB,cAENK,IAFM,yBAENA,IAFM,6CAEG;AAC/BA,6CAAKE,YAAL,CAAkB/B,UAAlB,EAA8BA,UAA9B;AACA,4CAAMgC,WAAWH,KAAKI,gBAAL,OACTjC,UADS,UACMA,UADN,WACsBqB,WADtB,CAAjB;AAGAR,iDAASA,OAAOqB,GAAP,CAAWC,QAAQH,QAAR,CAAX,CAAT;AACAH,6CAAKO,eAAL,CAAqBpC,UAArB;AACH;AARD;;AASH,iCAVD,MAUO;AAAA,wDAEUwB,UAFV,eAEuBK,IAFvB,yBAEuBA,IAFvB,gDAEgC;AAC/B,4CAAMG,WAAWH,KAAKI,gBAAL,CAAsBZ,WAAtB,CAAjB;AACAR,iDAASA,OAAOqB,GAAP,CAAWC,QAAQH,QAAR,CAAX,CAAT;AACH;AAJD;;AAKH;AACJ,6BApBD,MAoBO;AACH;AACAnB,yCAASA,OAAOqB,GAAP,CAAWV,UAAX,CAAT;AACH;AA/BS;AAgCb;AACJ;AAxCW;AAyCf,SAzCD,MAyCO;AACH;AACAX,qBAASA,OAAOqB,GAAP,CAAWlB,QAAX,CAAT;AACH;AACJ;;AAED,WAAOH,MAAP;AACH","file":"_selectnodes.js","sourcesContent":["import defs from '../_core/defs';\nimport toArray from '../_helpers/toarray';\nimport dom from '../_dom';\n\nconst customSelectorReg = /\\s*:bound\\(([^(]*)\\)\\s*([\\S\\s]*)\\s*|\\s*:sandbox\\s*([\\S\\s]*)\\s*/;\nconst randomAttr = `${Math.random().toString().replace('0.', 'x')}y`; // x12345y\n\n// the function selects nodes based on a selector (including custom values, eg :sandbox)\n// TODO: selectNodes looks not good, it needs to be refactored and accelerated if possible\nexport default function selectNodes(object, givenSelector) {\n    const { props } = defs.get(object);\n    const selectors = givenSelector.split(',');\n    let result = dom.$();\n\n    nofn.forEach(selectors, (selector) => {\n        const execResult = customSelectorReg.exec(selector);\n        if (execResult) {\n            const boundKey = execResult[3] !== undefined ? 'sandbox' : execResult[1];\n            const subSelector = execResult[3] !== undefined ? execResult[3] : execResult[2];\n            const propDef = props[boundKey];\n\n            if (propDef) {\n                const { bindings } = propDef;\n                if (bindings) {\n                    const boundNodes = Array(bindings.length);\n                    nofn.forEach(bindings, (binding, i) => {\n                        boundNodes[i] = binding.node;\n                    });\n\n                    // if native selector passed after :bound(KEY) is not empty string\n                    // for example \":bound(KEY) .my-selector\"\n                    if (subSelector) {\n                        // if native selector contains children selector\n                        // for example \":bound(KEY) > .my-selector\"\n                        if (subSelector.indexOf('>') === 0) {\n                            // selecting children\n                            nofn.forEach(boundNodes, (node) => {\n                                node.setAttribute(randomAttr, randomAttr);\n                                const selected = node.querySelectorAll(\n                                    `[${randomAttr}=\"${randomAttr}\"] ${subSelector}`\n                                );\n                                result = result.add(toArray(selected));\n                                node.removeAttribute(randomAttr);\n                            });\n                        } else {\n                            // if native selector doesn't contain children selector\n                            nofn.forEach(boundNodes, (node) => {\n                                const selected = node.querySelectorAll(subSelector);\n                                result = result.add(toArray(selected));\n                            });\n                        }\n                    } else {\n                        // if native selector is empty string just add bound nodes to result\n                        result = result.add(boundNodes);\n                    }\n                }\n            }\n        } else {\n            // if it's native selector (no custom things)\n            result = result.add(selector);\n        }\n    });\n\n    return result;\n}\n"]}