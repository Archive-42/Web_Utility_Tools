'use strict';

var addListener = require('../on/_addlistener');

var addTreeListener = require('../on/_addtreelistener');

var matreshkaError = require('../_helpers/matreshkaerror');

// adds a source to a source list and adds needed event listener to a it
module.exports = addSource;
function addSource(_ref) {
    var calcHandler = _ref.calcHandler,
        allSources = _ref.allSources,
        sourceKey = _ref.sourceKey,
        sourceObject = _ref.sourceObject,
        eventOptions = _ref.eventOptions;
    var _eventOptions$exactKe = eventOptions.exactKey,
        exactKey = _eventOptions$exactKe === undefined ? false : _eventOptions$exactKe;

    var isDelegated = false;

    // source key must be a string
    if (typeof sourceKey !== 'string') {
        throw matreshkaError('calc:source_key_type', { sourceKey: sourceKey });
    }

    // source object must be an object
    if (!sourceObject || typeof sourceObject !== 'object') {
        throw matreshkaError('calc:source_object_type', { sourceObject: sourceObject });
    }

    if (!exactKey) {
        var deepPath = sourceKey.split('.');

        // if something like a.b.c is used as a key
        if (deepPath.length > 1) {
            isDelegated = true;
            // TODO: Avoid collisions with bindings by using another event name
            // ... instead of _change:tree:xxx
            addTreeListener(sourceObject, deepPath, calcHandler);
        } else {
            exactKey = true;
        }
    }

    if (exactKey) {
        // normal handler
        addListener(sourceObject, '_change:deps:' + sourceKey, calcHandler);
    }

    allSources.push({
        sourceKey: sourceKey,
        sourceObject: sourceObject,
        isDelegated: isDelegated
    });
}
//# sourceMappingURL=_addsource.js.map