{"version":3,"sources":["../../src/calc/_createcalchandler.js"],"names":["createCalcHandler","object","eventOptions","allSources","target","def","handler","calcHandler","changeEvent","values","protector","protectKey","id","setEventOptions","sourceObject","sourceKey","isDelegated","value","deepFind","push","targetValue","apply","set"],"mappings":";;kBAAgB,Q;;uBACK,sB;;oBACH,mB;;AAElB;iBACwBA,iB;AAAT,SAASA,iBAAT,OAOZ;AAAA,QANCC,MAMD,QANCA,MAMD;AAAA,QALCC,YAKD,QALCA,YAKD;AAAA,QAJCC,UAID,QAJCA,UAID;AAAA,QAHCC,MAGD,QAHCA,MAGD;AAAA,QAFCC,GAED,QAFCA,GAED;AAAA,QADCC,OACD,QADCA,OACD;;AACC,WAAO,SAASC,WAAT,GAAuC;AAAA,YAAlBC,WAAkB,uEAAJ,EAAI;;AAC1C,YAAMC,SAAS,EAAf;AAD0C,oCAEfD,WAFe,CAElCE,SAFkC;AAAA,YAElCA,SAFkC,yCAEtB,EAFsB;;AAG1C,YAAMC,aAAaP,SAASC,IAAIO,EAAhC;;AAH0C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAKtCF,SALsC,GAKtCA;;AALsC,uBAMnCR,YANmC;AAAA;AAAA;AAAA;;AAAA,uBAOnCM,WAPmC;AAAA;AAAA;AAAA;;AAI1C,YAAMK,yBAAN;;AAMA,YAAIF,cAAcD,SAAlB,EAA6B;AACzB;AACH;;AAEDA,kBAAUC,UAAV,IAAwB,IAAxB;;AAd0C,2BAgB7BR,UAhB6B,4FAoBpC;AAAA,gBAHFW,YAGE,SAHFA,YAGE;AAAA,gBAFFC,SAEE,SAFFA,SAEE;AAAA,gBADFC,WACE,SADFA,WACE;;AACF,gBAAMC,QAAQD,cAAcE,SAASJ,YAAT,EAAuBC,SAAvB,CAAd,GAAkDD,aAAaC,SAAb,CAAhE;AACAN,mBAAOU,IAAP,CAAYF,KAAZ;AACH;;AAED,YAAMG,cAAcC,MAAMf,OAAN,EAAeL,MAAf,EAAuBQ,MAAvB,CAApB;AACAa,YAAIrB,MAAJ,EAAYG,MAAZ,EAAoBgB,WAApB,EAAiCP,eAAjC;AACH,KA3BD;AA4BH","file":"_createcalchandler.js","sourcesContent":["import set from '../set';\nimport deepFind from '../_helpers/deepfind';\nimport apply from '../_helpers/apply';\n\n// creates event handler for target object which will be fired when a source is changed\nexport default function createCalcHandler({\n    object,\n    eventOptions,\n    allSources,\n    target,\n    def,\n    handler\n}) {\n    return function calcHandler(changeEvent = {}) {\n        const values = [];\n        const { protector = {} } = changeEvent;\n        const protectKey = target + def.id;\n        const setEventOptions = {\n            protector,\n            ...eventOptions,\n            ...changeEvent\n        };\n\n        if (protectKey in protector) {\n            return;\n        }\n\n        protector[protectKey] = true;\n\n        nofn.forEach(allSources, ({\n            sourceObject,\n            sourceKey,\n            isDelegated\n        }) => {\n            const value = isDelegated ? deepFind(sourceObject, sourceKey) : sourceObject[sourceKey];\n            values.push(value);\n        });\n\n        const targetValue = apply(handler, object, values);\n        set(object, target, targetValue, setEventOptions);\n    };\n}\n"]}