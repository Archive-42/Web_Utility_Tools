'use strict';

var initMK = require('../_core/init');

var checkObjectType = require('../_helpers/checkobjecttype');

var matreshkaError = require('../_helpers/matreshkaerror');

var debounce = require('../_helpers/debounce');

var addSource = require('./_addsource');

var createCalcHandler = require('./_createcalchandler');

var defineProp = require('../_core/defineprop');

// defines a property which is dependend on other properties
module.exports = calc;
function calc(object, target, sources, givenHandler, eventOptions) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        eventOptions = givenHandler;
        givenHandler = sources;
        sources = target;
        target = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'calc');
    }

    if (target instanceof Object) {
        for (var _target = target, _keys5 = Object.keys(_target), _i5 = 0, itemTarget, _ref, _l5 = _keys5.length; (itemTarget = _keys5[_i5], _ref = _target[itemTarget]), _i5 < _l5; _i5++) {
            var itemSource = _ref.source,
                itemHandler = _ref.handler,
                itemEventOptions = _ref.event;

            var commonEventOptions = sources;
            var mergedEventOptions = {};

            if (commonEventOptions) {
                var _result = mergedEventOptions;
                // extend event object by "global" event

                for (var _source2 = commonEventOptions, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i2 = 0, _key2; _i2 < _l2; _i2++) {
                    _key2 = _keys2[_i2];
                    _result[_key2] = _source2[_key2];
                }
            }

            if (itemEventOptions) {
                var _result2 = mergedEventOptions;
                // extend event object by "local" event ("event" key of an object)

                for (var _source4 = itemEventOptions, _keys4 = Object.keys(_source4), _l4 = _keys4.length, _i4 = 0, _key4; _i4 < _l4; _i4++) {
                    _key4 = _keys4[_i4];
                    _result2[_key4] = _source4[_key4];
                }
            }

            calc(object, itemTarget, itemSource, itemHandler, mergedEventOptions);
        }
        /*
         * accept an object
         * this.calc({target: { source, handler, event } }, commonEventOptions);
         */


        return object;
    }

    if (typeof target !== 'string') {
        throw matreshkaError('calc:target_type', { target: target });
    }

    eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign
    var def = initMK(object);
    var _eventOptions = eventOptions,
        _eventOptions$setOnIn = _eventOptions.setOnInit,
        setOnInit = _eventOptions$setOnIn === undefined ? true : _eventOptions$setOnIn,
        _eventOptions$debounc = _eventOptions.debounceCalcOnInit,
        debounceCalcOnInit = _eventOptions$debounc === undefined ? false : _eventOptions$debounc,
        _eventOptions$debounc2 = _eventOptions.debounceCalc,
        debounceCalc = _eventOptions$debounc2 === undefined ? true : _eventOptions$debounc2,
        _eventOptions$debounc3 = _eventOptions.debounceCalcDelay,
        debounceCalcDelay = _eventOptions$debounc3 === undefined ? 0 : _eventOptions$debounc3,
        _eventOptions$isTarge = _eventOptions.isTargetPropertyHidden,
        isTargetPropertyHidden = _eventOptions$isTarge === undefined ? false : _eventOptions$isTarge;

    var defaultHandler = function (value) {
        return value;
    };
    var handler = givenHandler || defaultHandler;
    var allSources = [];
    var syncCalcHandler = createCalcHandler({
        object: object,
        eventOptions: eventOptions,
        allSources: allSources,
        target: target,
        def: def,
        handler: handler
    });

    var debouncedCalcHandler = void 0;
    var calcHandler = void 0;

    if (debounceCalcOnInit || debounceCalc) {
        debouncedCalcHandler = debounce(syncCalcHandler, debounceCalcDelay);
    }

    defineProp(object, target, isTargetPropertyHidden);

    if (!(sources instanceof Array)) {
        sources = [sources]; // eslint-disable-line no-param-reassign
    }

    if (debounceCalc) {
        calcHandler = debouncedCalcHandler;
    } else {
        calcHandler = syncCalcHandler;
    }

    for (var _target3 = sources, _index2 = 0, source, _l7 = _target3.length; source = _target3[_index2], _index2 < _l7; _index2++) {
        if (typeof source === 'string') {
            // source object is current object
            addSource({
                calcHandler: calcHandler,
                allSources: allSources,
                sourceKey: source,
                sourceObject: object,
                eventOptions: eventOptions
            });
        } else {
            (function () {
                // source object is external object
                if (!source || typeof source !== 'object') {
                    throw matreshkaError('calc:source_type', { source: source });
                }

                var sourceKey = source.key;
                var sourceObject = source.object;
                if (sourceKey instanceof Array) {
                    for (var _target2 = sourceKey, _index = 0, sourceKeyItem, _l6 = _target2.length; sourceKeyItem = _target2[_index], _index < _l6; _index++) {
                        addSource({
                            calcHandler: calcHandler,
                            allSources: allSources,
                            sourceKey: sourceKeyItem,
                            sourceObject: sourceObject,
                            eventOptions: eventOptions
                        });
                    }
                    // many keys are passed

                } else {
                    // one key is passed
                    addSource({
                        calcHandler: calcHandler,
                        allSources: allSources,
                        sourceKey: sourceKey,
                        sourceObject: sourceObject,
                        eventOptions: eventOptions
                    });
                }
            })();
        }
    }

    if (setOnInit) {
        if (debounceCalcOnInit) {
            debouncedCalcHandler();
        } else {
            syncCalcHandler();
        }
    }

    return object;
}
//# sourceMappingURL=index.js.map