'use strict';

var checkObjectType = require('./_helpers/checkobjecttype');

var _matreshka_universalmethods = require('./matreshka/_universalmethods');

var universalMethods = _matreshka_universalmethods;

var Class = require('./class');

var apply = require('./_helpers/apply');

// create a prototype of ChainClass
// store target object at "object" property
var prototype = {
    constructor: function (object) {
        this.object = object;
    }
};

var methodNames = Object.keys(universalMethods);

// iterate over all universal methods

var _loop = function (i) {
    var methodName = methodNames[i];
    var method = universalMethods[methodName];

    // create every chained method
    prototype[methodName] = function chainedMethod() {
        var args = [this.object];

        for (var _target = arguments, _index = 0, argument, _l = _target.length; argument = _target[_index], _index < _l; _index++) {
            args.push(argument);
        }

        apply(method, undefined, args);

        // returning this is important for chained calls
        return this;
    };
};

for (var i = 0; i < methodNames.length; i++) {
    _loop(i);
}

var ChainClass = Class(prototype);

// the function allows to chain static function calls on any object
module.exports = chain;
function chain(object) {
    // check for type and throw an error if it is not an object and is not a function
    checkObjectType(object, 'chain');

    return new ChainClass(object);
}
//# sourceMappingURL=chain.js.map