{"version":3,"sources":["../src/chain.js"],"names":["prototype","constructor","object","methodNames","Object","keys","universalMethods","i","methodName","method","chainedMethod","args","arguments","argument","push","apply","undefined","length","ChainClass","Class","chain","checkObjectType"],"mappings":";;8BAA4B,4B;;0CACM,+B;;;;oBAChB,S;;oBACA,kB;;AAElB;AACA;AACA,IAAMA,YAAY;AACdC,eADc,YACFC,MADE,EACM;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACH;AAHa,CAAlB;;AAMA,IAAMC,cAAcC,OAAOC,IAAP,CAAYC,gBAAZ,CAApB;;AAEA;;sBACSC,C;AACL,QAAMC,aAAaL,YAAYI,CAAZ,CAAnB;AACA,QAAME,SAASH,iBAAiBE,UAAjB,CAAf;;AAEA;AACAR,cAAUQ,UAAV,IAAwB,SAASE,aAAT,GAAyB;AAC7C,YAAMC,OAAO,CAAC,KAAKT,MAAN,CAAb;;AAD6C,2BAGhCU,SAHgC,cAGpBC,QAHoB,uBAGpBA,QAHoB,2CAGP;AAClCF,iBAAKG,IAAL,CAAUD,QAAV;AACH;;AAEDE,cAAMN,MAAN,EAAcO,SAAd,EAAyBL,IAAzB;;AAEA;AACA,eAAO,IAAP;AACH,KAXD;;;AALJ,KAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAIJ,YAAYc,MAAhC,EAAwCV,GAAxC,EAA6C;AAAA,UAApCA,CAAoC;AAiB5C;;AAED,IAAMW,aAAaC,MAAMnB,SAAN,CAAnB;;AAEA;iBACwBoB,K;AAAT,SAASA,KAAT,CAAelB,MAAf,EAAuB;AAClC;AACAmB,oBAAgBnB,MAAhB,EAAwB,OAAxB;;AAEA,WAAO,IAAIgB,UAAJ,CAAehB,MAAf,CAAP;AACH","file":"chain.js","sourcesContent":["import checkObjectType from './_helpers/checkobjecttype';\nimport * as universalMethods from './matreshka/_universalmethods';\nimport Class from './class';\nimport apply from './_helpers/apply';\n\n// create a prototype of ChainClass\n// store target object at \"object\" property\nconst prototype = {\n    constructor(object) {\n        this.object = object;\n    }\n};\n\nconst methodNames = Object.keys(universalMethods);\n\n// iterate over all universal methods\nfor (let i = 0; i < methodNames.length; i++) {\n    const methodName = methodNames[i];\n    const method = universalMethods[methodName];\n\n    // create every chained method\n    prototype[methodName] = function chainedMethod() {\n        const args = [this.object];\n\n        nofn.forEach(arguments, (argument) => {\n            args.push(argument);\n        });\n\n        apply(method, undefined, args);\n\n        // returning this is important for chained calls\n        return this;\n    };\n}\n\nconst ChainClass = Class(prototype);\n\n// the function allows to chain static function calls on any object\nexport default function chain(object) {\n    // check for type and throw an error if it is not an object and is not a function\n    checkObjectType(object, 'chain');\n\n    return new ChainClass(object);\n}\n"]}