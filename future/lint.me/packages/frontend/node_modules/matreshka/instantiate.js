'use strict';

var checkObjectType = require('./_helpers/checkobjecttype');

var mediate = require('./mediate');

// the function is used when no update function is given
function defaultUpdateFunction(instance, data) {
    if (instance.isMatreshkaArray) {
        instance.recreate(data);
    } else if (instance.isMatreshkaObject) {
        instance.setData(data, { replaceData: true });
    } else {
        var _result = instance;
        // for other objects just extend them with given data

        for (var _source2 = data, _keys2 = Object.keys(_source2), _l2 = _keys2.length, _i2 = 0, _key2; _i2 < _l2; _i2++) {
            _key2 = _keys2[_i2];
            _result[_key2] = _source2[_key2];
        }
    }
}

// returns mediator which controls assignments
function createInstantiateMediator(_ref) {
    var UsedClass = _ref.UsedClass,
        updateFunction = _ref.updateFunction;

    return function mediator(value, previousValue, key, object) {
        if (previousValue instanceof UsedClass) {
            updateFunction.call(object, previousValue, value, key);
            return previousValue;
        }

        return new UsedClass(value, object, key);
    };
}

// creates an instance of given class as property value
// and updates an instance on new value assignment instead of actual assignment
module.exports = instantiate;
function instantiate(object, givenKeys, UsedClass, givenUpdateFunction) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        givenUpdateFunction = UsedClass;
        UsedClass = givenKeys;
        givenKeys = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'instantiate');
    }

    var isKeysArray = givenKeys instanceof Array;

    // allow to use key-class object
    if (typeof givenKeys === 'object' && !isKeysArray) {
        for (var _target = givenKeys, _keys3 = Object.keys(_target), _i3 = 0, objKey, objVal, _l3 = _keys3.length; (objKey = _keys3[_i3], objVal = _target[objKey]), _i3 < _l3; _i3++) {
            instantiate(object, objKey, objVal, UsedClass)
        }

        return object;
    }

    // allow to use both single key and an array of keys
    var keys = isKeysArray ? givenKeys : [givenKeys];
    var updateFunction = givenUpdateFunction || defaultUpdateFunction;
    var mediator = createInstantiateMediator({
        UsedClass: UsedClass,
        updateFunction: updateFunction
    });

    // iterate over all keys and define created mediator for all of them

    for (var _target2 = keys, _index = 0, key, _l4 = _target2.length; key = _target2[_index], _index < _l4; _index++) {
        mediate(object, key, mediator)
    }

    return object;
}
//# sourceMappingURL=instantiate.js.map