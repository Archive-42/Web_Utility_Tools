{"version":3,"sources":["../src/instantiate.js"],"names":["defaultUpdateFunction","instance","data","isMatreshkaArray","recreate","isMatreshkaObject","setData","replaceData","createInstantiateMediator","UsedClass","updateFunction","mediator","value","previousValue","key","object","call","instantiate","givenKeys","givenUpdateFunction","isMatreshka","checkObjectType","isKeysArray","Array","objKey","objVal","keys","mediate"],"mappings":";;8BAA4B,4B;;sBACR,W;;AAEpB;AACA,SAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,IAAzC,EAA+C;AAC3C,QAAID,SAASE,gBAAb,EAA+B;AAC3BF,iBAASG,QAAT,CAAkBF,IAAlB;AACH,KAFD,MAEO,IAAID,SAASI,iBAAb,EAAgC;AACnCJ,iBAASK,OAAT,CAAiBJ,IAAjB,EAAuB,EAAEK,aAAa,IAAf,EAAvB;AACH,KAFM,MAEA;AAAA,sBAESN,QAFT;AACH;;AADG,4BAEmBC,IAFnB;AAAA;AAAA;AAAA;AAGN;AACJ;;AAED;AACA,SAASM,yBAAT,OAGG;AAAA,QAFCC,SAED,QAFCA,SAED;AAAA,QADCC,cACD,QADCA,cACD;;AACC,WAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,aAAzB,EAAwCC,GAAxC,EAA6CC,MAA7C,EAAqD;AACxD,YAAIF,yBAAyBJ,SAA7B,EAAwC;AACpCC,2BAAeM,IAAf,CAAoBD,MAApB,EAA4BF,aAA5B,EAA2CD,KAA3C,EAAkDE,GAAlD;AACA,mBAAOD,aAAP;AACH;;AAED,eAAO,IAAIJ,SAAJ,CAAcG,KAAd,EAAqBG,MAArB,EAA6BD,GAA7B,CAAP;AACH,KAPD;AAQH;;AAED;AACA;iBACwBG,W;AAAT,SAASA,WAAT,CAAqBF,MAArB,EAA6BG,SAA7B,EAAwCT,SAAxC,EAAmDU,mBAAnD,EAAwE;AACnF,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,8BAAsBV,SAAtB;AACAA,oBAAYS,SAAZ;AACAA,oBAAYH,MAAZ;AACAA,iBAAS,IAAT;AACA;AACH,KARD,MAQO;AACH;AACAM,wBAAgBN,MAAhB,EAAwB,aAAxB;AACH;;AAED,QAAMO,cAAcJ,qBAAqBK,KAAzC;;AAEA;AACA,QAAI,OAAOL,SAAP,KAAqB,QAArB,IAAiC,CAACI,WAAtC,EAAmD;AAAA,2BACnCJ,SADmC,0CACfM,MADe,EACvBC,MADuB,wBACfD,MADe,gBACvBC,MADuB,WACfD,MADe;AACJP,wBAAYF,MAAZ,EAAoBS,MAApB,EAA4BC,MAA5B,EAAoChB,SAApC;AADI;;AAE/C,eAAOM,MAAP;AACH;;AAED;AACA,QAAMW,OAAOJ,cAAcJ,SAAd,GAA0B,CAACA,SAAD,CAAvC;AACA,QAAMR,iBAAiBS,uBAAuBnB,qBAA9C;AACA,QAAMW,WAAWH,0BAA0B;AACvCC,4BADuC;AAEvCC;AAFuC,KAA1B,CAAjB;;AAKA;;AA9BmF,wBA+BtEgB,IA/BsE,cA+BhEZ,GA/BgE,yBA+BhEA,GA/BgE;AA+BzDa,gBAAQZ,MAAR,EAAgBD,GAAhB,EAAqBH,QAArB;AA/ByD;;AAiCnF,WAAOI,MAAP;AACH","file":"instantiate.js","sourcesContent":["import checkObjectType from './_helpers/checkobjecttype';\nimport mediate from './mediate';\n\n// the function is used when no update function is given\nfunction defaultUpdateFunction(instance, data) {\n    if (instance.isMatreshkaArray) {\n        instance.recreate(data);\n    } else if (instance.isMatreshkaObject) {\n        instance.setData(data, { replaceData: true });\n    } else {\n        // for other objects just extend them with given data\n        nofn.assign(instance, data);\n    }\n}\n\n// returns mediator which controls assignments\nfunction createInstantiateMediator({\n    UsedClass,\n    updateFunction\n}) {\n    return function mediator(value, previousValue, key, object) {\n        if (previousValue instanceof UsedClass) {\n            updateFunction.call(object, previousValue, value, key);\n            return previousValue;\n        }\n\n        return new UsedClass(value, object, key);\n    };\n}\n\n// creates an instance of given class as property value\n// and updates an instance on new value assignment instead of actual assignment\nexport default function instantiate(object, givenKeys, UsedClass, givenUpdateFunction) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        givenUpdateFunction = UsedClass;\n        UsedClass = givenKeys;\n        givenKeys = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'instantiate');\n    }\n\n    const isKeysArray = givenKeys instanceof Array;\n\n    // allow to use key-class object\n    if (typeof givenKeys === 'object' && !isKeysArray) {\n        nofn.forOwn(givenKeys, (objVal, objKey) => instantiate(object, objKey, objVal, UsedClass));\n        return object;\n    }\n\n    // allow to use both single key and an array of keys\n    const keys = isKeysArray ? givenKeys : [givenKeys];\n    const updateFunction = givenUpdateFunction || defaultUpdateFunction;\n    const mediator = createInstantiateMediator({\n        UsedClass,\n        updateFunction\n    });\n\n    // iterate over all keys and define created mediator for all of them\n    nofn.forEach(keys, key => mediate(object, key, mediator));\n\n    return object;\n}\n"]}