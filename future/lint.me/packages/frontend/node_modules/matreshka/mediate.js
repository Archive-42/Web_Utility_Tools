'use strict';

var initMK = require('./_core/init');

var defineProp = require('./_core/defineprop');

var checkObjectType = require('./_helpers/checkobjecttype');

var set = require('./set');

var matreshkaError = require('./_helpers/matreshkaerror');

// creates property mediator
function createMediator(_ref) {
    var object = _ref.object,
        propDef = _ref.propDef,
        key = _ref.key,
        mediator = _ref.mediator;

    return function propMediator(value) {
        // args: value, previousValue, key, object itself
        return mediator.call(object, value, propDef.value, key, object);
    };
}

// transforms property value on its changing
module.exports = mediate;
function mediate(object, givenKeys, mediator) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        mediator = givenKeys;
        givenKeys = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'mediate');
    }

    var isKeysArray = givenKeys instanceof Array;

    // allow to use key-mediator object as another method variation
    if (typeof givenKeys === 'object' && !isKeysArray) {
        for (var _target = givenKeys, _keys = Object.keys(_target), _i = 0, objKey, objVal, _l = _keys.length; (objKey = _keys[_i], objVal = _target[objKey]), _i < _l; _i++) {
            mediate(object, objKey, objVal)
        }

        return object;
    }

    initMK(object);

    // allow to use both single key and an array of keys
    var keys = isKeysArray ? givenKeys : [givenKeys];

    for (var _target2 = keys, _index = 0, key, _l2 = _target2.length; key = _target2[_index], _index < _l2; _index++) {
        // if non-string is passed as a key
        if (typeof key !== 'string') {
            throw matreshkaError('mediate:key_type', { key: key });
        }

        var propDef = defineProp(object, key);

        var propMediator = propDef.mediator = createMediator({
            object: object,
            propDef: propDef,
            key: key,
            mediator: mediator
        });

        // set new value
        set(object, key, propMediator(propDef.value), {
            fromMediator: true
        });
    }

    return object;
}
//# sourceMappingURL=mediate.js.map