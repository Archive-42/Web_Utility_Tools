{"version":3,"sources":["../src/mediate.js"],"names":["createMediator","object","propDef","key","mediator","propMediator","value","call","mediate","givenKeys","isMatreshka","checkObjectType","isKeysArray","Array","objKey","objVal","initMK","keys","matreshkaError","defineProp","set","fromMediator"],"mappings":";;qBAAmB,c;;yBACI,oB;;8BACK,4B;;kBACZ,O;;6BACW,2B;;AAE3B;AACA,SAASA,cAAT,OAKG;AAAA,QAJCC,MAID,QAJCA,MAID;AAAA,QAHCC,OAGD,QAHCA,OAGD;AAAA,QAFCC,GAED,QAFCA,GAED;AAAA,QADCC,QACD,QADCA,QACD;;AACC,WAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAChC;AACA,eAAOF,SAASG,IAAT,CAAcN,MAAd,EAAsBK,KAAtB,EAA6BJ,QAAQI,KAArC,EAA4CH,GAA5C,EAAiDF,MAAjD,CAAP;AACH,KAHD;AAIH;;AAED;iBACwBO,O;AAAT,SAASA,OAAT,CAAiBP,MAAjB,EAAyBQ,SAAzB,EAAoCL,QAApC,EAA8C;AACzD,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKM,WAArC,EAAkD;AAC9C;AACA;AACAN,mBAAWK,SAAX;AACAA,oBAAYR,MAAZ;AACAA,iBAAS,IAAT;AACA;AACH,KAPD,MAOO;AACH;AACAU,wBAAgBV,MAAhB,EAAwB,SAAxB;AACH;;AAED,QAAMW,cAAcH,qBAAqBI,KAAzC;;AAEA;AACA,QAAI,OAAOJ,SAAP,KAAqB,QAArB,IAAiC,CAACG,WAAtC,EAAmD;AAAA,2BACnCH,SADmC,wCACfK,MADe,EACvBC,MADuB,sBACfD,MADe,cACvBC,MADuB,WACfD,MADe;AACJN,oBAAQP,MAAR,EAAgBa,MAAhB,EAAwBC,MAAxB;AADI;;AAE/C,eAAOd,MAAP;AACH;;AAEDe,WAAOf,MAAP;;AAEA;AACA,QAAMgB,OAAOL,cAAcH,SAAd,GAA0B,CAACA,SAAD,CAAvC;;AAxByD,wBA0B5CQ,IA1B4C,cA0BrCd,GA1BqC,yBA0BrCA,GA1BqC,6CA0B7B;AACxB;AACA,YAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,kBAAMe,eAAe,kBAAf,EAAmC,EAAEf,QAAF,EAAnC,CAAN;AACH;;AAED,YAAMD,UAAUiB,WAAWlB,MAAX,EAAmBE,GAAnB,CAAhB;;AAEA,YAAME,eAAeH,QAAQE,QAAR,GAAmBJ,eAAe;AACnDC,0BADmD;AAEnDC,4BAFmD;AAGnDC,oBAHmD;AAInDC;AAJmD,SAAf,CAAxC;;AAOA;AACAgB,YAAInB,MAAJ,EAAYE,GAAZ,EAAiBE,aAAaH,QAAQI,KAArB,CAAjB,EAA8C;AAC1Ce,0BAAc;AAD4B,SAA9C;AAGH;;AAED,WAAOpB,MAAP;AACH","file":"mediate.js","sourcesContent":["import initMK from './_core/init';\nimport defineProp from './_core/defineprop';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport set from './set';\nimport matreshkaError from './_helpers/matreshkaerror';\n\n// creates property mediator\nfunction createMediator({\n    object,\n    propDef,\n    key,\n    mediator\n}) {\n    return function propMediator(value) {\n        // args: value, previousValue, key, object itself\n        return mediator.call(object, value, propDef.value, key, object);\n    };\n}\n\n// transforms property value on its changing\nexport default function mediate(object, givenKeys, mediator) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        mediator = givenKeys;\n        givenKeys = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'mediate');\n    }\n\n    const isKeysArray = givenKeys instanceof Array;\n\n    // allow to use key-mediator object as another method variation\n    if (typeof givenKeys === 'object' && !isKeysArray) {\n        nofn.forOwn(givenKeys, (objVal, objKey) => mediate(object, objKey, objVal));\n        return object;\n    }\n\n    initMK(object);\n\n    // allow to use both single key and an array of keys\n    const keys = isKeysArray ? givenKeys : [givenKeys];\n\n    nofn.forEach(keys, (key) => {\n        // if non-string is passed as a key\n        if (typeof key !== 'string') {\n            throw matreshkaError('mediate:key_type', { key });\n        }\n\n        const propDef = defineProp(object, key);\n\n        const propMediator = propDef.mediator = createMediator({\n            object,\n            propDef,\n            key,\n            mediator\n        });\n\n        // set new value\n        set(object, key, propMediator(propDef.value), {\n            fromMediator: true\n        });\n    });\n\n    return object;\n}\n"]}