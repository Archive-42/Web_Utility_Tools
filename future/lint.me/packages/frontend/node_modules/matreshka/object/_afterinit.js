'use strict';

var afterMatreshkaInit = require('../matreshka/_afterinit');

var addListener = require('../on/_addlistener');

var triggerOne = require('../trigger/_triggerone');

var defs = require('../_core/defs');

// called on _change:delegated
// tiggers asterisk events logic by triggering _asterisk:set
function changeDelegatedHandler() {
    var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var key = eventOptions.key;

    var def = defs.get(this);

    if (key && key in def.keys) {
        triggerOne(this, '_asterisk:set', eventOptions);
    }
}

// called on _delete:delegated
// removes asterisk events logic by triggering _asterisk:remove
function deleteDelegatedHandler() {
    var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var key = eventOptions.key;

    var def = defs.get(this);

    if (key && key in def.keys) {
        triggerOne(this, '_asterisk:remove', eventOptions);
    }
}

// called on change
// triggers set and modify if data keys are changed
function changeHandler() {
    var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var key = eventOptions.key,
        silent = eventOptions.silent;

    var def = defs.get(this);

    if (key && key in def.keys && !silent) {
        triggerOne(this, 'set', eventOptions);
        triggerOne(this, 'modify', eventOptions);
    }
}

// called on delete
// triggers remove and modify if data keys are removed
function deleteHandler() {
    var eventOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var key = eventOptions.key,
        silent = eventOptions.silent;

    var def = defs.get(this);

    if (key && key in def.keys) {
        delete def.keys[key];

        if (!silent) {
            triggerOne(this, 'remove', eventOptions);
            triggerOne(this, 'modify', eventOptions);
        }
    }
}

// Matreshka.Object initializer
module.exports = afterMatreshkaObjectInit;
function afterMatreshkaObjectInit(def) {
    // Matreshka initializer
    afterMatreshkaInit.call(this);
    // create a set of data keys
    def.keys = {};

    // trigger asterisk events
    addListener(this, '_change:delegated', changeDelegatedHandler);

    // trigger asterisk events removal
    addListener(this, '_delete:delegated', deleteDelegatedHandler);

    // fire "modify" and "set" events when data key is changed
    addListener(this, 'change', changeHandler);

    // fire "modify" and "remove" events when data key is removed
    addListener(this, 'delete', deleteHandler);
}
//# sourceMappingURL=_afterinit.js.map