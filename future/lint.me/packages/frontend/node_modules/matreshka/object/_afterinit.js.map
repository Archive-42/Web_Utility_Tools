{"version":3,"sources":["../../src/object/_afterinit.js"],"names":["changeDelegatedHandler","eventOptions","key","def","defs","get","keys","triggerOne","deleteDelegatedHandler","changeHandler","silent","deleteHandler","afterMatreshkaObjectInit","afterMatreshkaInit","call","addListener"],"mappings":";;iCAA+B,yB;;0BACP,oB;;yBACD,wB;;mBACN,e;;AAEjB;AACA;AACA,SAASA,sBAAT,GAAmD;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;AAAA,QACvCC,GADuC,GAC/BD,YAD+B,CACvCC,GADuC;;AAE/C,QAAMC,MAAMC,KAAKC,GAAL,CAAS,IAAT,CAAZ;;AAEA,QAAIH,OAAOA,OAAOC,IAAIG,IAAtB,EAA4B;AACxBC,mBAAW,IAAX,EAAiB,eAAjB,EAAkCN,YAAlC;AACH;AACJ;;AAED;AACA;AACA,SAASO,sBAAT,GAAmD;AAAA,QAAnBP,YAAmB,uEAAJ,EAAI;AAAA,QACvCC,GADuC,GAC/BD,YAD+B,CACvCC,GADuC;;AAE/C,QAAMC,MAAMC,KAAKC,GAAL,CAAS,IAAT,CAAZ;;AAEA,QAAIH,OAAOA,OAAOC,IAAIG,IAAtB,EAA4B;AACxBC,mBAAW,IAAX,EAAiB,kBAAjB,EAAqCN,YAArC;AACH;AACJ;;AAED;AACA;AACA,SAASQ,aAAT,GAA0C;AAAA,QAAnBR,YAAmB,uEAAJ,EAAI;AAAA,QAC9BC,GAD8B,GACdD,YADc,CAC9BC,GAD8B;AAAA,QACzBQ,MADyB,GACdT,YADc,CACzBS,MADyB;;AAEtC,QAAMP,MAAMC,KAAKC,GAAL,CAAS,IAAT,CAAZ;;AAEA,QAAIH,OAAOA,OAAOC,IAAIG,IAAlB,IAA0B,CAACI,MAA/B,EAAuC;AACnCH,mBAAW,IAAX,EAAiB,KAAjB,EAAwBN,YAAxB;AACAM,mBAAW,IAAX,EAAiB,QAAjB,EAA2BN,YAA3B;AACH;AACJ;;AAED;AACA;AACA,SAASU,aAAT,GAA0C;AAAA,QAAnBV,YAAmB,uEAAJ,EAAI;AAAA,QAC9BC,GAD8B,GACdD,YADc,CAC9BC,GAD8B;AAAA,QACzBQ,MADyB,GACdT,YADc,CACzBS,MADyB;;AAEtC,QAAMP,MAAMC,KAAKC,GAAL,CAAS,IAAT,CAAZ;;AAEA,QAAIH,OAAOA,OAAOC,IAAIG,IAAtB,EAA4B;AACxB,eAAOH,IAAIG,IAAJ,CAASJ,GAAT,CAAP;;AAEA,YAAI,CAACQ,MAAL,EAAa;AACTH,uBAAW,IAAX,EAAiB,QAAjB,EAA2BN,YAA3B;AACAM,uBAAW,IAAX,EAAiB,QAAjB,EAA2BN,YAA3B;AACH;AACJ;AACJ;;AAED;iBACwBW,wB;AAAT,SAASA,wBAAT,CAAkCT,GAAlC,EAAuC;AAClD;AACAU,uBAAmBC,IAAnB,CAAwB,IAAxB;AACA;AACAX,QAAIG,IAAJ,GAAW,EAAX;;AAEA;AACAS,gBAAY,IAAZ,EAAkB,mBAAlB,EAAuCf,sBAAvC;;AAEA;AACAe,gBAAY,IAAZ,EAAkB,mBAAlB,EAAuCP,sBAAvC;;AAEA;AACAO,gBAAY,IAAZ,EAAkB,QAAlB,EAA4BN,aAA5B;;AAEA;AACAM,gBAAY,IAAZ,EAAkB,QAAlB,EAA4BJ,aAA5B;AACH","file":"_afterinit.js","sourcesContent":["import afterMatreshkaInit from '../matreshka/_afterinit';\nimport addListener from '../on/_addlistener';\nimport triggerOne from '../trigger/_triggerone';\nimport defs from '../_core/defs';\n\n// called on _change:delegated\n// tiggers asterisk events logic by triggering _asterisk:set\nfunction changeDelegatedHandler(eventOptions = {}) {\n    const { key } = eventOptions;\n    const def = defs.get(this);\n\n    if (key && key in def.keys) {\n        triggerOne(this, '_asterisk:set', eventOptions);\n    }\n}\n\n// called on _delete:delegated\n// removes asterisk events logic by triggering _asterisk:remove\nfunction deleteDelegatedHandler(eventOptions = {}) {\n    const { key } = eventOptions;\n    const def = defs.get(this);\n\n    if (key && key in def.keys) {\n        triggerOne(this, '_asterisk:remove', eventOptions);\n    }\n}\n\n// called on change\n// triggers set and modify if data keys are changed\nfunction changeHandler(eventOptions = {}) {\n    const { key, silent } = eventOptions;\n    const def = defs.get(this);\n\n    if (key && key in def.keys && !silent) {\n        triggerOne(this, 'set', eventOptions);\n        triggerOne(this, 'modify', eventOptions);\n    }\n}\n\n// called on delete\n// triggers remove and modify if data keys are removed\nfunction deleteHandler(eventOptions = {}) {\n    const { key, silent } = eventOptions;\n    const def = defs.get(this);\n\n    if (key && key in def.keys) {\n        delete def.keys[key];\n\n        if (!silent) {\n            triggerOne(this, 'remove', eventOptions);\n            triggerOne(this, 'modify', eventOptions);\n        }\n    }\n}\n\n// Matreshka.Object initializer\nexport default function afterMatreshkaObjectInit(def) {\n    // Matreshka initializer\n    afterMatreshkaInit.call(this);\n    // create a set of data keys\n    def.keys = {};\n\n    // trigger asterisk events\n    addListener(this, '_change:delegated', changeDelegatedHandler);\n\n    // trigger asterisk events removal\n    addListener(this, '_delete:delegated', deleteDelegatedHandler);\n\n    // fire \"modify\" and \"set\" events when data key is changed\n    addListener(this, 'change', changeHandler);\n\n    // fire \"modify\" and \"remove\" events when data key is removed\n    addListener(this, 'delete', deleteHandler);\n}\n"]}