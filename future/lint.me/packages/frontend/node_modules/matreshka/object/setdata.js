'use strict';

var initMK = require('../_core/init');

var defineProp = require('../_core/defineprop');

var set = require('../set');

// returns an array of keys listed at inObject but not listed at fromObject
function getNotListedKeys(inObject, fromObject) {
    var result = [];

    for (var _target = inObject, _keys = Object.keys(_target), _i = 0, key, _, _l = _keys.length; (key = _keys[_i], _ = _target[key]), _i < _l; _i++) {
        if (!(key in fromObject)) {
            result.push(key);
        }
    }

    return result;
}

// changes property value and adds given key to a list of data keys
module.exports = setData;
function setData(key, value, eventOptions) {
    var _this = this;

    // if no key or falsy key is given
    if (!key) {
        return this;
    }

    var _initMK = initMK(this),
        keys = _initMK.keys;

    // allow to pass key-value object


    if (typeof key === 'object') {
        var _ret = function () {
            eventOptions = value || {}; // eslint-disable-line no-param-reassign

            var _eventOptions = eventOptions,
                replaceData = _eventOptions.replaceData;

            // do not call setData recursivally for better performance

            for (var _target2 = key, _keys2 = Object.keys(_target2), _i2 = 0, objKey, objVal, _l2 = _keys2.length; (objKey = _keys2[_i2], objVal = _target2[objKey]), _i2 < _l2; _i2++) {
                // remove data keys not listed at key-value object
                if (replaceData) {
                    var notListedKeys = getNotListedKeys(keys, key);

                    if (notListedKeys.length) {
                        _this.removeDataKeys(notListedKeys);
                    }
                }

                // define descriptors for given property
                defineProp(_this, objKey);

                // add a key to a list of keys
                keys[objKey] = 1;

                // do other things with set method
                set(_this, objKey, objVal, eventOptions);
            }

            return {
                v: _this
            };
        }();

        if (typeof _ret === "object") return _ret.v;
    }

    eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign

    var _eventOptions2 = eventOptions,
        replaceData = _eventOptions2.replaceData;

    // remove all data keys except given key

    if (replaceData) {
        var _getNotListedKeys;

        var notListedKeys = getNotListedKeys(keys, (_getNotListedKeys = {}, _getNotListedKeys[key] = true, _getNotListedKeys));

        if (notListedKeys.length) {
            this.removeDataKeys(notListedKeys);
        }
    }

    // define descriptors for given property
    defineProp(this, key);

    // add a key to a list of keys
    keys[key] = 1;

    // do other things with set method
    return set(this, key, value, eventOptions);
}
//# sourceMappingURL=setdata.js.map