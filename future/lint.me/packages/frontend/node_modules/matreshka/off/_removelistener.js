'use strict';

var defs = require('../_core/defs');

var triggerOne = require('../trigger/_triggerone');

var domEventReg = require('../on/_domeventregexp');

// removes simple event listener from an object
module.exports = removeListener;
function removeListener(object, name, callback, context, info) {
    var def = defs.get(object);

    // if no definition do nothing
    if (!def) {
        return false;
    }

    var allEvents = def.events;

    var events = allEvents[name];
    var retain = [];
    var noTrigger = name ? name[0] === '_' : false;
    var domEventExecResult = domEventReg.exec(name);

    if (domEventExecResult) {
        var eventName = domEventExecResult[1],
            _domEventExecResult$ = domEventExecResult[2],
            key = _domEventExecResult$ === undefined ? 'sandbox' : _domEventExecResult$,
            selector = domEventExecResult[3];
        // fixing circular reference issue

        var removeDomListener = require('./_removedomlistener');

        removeDomListener(object, key, eventName, selector, callback, context, info);

        return true;
    }

    // if all events need to be removed
    if (typeof name === 'undefined') {
        if (!noTrigger) {
            for (var _target2 = allEvents, _keys = Object.keys(_target2), _i = 0, allEventsName, allEventsItem, _l2 = _keys.length; (allEventsName = _keys[_i], allEventsItem = _target2[allEventsName]), _i < _l2; _i++) {
                for (var _target = allEventsItem, _index = 0, event, _l = _target.length; event = _target[_index], _index < _l; _index++) {
                    var removeEventData = {
                        allEventsName: allEventsName,
                        callback: event.callback,
                        context: event.context
                    };

                    triggerOne(object, 'removeevent:' + name, removeEventData);
                    triggerOne(object, 'removeevent', removeEventData);
                }
            }
        }

        // restore default value of "events"
        def.events = {};
    } else if (events) {
        for (var _target3 = events, _index2 = 0, event, _l3 = _target3.length; event = _target3[_index2], _index2 < _l3; _index2++) {
            var argCallback = callback && callback._callback || callback;
            var eventCallback = event.callback._callback || event.callback;

            if (argCallback && argCallback !== eventCallback || context && context !== event.context) {
                // keep event
                retain.push(event);
            } else {
                var _removeEventData = {
                    name: name,
                    callback: event.callback,
                    context: event.context
                };

                if (!noTrigger) {
                    triggerOne(object, 'removeevent:' + name, _removeEventData);
                    triggerOne(object, 'removeevent', _removeEventData);
                }
            }
        }
        // if events with given name are found


        if (retain.length) {
            allEvents[name] = retain;
        } else {
            delete def.events[name];
        }
    }

    return false;
}
//# sourceMappingURL=_removelistener.js.map