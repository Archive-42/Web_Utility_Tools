{"version":3,"sources":["../../src/off/_removelistener.js"],"names":["removeListener","object","name","callback","context","info","def","defs","get","allEvents","events","retain","noTrigger","domEventExecResult","domEventReg","exec","eventName","key","selector","removeDomListener","require","allEventsName","allEventsItem","event","removeEventData","triggerOne","argCallback","_callback","eventCallback","push","length"],"mappings":";;mBAAiB,e;;yBACM,wB;;0BACC,uB;;AAExB;iBACwBA,c;AAAT,SAASA,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,QAAtC,EAAgDC,OAAhD,EAAyDC,IAAzD,EAA+D;AAC1E,QAAMC,MAAMC,KAAKC,GAAL,CAASP,MAAT,CAAZ;;AAEA;AACA,QAAI,CAACK,GAAL,EAAU;AACN,eAAO,KAAP;AACH;;AANyE,QAQ1DG,SAR0D,GAQ5CH,GAR4C,CAQlEI,MARkE;;AAS1E,QAAMA,SAASD,UAAUP,IAAV,CAAf;AACA,QAAMS,SAAS,EAAf;AACA,QAAMC,YAAYV,OAAOA,KAAK,CAAL,MAAY,GAAnB,GAAyB,KAA3C;AACA,QAAMW,qBAAqBC,YAAYC,IAAZ,CAAiBb,IAAjB,CAA3B;;AAEA,QAAIW,kBAAJ,EAAwB;AAAA,YACXG,SADW,GAC6BH,kBAD7B;AAAA,mCAC6BA,kBAD7B;AAAA,YACAI,GADA,wCACM,SADN;AAAA,YACiBC,QADjB,GAC6BL,kBAD7B;AAEpB;;AACA,YAAMM,oBAAoBC,QAAQ,sBAAR,CAA1B;;AAEAD,0BAAkBlB,MAAlB,EAA0BgB,GAA1B,EAA+BD,SAA/B,EAA0CE,QAA1C,EAAoDf,QAApD,EAA8DC,OAA9D,EAAuEC,IAAvE;;AAEA,eAAO,IAAP;AACH;;AAED;AACA,QAAI,OAAOH,IAAP,KAAgB,WAApB,EAAiC;AAC7B,YAAI,CAACU,SAAL,EAAgB;AAAA,gCACAH,SADA,yCAC2BY,aAD3B,EACYC,aADZ,uBAC2BD,aAD3B,cACYC,aADZ,YAC2BD,aAD3B,oBAC6C;AAAA,mCACxCC,aADwC,cACxBC,KADwB,uBACxBA,KADwB,2CACd;AACnC,wBAAMC,kBAAkB;AACpBH,oDADoB;AAEpBlB,kCAAUoB,MAAMpB,QAFI;AAGpBC,iCAASmB,MAAMnB;AAHK,qBAAxB;;AAMAqB,+BAAWxB,MAAX,mBAAkCC,IAAlC,EAA0CsB,eAA1C;AACAC,+BAAWxB,MAAX,EAAmB,aAAnB,EAAkCuB,eAAlC;AACH;AACJ;AACJ;;AAED;AACAlB,YAAII,MAAJ,GAAa,EAAb;AACH,KAlBD,MAkBO,IAAIA,MAAJ,EAAY;AAAA,4BAEFA,MAFE,eAEOa,KAFP,yBAEOA,KAFP,gDAEiB;AAC5B,gBAAMG,cAAevB,YAAYA,SAASwB,SAAtB,IAAoCxB,QAAxD;AACA,gBAAMyB,gBAAgBL,MAAMpB,QAAN,CAAewB,SAAf,IAA4BJ,MAAMpB,QAAxD;;AAEA,gBAAKuB,eAAeA,gBAAgBE,aAAhC,IACIxB,WAAWA,YAAYmB,MAAMnB,OADrC,EAC+C;AAC3C;AACAO,uBAAOkB,IAAP,CAAYN,KAAZ;AACH,aAJD,MAIO;AACH,oBAAMC,mBAAkB;AACpBtB,8BADoB;AAEpBC,8BAAUoB,MAAMpB,QAFI;AAGpBC,6BAASmB,MAAMnB;AAHK,iBAAxB;;AAMA,oBAAI,CAACQ,SAAL,EAAgB;AACZa,+BAAWxB,MAAX,mBAAkCC,IAAlC,EAA0CsB,gBAA1C;AACAC,+BAAWxB,MAAX,EAAmB,aAAnB,EAAkCuB,gBAAlC;AACH;AACJ;AACJ;AArBD;;;AAuBA,YAAIb,OAAOmB,MAAX,EAAmB;AACfrB,sBAAUP,IAAV,IAAkBS,MAAlB;AACH,SAFD,MAEO;AACH,mBAAOL,IAAII,MAAJ,CAAWR,IAAX,CAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH","file":"_removelistener.js","sourcesContent":["import defs from '../_core/defs';\nimport triggerOne from '../trigger/_triggerone';\nimport domEventReg from '../on/_domeventregexp';\n\n// removes simple event listener from an object\nexport default function removeListener(object, name, callback, context, info) {\n    const def = defs.get(object);\n\n    // if no definition do nothing\n    if (!def) {\n        return false;\n    }\n\n    const { events: allEvents } = def;\n    const events = allEvents[name];\n    const retain = [];\n    const noTrigger = name ? name[0] === '_' : false;\n    const domEventExecResult = domEventReg.exec(name);\n\n    if (domEventExecResult) {\n        const [, eventName, key = 'sandbox', selector] = domEventExecResult;\n        // fixing circular reference issue\n        const removeDomListener = require('./_removedomlistener');\n\n        removeDomListener(object, key, eventName, selector, callback, context, info);\n\n        return true;\n    }\n\n    // if all events need to be removed\n    if (typeof name === 'undefined') {\n        if (!noTrigger) {\n            nofn.forOwn(allEvents, (allEventsItem, allEventsName) => {\n                nofn.forEach(allEventsItem, (event) => {\n                    const removeEventData = {\n                        allEventsName,\n                        callback: event.callback,\n                        context: event.context\n                    };\n\n                    triggerOne(object, `removeevent:${name}`, removeEventData);\n                    triggerOne(object, 'removeevent', removeEventData);\n                });\n            });\n        }\n\n        // restore default value of \"events\"\n        def.events = {};\n    } else if (events) {\n        // if events with given name are found\n        nofn.forEach(events, (event) => {\n            const argCallback = (callback && callback._callback) || callback;\n            const eventCallback = event.callback._callback || event.callback;\n\n            if ((argCallback && argCallback !== eventCallback)\n                || (context && context !== event.context)) {\n                // keep event\n                retain.push(event);\n            } else {\n                const removeEventData = {\n                    name,\n                    callback: event.callback,\n                    context: event.context\n                };\n\n                if (!noTrigger) {\n                    triggerOne(object, `removeevent:${name}`, removeEventData);\n                    triggerOne(object, 'removeevent', removeEventData);\n                }\n            }\n        });\n\n        if (retain.length) {\n            allEvents[name] = retain;\n        } else {\n            delete def.events[name];\n        }\n    }\n\n    return false;\n}\n"]}