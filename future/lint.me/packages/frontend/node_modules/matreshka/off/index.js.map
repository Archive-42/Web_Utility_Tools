{"version":3,"sources":["../../src/off/index.js"],"names":["off","object","givenNames","callback","context","isMatreshka","checkObjectType","isNamesVarArray","Array","def","defs","get","namesObjName","namesObjCallback","events","props","propName","bindings","node","eventNamespace","id","dom","$","names","split","splitBySpaceReg","name","delegatedEventParts","length","path","delegatedName","undelegateListener","removeListener"],"mappings":";;8BAA4B,2B;;8BACA,6B;;mBACX,e;;6BACU,mB;;iCACI,uB;;kBACf,S;;AAEhB;iBACwBA,G;AAAT,SAASA,GAAT,CAAaC,MAAb,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,OAA3C,EAAoD;AAC/D,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,kBAAUD,QAAV;AACAA,mBAAWD,UAAX;AACAA,qBAAaD,MAAb;AACAA,iBAAS,IAAT;AACA;AACH,KARD,MAQO;AACH;AACAK,wBAAgBL,MAAhB,EAAwB,KAAxB;AACH;;AAED,QAAMM,kBAAkBL,sBAAsBM,KAA9C;AACA,QAAMC,MAAMC,KAAKC,GAAL,CAASV,MAAT,CAAZ;;AAEA;AACA;AACA,QAAIC,cAAc,OAAOA,UAAP,KAAsB,QAApC,IAAgD,CAACK,eAArD,EAAsE;AAAA,2BACtDL,UADsD,wCACvBU,YADuB,EACzCC,gBADyC,sBACvBD,YADuB,cACzCC,gBADyC,WACvBD,YADuB;AAE9DZ,gBAAIC,MAAJ,EAAYW,YAAZ,EAA0BC,gBAA1B,EAA4CV,QAA5C;AAF8D;;AAGlE,eAAOF,MAAP;AACH;;AAGD,QAAI,CAACC,UAAD,IAAe,CAACC,QAAhB,IAA4B,CAACC,OAAjC,EAA0C;AACtCK,YAAIK,MAAJ,GAAa,EAAb;;AADsC,4BAG1BL,IAAIM,KAHsB,2CAGAC,QAHA,8BAGAA,QAHA,gCAGAA,QAHA,sBAGa;AAAA,gBAAzBC,QAAyB,QAAzBA,QAAyB;;AAC/C,gBAAIA,QAAJ,EAAc;AAAA,oCACGA,QADH,8FAC2B;AAAA,wBAAXC,IAAW,SAAXA,IAAW;;AACjC,wBAAMC,iBAAiBV,IAAIW,EAAJ,GAASJ,QAAhC;AACAK,wBAAIC,CAAJ,CAAMJ,IAAN,EAAYlB,GAAZ,OAAoBmB,cAApB;AACH;AACJ;AACJ;;AAED,eAAOlB,MAAP;AACH;;AAED;AACA;AACA,QAAMsB,QAAQhB,kBAAkBL,UAAlB,GAA+BA,WAAWsB,KAAX,CAAiBC,eAAjB,CAA7C;;AA3C+D,wBA6ClDF,KA7CkD,eA6C1CG,IA7C0C,yBA6C1CA,IA7C0C,gDA6CjC;AAC1B,YAAMC,sBAAsBD,KAAKF,KAAL,CAAW,GAAX,CAA5B;AACA,YAAIG,oBAAoBC,MAApB,GAA6B,CAAjC,EAAoC;AAAA,gBACzBC,IADyB,GACFF,mBADE;AAAA,gBACnBG,aADmB,GACFH,mBADE;;AAEhCI,+BAAmB9B,MAAnB,EAA2B4B,IAA3B,EAAiCC,aAAjC,EAAgD3B,QAAhD,EAA0DC,OAA1D;AACH,SAHD,MAGO;AACH4B,2BAAe/B,MAAf,EAAuByB,IAAvB,EAA6BvB,QAA7B,EAAuCC,OAAvC;AACH;AACJ;;AAED,WAAOH,MAAP;AACH","file":"index.js","sourcesContent":["import splitBySpaceReg from '../on/_splitbyspaceregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport defs from '../_core/defs';\nimport removeListener from './_removelistener';\nimport undelegateListener from './_undelegatelistener';\nimport dom from '../_dom';\n\n// removes event listener\nexport default function off(object, givenNames, callback, context) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        context = callback;\n        callback = givenNames;\n        givenNames = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'off');\n    }\n\n    const isNamesVarArray = givenNames instanceof Array;\n    const def = defs.get(object);\n\n    // allow to pass name-handler object\n    // TODO: Name-handler object passed to off method is non-documented feature\n    if (givenNames && typeof givenNames === 'object' && !isNamesVarArray) {\n        nofn.forOwn(givenNames, (namesObjCallback, namesObjName) =>\n            off(object, namesObjName, namesObjCallback, callback));\n        return object;\n    }\n\n\n    if (!givenNames && !callback && !context) {\n        def.events = {};\n\n        nofn.forOwn(def.props, ({ bindings }, propName) => {\n            if (bindings) {\n                nofn.forEach(bindings, ({ node }) => {\n                    const eventNamespace = def.id + propName;\n                    dom.$(node).off(`.${eventNamespace}`);\n                });\n            }\n        });\n\n        return object;\n    }\n\n    // TODO: Array of names passed to off method is non-documented feature\n    // split by spaces\n    const names = isNamesVarArray ? givenNames : givenNames.split(splitBySpaceReg);\n\n    nofn.forEach(names, (name) => {\n        const delegatedEventParts = name.split('@');\n        if (delegatedEventParts.length > 1) {\n            const [path, delegatedName] = delegatedEventParts;\n            undelegateListener(object, path, delegatedName, callback, context);\n        } else {\n            removeListener(object, name, callback, context);\n        }\n    });\n\n    return object;\n}\n"]}