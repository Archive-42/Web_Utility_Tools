'use strict';

var initMK = require('../_core/init');

var defineProp = require('../_core/defineprop');

var addListener = require('./_addlistener');

var dom = require('../_dom');

var createDomEventHandler = require('./_createdomeventhandler');

// returns an object with event handlers used at addDomListener
function createBindingHandlers(_ref) {
    var fullEventName = _ref.fullEventName,
        domEventHandler = _ref.domEventHandler,
        selector = _ref.selector;

    return {
        bindHandler: function () {
            var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var node = evt.node;

            if (node) {
                dom.$(node).on(fullEventName, selector, domEventHandler);
            }
        },
        unbindHandler: function () {
            var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var node = evt.node;

            if (node) {
                dom.$(node).off(fullEventName, selector, domEventHandler);
            }
        }
    };
}

// adds DOM event listener for nodes bound to given property
module.exports = addDomListener;
function addDomListener(object, key, eventName, selector, callback, context, info) {
    var def = initMK(object);
    var propDef = defineProp(object, key);

    var domEventHandler = createDomEventHandler({
        key: key,
        object: object,
        callback: callback,
        context: context || object
    });

    // making possible to remove this event listener
    domEventHandler._callback = callback;

    var eventNamespace = def.id + key;
    var fullEventName = eventName + '.' + eventNamespace;

    var _createBindingHandler = createBindingHandlers({
        fullEventName: fullEventName,
        domEventHandler: domEventHandler,
        selector: selector
    }),
        bindHandler = _createBindingHandler.bindHandler,
        unbindHandler = _createBindingHandler.unbindHandler;

    var addBindListenerResult = addListener(object, 'bind:' + key, bindHandler, context, info);
    var addUnbindListenerResult = addListener(object, 'unbind:' + key, unbindHandler, context, info);

    // if events are added successfully then run bindHandler for every node immediately
    // TODO: Describe why do we need addBindListenerResult and addUnbindListenerResult
    if (addBindListenerResult && addUnbindListenerResult) {
        var bindings = propDef.bindings;

        if (bindings) {
            for (var _target = bindings, _index = 0, _ref2, _l = _target.length; _ref2 = _target[_index], _index < _l; _index++) {
                var node = _ref2.node;
                return bindHandler({ node: node });
            }
        }
    }

    return object;
}
//# sourceMappingURL=_adddomlistener.js.map