{"version":3,"sources":["../../src/on/_adddomlistener.js"],"names":["createBindingHandlers","fullEventName","domEventHandler","selector","bindHandler","evt","node","dom","$","on","unbindHandler","off","addDomListener","object","key","eventName","callback","context","info","def","initMK","propDef","defineProp","createDomEventHandler","_callback","eventNamespace","id","addBindListenerResult","addListener","addUnbindListenerResult","bindings"],"mappings":";;qBAAmB,e;;yBACI,qB;;0BACC,gB;;kBACR,S;;oCACkB,0B;;AAElC;AACA,SAASA,qBAAT,OAIG;AAAA,QAHCC,aAGD,QAHCA,aAGD;AAAA,QAFCC,eAED,QAFCA,eAED;AAAA,QADCC,QACD,QADCA,QACD;;AACC,WAAO;AACHC,mBADG,cACmB;AAAA,gBAAVC,GAAU,uEAAJ,EAAI;AAAA,gBACVC,IADU,GACDD,GADC,CACVC,IADU;;AAElB,gBAAIA,IAAJ,EAAU;AACNC,oBAAIC,CAAJ,CAAMF,IAAN,EAAYG,EAAZ,CAAeR,aAAf,EAA8BE,QAA9B,EAAwCD,eAAxC;AACH;AACJ,SANE;AAOHQ,qBAPG,cAOqB;AAAA,gBAAVL,GAAU,uEAAJ,EAAI;AAAA,gBACZC,IADY,GACHD,GADG,CACZC,IADY;;AAEpB,gBAAIA,IAAJ,EAAU;AACNC,oBAAIC,CAAJ,CAAMF,IAAN,EAAYK,GAAZ,CAAgBV,aAAhB,EAA+BE,QAA/B,EAAyCD,eAAzC;AACH;AACJ;AAZE,KAAP;AAcH;;AAED;iBACwBU,c;AAAT,SAASA,cAAT,CAAwBC,MAAxB,EAAgCC,GAAhC,EAAqCC,SAArC,EAAgDZ,QAAhD,EAA0Da,QAA1D,EAAoEC,OAApE,EAA6EC,IAA7E,EAAmF;AAC9F,QAAMC,MAAMC,OAAOP,MAAP,CAAZ;AACA,QAAMQ,UAAUC,WAAWT,MAAX,EAAmBC,GAAnB,CAAhB;;AAEA,QAAMZ,kBAAkBqB,sBAAsB;AAC1CT,gBAD0C;AAE1CD,sBAF0C;AAG1CG,0BAH0C;AAI1CC,iBAASA,WAAWJ;AAJsB,KAAtB,CAAxB;;AAOA;AACAX,oBAAgBsB,SAAhB,GAA4BR,QAA5B;;AAEA,QAAMS,iBAAiBN,IAAIO,EAAJ,GAASZ,GAAhC;AACA,QAAMb,gBAAmBc,SAAnB,SAAgCU,cAAtC;;AAf8F,gCAgBvDzB,sBAAsB;AACzDC,oCADyD;AAEzDC,wCAFyD;AAGzDC;AAHyD,KAAtB,CAhBuD;AAAA,QAgBtFC,WAhBsF,yBAgBtFA,WAhBsF;AAAA,QAgBzEM,aAhByE,yBAgBzEA,aAhByE;;AAqB9F,QAAMiB,wBACAC,YAAYf,MAAZ,YAA4BC,GAA5B,EAAmCV,WAAnC,EAAgDa,OAAhD,EAAyDC,IAAzD,CADN;AAEA,QAAMW,0BACAD,YAAYf,MAAZ,cAA8BC,GAA9B,EAAqCJ,aAArC,EAAoDO,OAApD,EAA6DC,IAA7D,CADN;;AAGA;AACA;AACA,QAAIS,yBAAyBE,uBAA7B,EAAsD;AAAA,YAC1CC,QAD0C,GAC7BT,OAD6B,CAC1CS,QAD0C;;AAElD,YAAIA,QAAJ,EAAc;AAAA,+BACGA,QADH;AAAA,oBACgBxB,IADhB,SACgBA,IADhB;AAAA,uBAC2BF,YAAY,EAAEE,UAAF,EAAZ,CAD3B;AAAA;AAEb;AACJ;;AAED,WAAOO,MAAP;AACH","file":"_adddomlistener.js","sourcesContent":["import initMK from '../_core/init';\nimport defineProp from '../_core/defineprop';\nimport addListener from './_addlistener';\nimport dom from '../_dom';\nimport createDomEventHandler from './_createdomeventhandler';\n\n// returns an object with event handlers used at addDomListener\nfunction createBindingHandlers({\n    fullEventName,\n    domEventHandler,\n    selector\n}) {\n    return {\n        bindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).on(fullEventName, selector, domEventHandler);\n            }\n        },\n        unbindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).off(fullEventName, selector, domEventHandler);\n            }\n        }\n    };\n}\n\n// adds DOM event listener for nodes bound to given property\nexport default function addDomListener(object, key, eventName, selector, callback, context, info) {\n    const def = initMK(object);\n    const propDef = defineProp(object, key);\n\n    const domEventHandler = createDomEventHandler({\n        key,\n        object,\n        callback,\n        context: context || object\n    });\n\n    // making possible to remove this event listener\n    domEventHandler._callback = callback;\n\n    const eventNamespace = def.id + key;\n    const fullEventName = `${eventName}.${eventNamespace}`;\n    const { bindHandler, unbindHandler } = createBindingHandlers({\n        fullEventName,\n        domEventHandler,\n        selector\n    });\n    const addBindListenerResult\n        = addListener(object, `bind:${key}`, bindHandler, context, info);\n    const addUnbindListenerResult\n        = addListener(object, `unbind:${key}`, unbindHandler, context, info);\n\n    // if events are added successfully then run bindHandler for every node immediately\n    // TODO: Describe why do we need addBindListenerResult and addUnbindListenerResult\n    if (addBindListenerResult && addUnbindListenerResult) {\n        const { bindings } = propDef;\n        if (bindings) {\n            nofn.forEach(bindings, ({ node }) => bindHandler({ node }));\n        }\n    }\n\n    return object;\n}\n"]}