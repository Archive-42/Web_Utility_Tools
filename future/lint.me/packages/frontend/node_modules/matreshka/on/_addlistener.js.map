{"version":3,"sources":["../../src/on/_addlistener.js"],"names":["propModEventReg","addListener","object","name","callback","context","info","initMK","allEvents","events","ctx","event","skipChecks","domEventExecResult","domEventReg","exec","eventName","key","selector","addDomListener","require","i","length","existingEvent","argCallback","_callback","eventCallback","push","test","defineProp","replace","triggerOne"],"mappings":";;qBAAmB,e;;yBACI,wB;;yBACA,qB;;0BACC,mB;;AAExB;AACA,IAAMA,gBAAgB;AAAhB,EACA,+GADN;;AAGA;AACA;iBACwBC,W;AAAT,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CC,OAA7C,EAAiE;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA,kBAC9CC,OAAOL,MAAP,CAD8C;AAAA,QAC5DM,SAD4D,WACpEC,MADoE;;AAE5E,QAAMC,MAAML,WAAWH,MAAvB;AACA,QAAMO,SAASD,UAAUL,IAAV,CAAf;AACA,QAAMQ,QAAQ,EAAEP,kBAAF,EAAYC,gBAAZ,EAAqBK,QAArB,EAA0BP,UAA1B,EAAgCG,UAAhC,EAAd;AACA;AAL4E,2BAM7CA,IAN6C,CAMpEM,UANoE;AAAA,QAMpEA,UANoE,oCAMvD,KANuD;;;AAQ5E,QAAI,CAACA,UAAL,EAAiB;AACb,YAAMC,qBAAqBC,YAAYC,IAAZ,CAAiBZ,IAAjB,CAA3B;;AAEA,YAAIU,kBAAJ,EAAwB;AAAA,gBACXG,SADW,GAC6BH,kBAD7B;AAAA,uCAC6BA,kBAD7B;AAAA,gBACAI,GADA,wCACM,SADN;AAAA,gBACiBC,QADjB,GAC6BL,kBAD7B;AAEpB;;AACA,gBAAMM,iBAAiBC,QAAQ,mBAAR,CAAvB;;AAEAD,2BAAejB,MAAf,EAAuBe,GAAvB,EAA4BD,SAA5B,EAAuCE,QAAvC,EAAiDd,QAAjD,EAA2DC,OAA3D,EAAoEC,IAApE;;AAEA,mBAAO,IAAP;AACH;AACJ;;AAED;AACA,QAAIG,MAAJ,EAAY;AACR,YAAI,CAACG,UAAL,EAAiB;AACb;AACA,iBAAK,IAAIS,IAAI,CAAb,EAAgBA,IAAIZ,OAAOa,MAA3B,EAAmCD,GAAnC,EAAwC;AACpC,oBAAME,gBAAgBd,OAAOY,CAAP,CAAtB;AACA,oBAAMG,cAAepB,YAAYA,SAASqB,SAAtB,IAAoCrB,QAAxD;AACA,oBAAMsB,gBAAgBH,cAAcnB,QAAd,CAAuBqB,SAAvB,IAAoCF,cAAcnB,QAAxE;AACA,oBAAIoB,gBAAgBE,aAAhB,IAAiCH,cAAclB,OAAd,KAA0BA,OAA/D,EAAwE;AACpE,2BAAO,KAAP;AACH;AACJ;AACJ;;AAED;AACAI,eAAOkB,IAAP,CAAYhB,KAAZ;AACH,KAfD,MAeO;AACH;AACAH,kBAAUL,IAAV,IAAkB,CAACQ,KAAD,CAAlB;AACH;;AAED,QAAIX,gBAAgB4B,IAAhB,CAAqBzB,IAArB,CAAJ,EAAgC;AAC5B;AACA0B,mBAAW3B,MAAX,EAAmBC,KAAK2B,OAAL,CAAa9B,eAAb,EAA8B,EAA9B,CAAnB;AACH;;AAED;AACA,QAAI,CAACY,UAAD,IAAeT,KAAK,CAAL,MAAY,GAA/B,EAAoC;AAChC4B,mBAAW7B,MAAX,gBAA+BC,IAA/B,EAAuCQ,KAAvC;AACAoB,mBAAW7B,MAAX,EAAmB,UAAnB,EAA+BS,KAA/B;AACH;;AAED;AACA,WAAO,IAAP;AACH","file":"_addlistener.js","sourcesContent":["import initMK from '../_core/init';\nimport triggerOne from '../trigger/_triggerone';\nimport defineProp from '../_core/defineprop';\nimport domEventReg from './_domeventregexp';\n\n// property modifier event regexp\nconst propModEventReg // eslint-disable-next-line max-len\n    = /^_change:deps:|^_change:bindings:|^_change:delegated:|^_change:common:|^_change:tree:|^change:|^beforechange:/;\n\n// adds simple event listener\n// used as core of event engine\nexport default function addListener(object, name, callback, context, info = {}) {\n    const { events: allEvents } = initMK(object);\n    const ctx = context || object;\n    const events = allEvents[name];\n    const event = { callback, context, ctx, name, info };\n    // skipChecks is used by internal methods for better performance\n    const { skipChecks = false } = info;\n\n    if (!skipChecks) {\n        const domEventExecResult = domEventReg.exec(name);\n\n        if (domEventExecResult) {\n            const [, eventName, key = 'sandbox', selector] = domEventExecResult;\n            // fixing circular reference issue\n            const addDomListener = require('./_adddomlistener');\n\n            addDomListener(object, key, eventName, selector, callback, context, info);\n\n            return true;\n        }\n    }\n\n    // if there are events with the same name\n    if (events) {\n        if (!skipChecks) {\n            // if there are events with the same data, return false\n            for (let i = 0; i < events.length; i++) {\n                const existingEvent = events[i];\n                const argCallback = (callback && callback._callback) || callback;\n                const eventCallback = existingEvent.callback._callback || existingEvent.callback;\n                if (argCallback === eventCallback && existingEvent.context === context) {\n                    return false;\n                }\n            }\n        }\n\n        // if the event isn't found add it to the event list\n        events.push(event);\n    } else {\n        // if there are no events with the same name, create an array with only  one event\n        allEvents[name] = [event];\n    }\n\n    if (propModEventReg.test(name)) {\n        // define needed accessors for KEY\n        defineProp(object, name.replace(propModEventReg, ''));\n    }\n\n    // names prefixed by underscore mean \"private\" events\n    if (!skipChecks && name[0] !== '_') {\n        triggerOne(object, `addevent:${name}`, event);\n        triggerOne(object, 'addevent', event);\n    }\n\n    // if event is added successfully return true\n    return true;\n}\n"]}