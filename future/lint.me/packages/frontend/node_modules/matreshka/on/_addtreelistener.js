'use strict';

var delegateListener = require('./_delegatelistener');

var removeTreeListener = require('../off/_removetreelistener');

// creates tree listener
function createTreeListener(_ref) {
    var handler = _ref.handler,
        restPath = _ref.restPath;

    var newHandler = function treeListener(changeEvent) {
        var _keys,
            _l,
            _i,
            _source,
            _key,
            _result = {};

        _result.restPath = restPath

        for (_source = changeEvent, _keys = Object.keys(_source), _l = _keys.length, _i = 0; _i < _l; _i++) {
            _key = _keys[_i];
            _result[_key] = _source[_key];
        }

        var extendedChangeEvent = _result;
        var previousValue = changeEvent.previousValue,
            value = changeEvent.value;

        // removes listener for all branches of the path on old object

        if (previousValue && typeof previousValue === 'object') {
            removeTreeListener(previousValue, restPath, handler);
        }

        // adds listener for all branches of "restPath" path on newly assigned object
        if (value && typeof value === 'object') {
            addTreeListener(value, restPath, handler);
        }

        // call original handler
        handler.call(this, extendedChangeEvent);
    };

    newHandler._callback = handler;

    return newHandler;
}

// listens changes for all branches of given path
// TODO: Pass context to addTreeListener
// one of the most hard functions to understand
module.exports = addTreeListener;
function addTreeListener(object, deepPath, handler) {
    if (typeof deepPath === 'string') {
        deepPath = deepPath.split('.'); // eslint-disable-line no-param-reassign
    }

    // iterate over all keys and delegate listener for all objects of given branch
    for (var i = 0; i < deepPath.length; i++) {
        // TODO: Array.prototype.slice method is slow
        var listenPath = deepPath.slice(0, i);
        var restPath = deepPath.slice(i + 1);

        delegateListener(object, listenPath, '_change:tree:' + deepPath[i], createTreeListener({
            handler: handler,
            restPath: restPath
        }));
    }
}
//# sourceMappingURL=_addtreelistener.js.map