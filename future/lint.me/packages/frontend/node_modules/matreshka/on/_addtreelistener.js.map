{"version":3,"sources":["../../src/on/_addtreelistener.js"],"names":["createTreeListener","handler","restPath","newHandler","treeListener","changeEvent","extendedChangeEvent","previousValue","value","removeTreeListener","addTreeListener","call","_callback","object","deepPath","split","i","length","listenPath","slice","delegateListener"],"mappings":";;+BAA6B,qB;;iCACE,4B;;AAE/B;AACA,SAASA,kBAAT,OAAmD;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,QAAY,QAAZA,QAAY;;AAC/C,QAAMC,aAAa,SAASC,YAAT,CAAsBC,WAAtB,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAE9CH,QAF8C,GAE9CA;;AAF8C,uBAG3CG,WAH2C;AAAA;AAAA;AAAA;;AAClD,YAAMC,6BAAN;AADkD,YAK1CC,aAL0C,GAKjBF,WALiB,CAK1CE,aAL0C;AAAA,YAK3BC,KAL2B,GAKjBH,WALiB,CAK3BG,KAL2B;;AAOlD;;AACA,YAAID,iBAAiB,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACpDE,+BAAmBF,aAAnB,EAAkCL,QAAlC,EAA4CD,OAA5C;AACH;;AAED;AACA,YAAIO,SAAS,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACpCE,4BAAgBF,KAAhB,EAAuBN,QAAvB,EAAiCD,OAAjC;AACH;;AAED;AACAA,gBAAQU,IAAR,CAAa,IAAb,EAAmBL,mBAAnB;AACH,KAnBD;;AAqBAH,eAAWS,SAAX,GAAuBX,OAAvB;;AAEA,WAAOE,UAAP;AACH;;AAED;AACA;AACA;iBACwBO,e;AAAT,SAASA,eAAT,CAAyBG,MAAzB,EAAiCC,QAAjC,EAA2Cb,OAA3C,EAAoD;AAC/D,QAAI,OAAOa,QAAP,KAAoB,QAAxB,EAAkC;AAC9BA,mBAAWA,SAASC,KAAT,CAAe,GAAf,CAAX,CAD8B,CACE;AACnC;;AAED;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACtC;AACA,YAAME,aAAaJ,SAASK,KAAT,CAAe,CAAf,EAAkBH,CAAlB,CAAnB;AACA,YAAMd,WAAWY,SAASK,KAAT,CAAeH,IAAI,CAAnB,CAAjB;;AAEAI,yBACIP,MADJ,EAEIK,UAFJ,oBAGoBJ,SAASE,CAAT,CAHpB,EAIIhB,mBAAmB;AACfC,4BADe;AAEfC;AAFe,SAAnB,CAJJ;AASH;AACJ","file":"_addtreelistener.js","sourcesContent":["import delegateListener from './_delegatelistener';\nimport removeTreeListener from '../off/_removetreelistener';\n\n// creates tree listener\nfunction createTreeListener({ handler, restPath }) {\n    const newHandler = function treeListener(changeEvent) {\n        const extendedChangeEvent = {\n            restPath,\n            ...changeEvent\n        };\n        const { previousValue, value } = changeEvent;\n\n        // removes listener for all branches of the path on old object\n        if (previousValue && typeof previousValue === 'object') {\n            removeTreeListener(previousValue, restPath, handler);\n        }\n\n        // adds listener for all branches of \"restPath\" path on newly assigned object\n        if (value && typeof value === 'object') {\n            addTreeListener(value, restPath, handler);\n        }\n\n        // call original handler\n        handler.call(this, extendedChangeEvent);\n    };\n\n    newHandler._callback = handler;\n\n    return newHandler;\n}\n\n// listens changes for all branches of given path\n// TODO: Pass context to addTreeListener\n// one of the most hard functions to understand\nexport default function addTreeListener(object, deepPath, handler) {\n    if (typeof deepPath === 'string') {\n        deepPath = deepPath.split('.'); // eslint-disable-line no-param-reassign\n    }\n\n    // iterate over all keys and delegate listener for all objects of given branch\n    for (let i = 0; i < deepPath.length; i++) {\n        // TODO: Array.prototype.slice method is slow\n        const listenPath = deepPath.slice(0, i);\n        const restPath = deepPath.slice(i + 1);\n\n        delegateListener(\n            object,\n            listenPath,\n            `_change:tree:${deepPath[i]}`,\n            createTreeListener({\n                handler,\n                restPath\n            })\n        );\n    }\n}\n"]}