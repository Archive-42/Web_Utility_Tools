'use strict';

var addListener = require('../_addlistener');

var defs = require('../../_core/defs');

var arrayAddHandler = require('./arrayaddhandler');

var objectSetHandler = require('./objectsethandler');

var arrayRemoveHandler = require('./arrayremovehandler');

var objectRemoveHandler = require('./objectremovehandler');

var changeHandler = require('./changehandler');

// adds delegated event listener to an object by given path
module.exports = delegateListener;
function delegateListener(object, givenPath, name, callback, context) {
    var info = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

    // if typeof path is string and path is not empty string then split it
    var path = typeof givenPath === 'string' && givenPath !== '' ? givenPath.split('.') : givenPath;

    if (!path || !path.length) {
        // if no path then add simple listener
        addListener(object, name, callback, context, info);
    } else {
        // else do all magic
        var key = path[0];
        var pathStr = void 0; // needed for undelegation

        if (path.length > 1) {
            var _source = path,
                _l = _source.length,
                _i = 1 || 0,
                _end = null || _l,
                _j = 0,
                _result = Array(_end - _i);

            while (_i < _end) {
                _result[_j++] = _source[_i++];
            }

            path = _result;
            pathStr = path.join('.');
        } else {
            path = [];
            pathStr = path[0] || '';
        }

        var delegatedData = {
            path: path,
            name: name,
            callback: callback,
            context: context,
            info: info,
            object: object
        };

        if (key === '*') {
            // handling asterisk events
            // { skipChecks: true } allows to use same event name and event handler few times
            if (object.isMatreshkaArray) {
                // the event is triggered when something is added to an array
                addListener(object, '_asterisk:add', arrayAddHandler, null, {
                    delegatedData: delegatedData,
                    pathStr: pathStr,
                    skipChecks: true
                });

                // the event is triggered when something is removed from an array
                addListener(object, '_asterisk:remove', arrayRemoveHandler, null, {
                    delegatedData: delegatedData,
                    pathStr: pathStr,
                    skipChecks: true
                });

                // call handler manually to delegate listener for currently existing data props
                arrayAddHandler({
                    added: object
                }, delegatedData);
            } else if (object.isMatreshkaObject) {
                var def = defs.get(object);

                // the event is triggered when data prop is changed
                addListener(object, '_asterisk:set', objectSetHandler, null, {
                    delegatedData: delegatedData,
                    pathStr: pathStr,
                    skipChecks: true
                });

                // the event is triggered when data prop is removed
                addListener(object, '_asterisk:remove', objectRemoveHandler, null, {
                    delegatedData: delegatedData,
                    pathStr: pathStr,
                    skipChecks: true
                });

                // delegate listener for currently existing data props

                for (var _target = def.keys, _keys = Object.keys(_target), _i2 = 0, defKey, _, _l2 = _keys.length; (defKey = _keys[_i2], _ = _target[defKey]), _i2 < _l2; _i2++) {
                    var item = object[defKey];
                    if (item && typeof item === 'object') {
                        delegateListener(item, path, name, callback, context, info);
                    }
                }
            }
        } else {
            // handling non-asterisk delegated event

            // the event is triggered by "set"
            addListener(object, '_change:delegated:' + key, changeHandler, null, {
                delegatedData: delegatedData,
                pathStr: pathStr
            });

            // call handler manually
            changeHandler({
                value: object[key]
            }, delegatedData);
        }
    }
}
//# sourceMappingURL=index.js.map