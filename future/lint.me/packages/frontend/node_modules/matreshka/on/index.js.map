{"version":3,"sources":["../../src/on/index.js"],"names":["on","object","givenNames","callback","triggerOnInit","context","isMatreshka","checkObjectType","isNamesVarArray","Array","namesObjName","namesObjCallback","matreshkaError","names","split","splitBySpaceReg","name","delegatedEventParts","length","path","delegatedName","delegateListener","addListener","call"],"mappings":";;8BAA4B,uB;;8BACA,6B;;6BACD,4B;;0BACH,gB;;+BACK,qB;;AAE7B;iBACwBA,E;AAAT,SAASA,EAAT,CAAYC,MAAZ,EAAoBC,UAApB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyDC,OAAzD,EAAkE;AAC7E,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,kBAAUD,aAAV;AACAA,wBAAgBD,QAAhB;AACAA,mBAAWD,UAAX;AACAA,qBAAaD,MAAb;AACAA,iBAAS,IAAT;AACA;AACH,KATD,MASO;AACH;AACAM,wBAAgBN,MAAhB,EAAwB,IAAxB;AACH;;AAED,QAAMO,kBAAkBN,sBAAsBO,KAA9C;;AAEA;AACA,QAAIP,cAAc,OAAOA,UAAP,KAAsB,QAApC,IAAgD,CAACM,eAArD,EAAsE;AAAA,2BACtDN,UADsD,wCACvBQ,YADuB,EACzCC,gBADyC,sBACvBD,YADuB,cACzCC,gBADyC,WACvBD,YADuB;AAE9DV,eAAGC,MAAH,EAAWS,YAAX,EAAyBC,gBAAzB,EAA2CR,QAA3C,EAAqDC,aAArD;AAF8D;;AAGlE,eAAOH,MAAP;AACH;;AAED,QAAI,OAAOC,UAAP,KAAsB,QAAtB,IAAkC,CAACM,eAAvC,EAAwD;AACpD,cAAMI,eAAe,eAAf,EAAgC,EAAEC,OAAOX,UAAT,EAAhC,CAAN;AACH;;AAED;AACA;AACA,QAAMW,QAAQL,kBAAkBN,UAAlB,GAA+BA,WAAWY,KAAX,CAAiBC,eAAjB,CAA7C;;AAEA;AACA,QAAI,OAAOX,aAAP,KAAyB,SAAzB,IAAsC,OAAOA,aAAP,KAAyB,WAAnE,EAAgF;AAAA,mBAEjD,CAACA,aAAD,EAAgBC,OAAhB,CAFiD;AAC5E;;AACCA,eAF2E;AAElED,qBAFkE;AAG/E;;AAeD;AAnD6E,wBAsChES,KAtCgE,cAsCxDG,IAtCwD,yBAsCxDA,IAtCwD,6CAsC/C;AAC1B,YAAMC,sBAAsBD,KAAKF,KAAL,CAAW,GAAX,CAA5B;;AAEA,YAAIG,oBAAoBC,MAApB,GAA6B,CAAjC,EAAoC;AAChC;AADgC,gBAEzBC,IAFyB,GAEFF,mBAFE;AAAA,gBAEnBG,aAFmB,GAEFH,mBAFE;;AAGhCI,6BAAiBpB,MAAjB,EAAyBkB,IAAzB,EAA+BC,aAA/B,EAA8CjB,QAA9C,EAAwDE,WAAWJ,MAAnE;AACH,SAJD,MAIO;AACH;AACAqB,wBAAYrB,MAAZ,EAAoBe,IAApB,EAA0Bb,QAA1B,EAAoCE,OAApC;AACH;AACJ;;AAGD,QAAID,kBAAkB,IAAtB,EAA4B;AACxBD,iBAASoB,IAAT,CAAclB,WAAWJ,MAAzB,EAAiC,EAAEG,4BAAF,EAAjC;AACH;;AAED,WAAOH,MAAP;AACH","file":"index.js","sourcesContent":["import splitBySpaceReg from './_splitbyspaceregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport matreshkaError from '../_helpers/matreshkaerror';\nimport addListener from './_addlistener';\nimport delegateListener from './_delegatelistener';\n\n// adds event listener\nexport default function on(object, givenNames, callback, triggerOnInit, context) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        context = triggerOnInit;\n        triggerOnInit = callback;\n        callback = givenNames;\n        givenNames = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'on');\n    }\n\n    const isNamesVarArray = givenNames instanceof Array;\n\n    // allow to pass name-handler object\n    if (givenNames && typeof givenNames === 'object' && !isNamesVarArray) {\n        nofn.forOwn(givenNames, (namesObjCallback, namesObjName) =>\n            on(object, namesObjName, namesObjCallback, callback, triggerOnInit));\n        return object;\n    }\n\n    if (typeof givenNames !== 'string' && !isNamesVarArray) {\n        throw matreshkaError('on:names_type', { names: givenNames });\n    }\n\n    // split by spaces\n    // TODO: Array of names passed to on method is non-documented feature\n    const names = isNamesVarArray ? givenNames : givenNames.split(splitBySpaceReg);\n\n    // flip triggerOnInit and context when triggerOnInit is not boolean\n    if (typeof triggerOnInit !== 'boolean' && typeof triggerOnInit !== 'undefined') {\n        // eslint-disable-next-line no-param-reassign\n        [context, triggerOnInit] = [triggerOnInit, context];\n    }\n\n    nofn.forEach(names, (name) => {\n        const delegatedEventParts = name.split('@');\n\n        if (delegatedEventParts.length > 1) {\n            // if @ exists in event name then this is delegated event\n            const [path, delegatedName] = delegatedEventParts;\n            delegateListener(object, path, delegatedName, callback, context || object);\n        } else {\n            // if not, this is simple event\n            addListener(object, name, callback, context);\n        }\n    });\n\n    // call callback immediatelly if triggerOnInit is true\n    if (triggerOnInit === true) {\n        callback.call(context || object, { triggerOnInit });\n    }\n\n    return object;\n}\n"]}