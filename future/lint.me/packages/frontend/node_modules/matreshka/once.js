'use strict';

var on = require('./on');

var checkObjectType = require('./_helpers/checkobjecttype');

var off = require('./off');

var apply = require('./_helpers/apply');

// adds event listener which will be removed immediately after its first call
module.exports = once;
function once(object, names, givenCallback, context) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        context = givenCallback;
        givenCallback = names;
        names = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'once');
    }

    var isNamesVarArray = names instanceof Array;

    // allow to pass name-handler object
    if (names && typeof names === 'object' && !isNamesVarArray) {
        for (var _target = names, _keys = Object.keys(_target), _i = 0, namesObjName, namesObjCallback, _l = _keys.length; (namesObjName = _keys[_i], namesObjCallback = _target[namesObjName]), _i < _l; _i++) {
            once(object, namesObjName, namesObjCallback, givenCallback)
        }

        return object;
    }

    var callback = function onceCallback() {
        apply(givenCallback, this, arguments);
        // remove event listener after its call
        off(object, names, onceCallback, context);
    };

    // allow to remove event listener py passing original callback to "off"
    callback._callback = givenCallback;

    return on(object, names, callback, context);
}
//# sourceMappingURL=once.js.map