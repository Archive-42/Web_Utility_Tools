{"version":3,"sources":["../src/once.js"],"names":["once","object","names","givenCallback","context","isMatreshka","checkObjectType","isNamesVarArray","Array","namesObjName","namesObjCallback","callback","onceCallback","apply","arguments","off","_callback","on"],"mappings":";;iBAAe,M;;8BACa,4B;;kBACZ,O;;oBACE,kB;;AAElB;iBACwBA,I;AAAT,SAASA,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,aAA7B,EAA4CC,OAA5C,EAAqD;AAChE,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,kBAAUD,aAAV;AACAA,wBAAgBD,KAAhB;AACAA,gBAAQD,MAAR;AACAA,iBAAS,IAAT;AACA;AACH,KARD,MAQO;AACH;AACAK,wBAAgBL,MAAhB,EAAwB,MAAxB;AACH;;AAED,QAAMM,kBAAkBL,iBAAiBM,KAAzC;;AAEA;AACA,QAAIN,SAAS,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,CAACK,eAA3C,EAA4D;AAAA,2BAC5CL,KAD4C,wCAClBO,YADkB,EACpCC,gBADoC,sBAClBD,YADkB,cACpCC,gBADoC,WAClBD,YADkB;AAEpDT,iBAAKC,MAAL,EAAaQ,YAAb,EAA2BC,gBAA3B,EAA6CP,aAA7C;AAFoD;;AAGxD,eAAOF,MAAP;AACH;;AAED,QAAMU,WAAW,SAASC,YAAT,GAAwB;AACrCC,cAAMV,aAAN,EAAqB,IAArB,EAA2BW,SAA3B;AACA;AACAC,YAAId,MAAJ,EAAYC,KAAZ,EAAmBU,YAAnB,EAAiCR,OAAjC;AACH,KAJD;;AAMA;AACAO,aAASK,SAAT,GAAqBb,aAArB;;AAEA,WAAOc,GAAGhB,MAAH,EAAWC,KAAX,EAAkBS,QAAlB,EAA4BP,OAA5B,CAAP;AACH","file":"once.js","sourcesContent":["import on from './on';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport off from './off';\nimport apply from './_helpers/apply';\n\n// adds event listener which will be removed immediately after its first call\nexport default function once(object, names, givenCallback, context) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        context = givenCallback;\n        givenCallback = names;\n        names = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'once');\n    }\n\n    const isNamesVarArray = names instanceof Array;\n\n    // allow to pass name-handler object\n    if (names && typeof names === 'object' && !isNamesVarArray) {\n        nofn.forOwn(names, (namesObjCallback, namesObjName) =>\n            once(object, namesObjName, namesObjCallback, givenCallback));\n        return object;\n    }\n\n    const callback = function onceCallback() {\n        apply(givenCallback, this, arguments);\n        // remove event listener after its call\n        off(object, names, onceCallback, context);\n    };\n\n    // allow to remove event listener py passing original callback to \"off\"\n    callback._callback = givenCallback;\n\n    return on(object, names, callback, context);\n}\n"]}