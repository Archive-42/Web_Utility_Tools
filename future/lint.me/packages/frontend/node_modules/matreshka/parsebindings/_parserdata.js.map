{"version":3,"sources":["../../src/parsebindings/_parserdata.js"],"names":["parserData","calc","leftBracket","source","object","parserBrackets","key","rightBracket","escLeftBracket","handler","left","replace","escRightBracket","right","bindingReg","RegExp","strictBindingReg","debounceCalc"],"mappings":";;mBAAiB,S;;6BACU,mB;;AAE3B,IAAMA,aAAa,EAAnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,KAAKD,UAAL,EAAiB;AACbE,iBAAa;AACTC,gBAAQ;AACJC,oBAAQC,cADJ;AAEJC,iBAAK;AAFD;AADC,KADA;AAObC,kBAAc;AACVJ,gBAAQ;AACJC,oBAAQC,cADJ;AAEJC,iBAAK;AAFD;AADE,KAPD;AAabE,oBAAgB;AACZL,gBAAQ,aADI;AAEZM,iBAAS;AAAA,mBAAQC,KAAKC,OAAL,CAAa,aAAb,EAA4B,MAA5B,CAAR;AAAA;AAFG,KAbH;AAiBbC,qBAAiB;AACbT,gBAAQ,cADK;AAEbM,iBAAS;AAAA,mBAASI,MAAMF,OAAN,CAAc,YAAd,EAA4B,MAA5B,CAAT;AAAA;AAFI,KAjBJ;AAqBbG,gBAAY;AACRX,gBAAQ,CAAC,gBAAD,EAAmB,iBAAnB,CADA;AAERM,iBAAS,UAACC,IAAD,EAAOG,KAAP;AAAA,mBAAiB,IAAIE,MAAJ,CAAcL,IAAd,qBAAkCG,KAAlC,EAA2C,GAA3C,CAAjB;AAAA;AAFD,KArBC;AAyBbG,sBAAkB;AACdb,gBAAQ,CAAC,gBAAD,EAAmB,iBAAnB,CADM;AAEdM,iBAAS,UAACC,IAAD,EAAOG,KAAP;AAAA,mBAAiB,IAAIE,MAAJ,OAAeL,IAAf,qBAAmCG,KAAnC,QAA6C,GAA7C,CAAjB;AAAA;AAFK;AAzBL,CAAjB,EA6BG;AACCI,kBAAc,KADf,CACqB;AADrB,CA7BH;;iBAiCejB,U","file":"_parserdata.js","sourcesContent":["import calc from '../calc';\nimport parserBrackets from '../parserbrackets';\n\nconst parserData = {};\n\n// since Matreshka allows to change parser brackets via parserBrackets objects\n// the parser needs to generate required regular expressions and escaped brackets every time\n// when parseBindings is called\n// to optimize this behavior parserData object is created\n// it calculates needed data every time when parserBrackets are changed\n// and when parseBindings function is called it uses previously generated regeps\n// from parserData object\ncalc(parserData, {\n    leftBracket: {\n        source: {\n            object: parserBrackets,\n            key: 'left'\n        }\n    },\n    rightBracket: {\n        source: {\n            object: parserBrackets,\n            key: 'right'\n        }\n    },\n    escLeftBracket: {\n        source: 'leftBracket',\n        handler: left => left.replace(/(\\[|\\(|\\?)/g, '\\\\$1')\n    },\n    escRightBracket: {\n        source: 'rightBracket',\n        handler: right => right.replace(/(]|\\)|\\?)/g, '\\\\$1')\n    },\n    bindingReg: {\n        source: ['escLeftBracket', 'escRightBracket'],\n        handler: (left, right) => new RegExp(`${left}\\\\s*(.+?)\\\\s*${right}`, 'g')\n    },\n    strictBindingReg: {\n        source: ['escLeftBracket', 'escRightBracket'],\n        handler: (left, right) => new RegExp(`^${left}\\\\s*(.+?)\\\\s*${right}$`, 'g')\n    }\n}, {\n    debounceCalc: false // we need to get new regexps immediately when brackets are changed\n});\n\nexport default parserData;\n"]}