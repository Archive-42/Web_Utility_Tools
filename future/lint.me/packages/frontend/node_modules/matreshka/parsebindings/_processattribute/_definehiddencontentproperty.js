'use strict';

var calc = require('../../calc');

var parserData = require('../_parserdata');

var hiddenPropertyPrefix = ('' + Math.random()).replace('0.', 'hidden');
var hiddenPropertyIndex = 0;

// defines hiden (without accessors) computed property
// that dependent on given properties ('keys') as text template describes
// for example if text='{{x}} blah {{y}}', x='foo', y='bar'
// then the new property should have value 'foo blah bar'
module.exports = defineHiddenContentProperty;
function defineHiddenContentProperty(_ref) {
    var object = _ref.object,
        keys = _ref.keys,
        text = _ref.text;

    var key = '' + hiddenPropertyPrefix + hiddenPropertyIndex;
    var regs = {};
    var escLeftBracket = parserData.escLeftBracket,
        escRightBracket = parserData.escRightBracket;


    hiddenPropertyIndex += 1;

    // create and cache regular expressions which will help us to
    // change target property value quickly when sources are changed
    // TODO: We need better parser!
    for (var i = 0; i < keys.length; i++) {
        regs[keys[i]] = new RegExp(escLeftBracket + '\\s*' + keys[i] + '\\s*' + escRightBracket, 'g');
    }

    calc(object, key, keys, function calcHandler() {
        var value = text;

        // replace things like {{x}} by actual values
        for (var _i = 0; _i < keys.length; _i++) {
            value = value.replace(regs[keys[_i]], arguments[_i]);
        }

        return value;
    }, {
        isTargetPropertyHidden: true,
        debounceCalc: false
    });

    return key;
}
//# sourceMappingURL=_definehiddencontentproperty.js.map