{"version":3,"sources":["../../../src/parsebindings/_processattribute/_definehiddencontentproperty.js"],"names":["hiddenPropertyPrefix","Math","random","replace","hiddenPropertyIndex","defineHiddenContentProperty","object","keys","text","key","regs","escLeftBracket","parserData","escRightBracket","i","length","RegExp","calc","calcHandler","value","arguments","isTargetPropertyHidden","debounceCalc"],"mappings":";;mBAAiB,Y;;yBACM,gB;;AAEvB,IAAMA,uBAAuB,MAAGC,KAAKC,MAAL,EAAH,EAAmBC,OAAnB,CAA2B,IAA3B,EAAiC,QAAjC,CAA7B;AACA,IAAIC,sBAAsB,CAA1B;;AAEA;AACA;AACA;AACA;iBACwBC,2B;AAAT,SAASA,2BAAT,OAIZ;AAAA,QAHCC,MAGD,QAHCA,MAGD;AAAA,QAFCC,IAED,QAFCA,IAED;AAAA,QADCC,IACD,QADCA,IACD;;AACC,QAAMC,WAAST,oBAAT,GAAgCI,mBAAtC;AACA,QAAMM,OAAO,EAAb;AAFD,QAGSC,cAHT,GAG6CC,UAH7C,CAGSD,cAHT;AAAA,QAGyBE,eAHzB,GAG6CD,UAH7C,CAGyBC,eAHzB;;;AAKCT,2BAAuB,CAAvB;;AAEA;AACA;AACA;AACA,SAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIP,KAAKQ,MAAzB,EAAiCD,GAAjC,EAAsC;AAClCJ,aAAKH,KAAKO,CAAL,CAAL,IAAgB,IAAIE,MAAJ,CAAcL,cAAd,YAAmCJ,KAAKO,CAAL,CAAnC,YAAiDD,eAAjD,EAAoE,GAApE,CAAhB;AACH;;AAEDI,SAAKX,MAAL,EAAaG,GAAb,EAAkBF,IAAlB,EAAwB,SAASW,WAAT,GAAuB;AAC3C,YAAIC,QAAQX,IAAZ;;AAEA;AACA,aAAK,IAAIM,KAAI,CAAb,EAAgBA,KAAIP,KAAKQ,MAAzB,EAAiCD,IAAjC,EAAsC;AAClCK,oBAAQA,MAAMhB,OAAN,CAAcO,KAAKH,KAAKO,EAAL,CAAL,CAAd,EAA6BM,UAAUN,EAAV,CAA7B,CAAR;AACH;;AAED,eAAOK,KAAP;AACH,KATD,EASG;AACCE,gCAAwB,IADzB;AAECC,sBAAc;AAFf,KATH;;AAcA,WAAOb,GAAP;AACH","file":"_definehiddencontentproperty.js","sourcesContent":["import calc from '../../calc';\nimport parserData from '../_parserdata';\n\nconst hiddenPropertyPrefix = `${Math.random()}`.replace('0.', 'hidden');\nlet hiddenPropertyIndex = 0;\n\n// defines hiden (without accessors) computed property\n// that dependent on given properties ('keys') as text template describes\n// for example if text='{{x}} blah {{y}}', x='foo', y='bar'\n// then the new property should have value 'foo blah bar'\nexport default function defineHiddenContentProperty({\n    object,\n    keys,\n    text\n}) {\n    const key = `${hiddenPropertyPrefix}${hiddenPropertyIndex}`;\n    const regs = {};\n    const { escLeftBracket, escRightBracket } = parserData;\n\n    hiddenPropertyIndex += 1;\n\n    // create and cache regular expressions which will help us to\n    // change target property value quickly when sources are changed\n    // TODO: We need better parser!\n    for (let i = 0; i < keys.length; i++) {\n        regs[keys[i]] = new RegExp(`${escLeftBracket}\\\\s*${keys[i]}\\\\s*${escRightBracket}`, 'g');\n    }\n\n    calc(object, key, keys, function calcHandler() {\n        let value = text;\n\n        // replace things like {{x}} by actual values\n        for (let i = 0; i < keys.length; i++) {\n            value = value.replace(regs[keys[i]], arguments[i]);\n        }\n\n        return value;\n    }, {\n        isTargetPropertyHidden: true,\n        debounceCalc: false\n    });\n\n    return key;\n}\n"]}