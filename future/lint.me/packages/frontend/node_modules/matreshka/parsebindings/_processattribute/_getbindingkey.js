'use strict';

var parserData = require('../_parserdata');

var defineHiddenContentProperty = require('./_definehiddencontentproperty');

// analyzes string and returns only one key which will be actually bound to an attribute
module.exports = getBindingKey;
function getBindingKey(_ref) {
    var object = _ref.object,
        text = _ref.text;
    var strictBindingReg = parserData.strictBindingReg,
        bindingReg = parserData.bindingReg;

    var keys = [];

    var execResult = void 0;
    var key = void 0;

    strictBindingReg.lastIndex = 0;
    bindingReg.lastIndex = 0;

    // extract keys given in parser brackers
    // '{{x}} {{y}}' -> ['x', 'y']
    while (execResult = bindingReg.exec(text)) {
        keys.push(execResult[1]);
    }

    if (keys.length === 1 && strictBindingReg.test(text)) {
        // if there is only one key and if only binding substring is present in a text
        // in other words '{{x}}' is given instead of '{{x}} {{y}}' or '{{x}}foo'
        // then don't create computable property and use that key (eg 'x') for binding
        key = keys[0];
    } else {
        // create hidden computable property
        key = defineHiddenContentProperty({
            object: object,
            keys: keys,
            text: text
        });
    }

    return key;
}
//# sourceMappingURL=_getbindingkey.js.map