{"version":3,"sources":["../../../src/parsebindings/_processattribute/_getbindingkey.js"],"names":["getBindingKey","object","text","strictBindingReg","parserData","bindingReg","keys","execResult","key","lastIndex","exec","push","length","test","defineHiddenContentProperty"],"mappings":";;yBAAuB,gB;;0CACiB,gC;;AAExC;iBACwBA,a;AAAT,SAASA,aAAT,OAGZ;AAAA,QAFCC,MAED,QAFCA,MAED;AAAA,QADCC,IACD,QADCA,IACD;AAAA,QACSC,gBADT,GAC0CC,UAD1C,CACSD,gBADT;AAAA,QAC2BE,UAD3B,GAC0CD,UAD1C,CAC2BC,UAD3B;;AAEC,QAAMC,OAAO,EAAb;;AAEA,QAAIC,mBAAJ;AACA,QAAIC,YAAJ;;AAEAL,qBAAiBM,SAAjB,GAA6B,CAA7B;AACAJ,eAAWI,SAAX,GAAuB,CAAvB;;AAEA;AACA;AACA,WAAQF,aAAaF,WAAWK,IAAX,CAAgBR,IAAhB,CAArB,EAA6C;AACzCI,aAAKK,IAAL,CAAUJ,WAAW,CAAX,CAAV;AACH;;AAED,QAAID,KAAKM,MAAL,KAAgB,CAAhB,IAAqBT,iBAAiBU,IAAjB,CAAsBX,IAAtB,CAAzB,EAAsD;AAClD;AACA;AACA;AACAM,cAAMF,KAAK,CAAL,CAAN;AACH,KALD,MAKO;AACH;AACAE,cAAMM,4BAA4B;AAC9Bb,0BAD8B;AAE9BK,sBAF8B;AAG9BJ;AAH8B,SAA5B,CAAN;AAKH;;AAED,WAAOM,GAAP;AACH","file":"_getbindingkey.js","sourcesContent":["import parserData from '../_parserdata';\nimport defineHiddenContentProperty from './_definehiddencontentproperty';\n\n// analyzes string and returns only one key which will be actually bound to an attribute\nexport default function getBindingKey({\n    object,\n    text // for example 'Hello, {{x}}'\n}) {\n    const { strictBindingReg, bindingReg } = parserData;\n    const keys = [];\n\n    let execResult;\n    let key;\n\n    strictBindingReg.lastIndex = 0;\n    bindingReg.lastIndex = 0;\n\n    // extract keys given in parser brackers\n    // '{{x}} {{y}}' -> ['x', 'y']\n    while ((execResult = bindingReg.exec(text))) {\n        keys.push(execResult[1]);\n    }\n\n    if (keys.length === 1 && strictBindingReg.test(text)) {\n        // if there is only one key and if only binding substring is present in a text\n        // in other words '{{x}}' is given instead of '{{x}} {{y}}' or '{{x}}foo'\n        // then don't create computable property and use that key (eg 'x') for binding\n        key = keys[0];\n    } else {\n        // create hidden computable property\n        key = defineHiddenContentProperty({\n            object,\n            keys,\n            text\n        });\n    }\n\n    return key;\n}\n"]}