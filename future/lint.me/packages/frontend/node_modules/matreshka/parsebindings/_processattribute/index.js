'use strict';

var getBindingKey = require('./_getbindingkey');

var bindNode = require('../../bindnode');

var lookForBinder = require('../../lookforbinder');

// a binder for instance of Attr
var attributeBinder = {
    setValue: function (value) {
        this.value = value;
    }
};

// adds binding for an attribute
// its logic is much harder than for text node
// check out imported modules for more info
module.exports = processAttribute;
function processAttribute(_ref) {
    var node = _ref.node,
        attribute = _ref.attribute,
        object = _ref.object,
        eventOptions = _ref.eventOptions;
    var name = attribute.name,
        value = attribute.value;
    var type = node.type;
    // get a key which will be actually bound to an attribute
    // getBindingKey analyzes given value, creates computable property and returns its key

    var key = getBindingKey({
        object: object,
        text: value
    });
    var probablyValueInput = name === 'value' && type !== 'checkbox' && type !== 'radio';
    var probablyCheckableInput = name === 'checked' && (type === 'checkbox' || type === 'radio');

    var defaultBinder = void 0;

    if (probablyValueInput || probablyCheckableInput) {
        defaultBinder = lookForBinder(node);
    }

    if (defaultBinder) {
        // if deault binder is found then this is default HTML5 form element
        // remove the attribute and use found binder
        node.removeAttribute(name);
        bindNode(object, key, node, defaultBinder, eventOptions);
    } else {
        // simply bind an attribute
        bindNode(object, key, attribute, attributeBinder, eventOptions);
    }
}
//# sourceMappingURL=index.js.map