{"version":3,"sources":["../../../src/parsebindings/_processattribute/index.js"],"names":["attributeBinder","setValue","value","processAttribute","node","attribute","object","eventOptions","name","type","key","getBindingKey","text","probablyValueInput","probablyCheckableInput","defaultBinder","lookForBinder","removeAttribute","bindNode"],"mappings":";;4BAA0B,kB;;uBACL,gB;;4BACK,qB;;AAE1B;AACA,IAAMA,kBAAkB;AACpBC,YADoB,YACXC,KADW,EACJ;AACZ,aAAKA,KAAL,GAAaA,KAAb;AACH;AAHmB,CAAxB;;AAMA;AACA;AACA;iBACwBC,gB;AAAT,SAASA,gBAAT,OAKZ;AAAA,QAJCC,IAID,QAJCA,IAID;AAAA,QAHCC,SAGD,QAHCA,SAGD;AAAA,QAFCC,MAED,QAFCA,MAED;AAAA,QADCC,YACD,QADCA,YACD;AAAA,QACSC,IADT,GACyBH,SADzB,CACSG,IADT;AAAA,QACeN,KADf,GACyBG,SADzB,CACeH,KADf;AAAA,QAESO,IAFT,GAEkBL,IAFlB,CAESK,IAFT;AAGC;AACA;;AACA,QAAMC,MAAMC,cAAc;AACtBL,sBADsB;AAEtBM,cAAMV;AAFgB,KAAd,CAAZ;AAIA,QAAMW,qBAAqBL,SAAS,OAAT,IAAoBC,SAAS,UAA7B,IAA2CA,SAAS,OAA/E;AACA,QAAMK,yBAAyBN,SAAS,SAAT,KAAuBC,SAAS,UAAT,IAAuBA,SAAS,OAAvD,CAA/B;;AAEA,QAAIM,sBAAJ;;AAEA,QAAIF,sBAAsBC,sBAA1B,EAAkD;AAC9CC,wBAAgBC,cAAcZ,IAAd,CAAhB;AACH;;AAED,QAAIW,aAAJ,EAAmB;AACf;AACA;AACAX,aAAKa,eAAL,CAAqBT,IAArB;AACAU,iBAASZ,MAAT,EAAiBI,GAAjB,EAAsBN,IAAtB,EAA4BW,aAA5B,EAA2CR,YAA3C;AACH,KALD,MAKO;AACH;AACAW,iBAASZ,MAAT,EAAiBI,GAAjB,EAAsBL,SAAtB,EAAiCL,eAAjC,EAAkDO,YAAlD;AACH;AACJ","file":"index.js","sourcesContent":["import getBindingKey from './_getbindingkey';\nimport bindNode from '../../bindnode';\nimport lookForBinder from '../../lookforbinder';\n\n// a binder for instance of Attr\nconst attributeBinder = {\n    setValue(value) {\n        this.value = value;\n    }\n};\n\n// adds binding for an attribute\n// its logic is much harder than for text node\n// check out imported modules for more info\nexport default function processAttribute({\n    node,\n    attribute,\n    object,\n    eventOptions\n}) {\n    const { name, value } = attribute;\n    const { type } = node;\n    // get a key which will be actually bound to an attribute\n    // getBindingKey analyzes given value, creates computable property and returns its key\n    const key = getBindingKey({\n        object,\n        text: value\n    });\n    const probablyValueInput = name === 'value' && type !== 'checkbox' && type !== 'radio';\n    const probablyCheckableInput = name === 'checked' && (type === 'checkbox' || type === 'radio');\n\n    let defaultBinder;\n\n    if (probablyValueInput || probablyCheckableInput) {\n        defaultBinder = lookForBinder(node);\n    }\n\n    if (defaultBinder) {\n        // if deault binder is found then this is default HTML5 form element\n        // remove the attribute and use found binder\n        node.removeAttribute(name);\n        bindNode(object, key, node, defaultBinder, eventOptions);\n    } else {\n        // simply bind an attribute\n        bindNode(object, key, attribute, attributeBinder, eventOptions);\n    }\n}\n"]}