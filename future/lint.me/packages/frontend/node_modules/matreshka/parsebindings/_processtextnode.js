'use strict';

var parserData = require('./_parserdata');

var bindNode = require('../bindnode');

var textNodeBinder = {
    setValue: function (value) {
        this.textContent = typeof value === 'undefined' ? '' : value;
    }
};

// adds binding for text node
// it splits up one text node into "simple text nodes"
// and "bound text nodes" and removes original text node
module.exports = processTextNode;
function processTextNode(_ref) {
    var object = _ref.object,
        node = _ref.node,
        textNode = _ref.textNode,
        eventOptions = _ref.eventOptions;
    var bindingReg = parserData.bindingReg;
    var textContent = textNode.textContent;
    var _window = window,
        document = _window.document;


    bindingReg.lastIndex = 0;

    // tokens variable contains normal text as odd items
    // and bound keys as even items
    // 'foo{{x}}bar{{y}}baz{{z}}' -> ['foo', 'x', 'bar', 'y', 'baz', 'z', '']
    var tokens = textContent.split(bindingReg);

    // fragment contains all new text nodes
    var fragment = document.createDocumentFragment();

    for (var _target = tokens, index = 0, token, _l = _target.length; token = _target[index], index < _l; index++) {
        if (token) {
            var newTextNode = document.createTextNode(token);
            fragment.appendChild(newTextNode);

            // if tokens item is even then it is a key
            // which needs to be bound to newly created text node
            if (index % 2 !== 0) {
                bindNode(object, token, newTextNode, textNodeBinder, eventOptions);
            }
        }
    }

    node.insertBefore(fragment, textNode);
    node.removeChild(textNode);
}
//# sourceMappingURL=_processtextnode.js.map