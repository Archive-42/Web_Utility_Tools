{"version":3,"sources":["../src/remove.js"],"names":["remove","object","givenKey","eventOptions","isMatreshka","checkObjectType","def","defs","get","silent","keys","Array","i","key","matreshkaError","props","propDef","value","unbindNode","removeEventPrefies","prefix","removeListener","extendedEventOptions","triggerOne","length"],"mappings":";;yBAAuB,c;;yBACA,uB;;6BACI,uB;;mBACV,c;;8BACW,4B;;6BACD,2B;;AAE3B;AACA;iBACwBA,M;AAAT,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,YAAlC,EAAgD;AAC3D,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,uBAAeD,QAAf;AACAA,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACA;AACH,KAPD,MAOO;AACH;AACAI,wBAAgBJ,MAAhB,EAAwB,QAAxB;AACH;;AAEDE,mBAAeA,gBAAgB,EAA/B,CAb2D,CAaxB;AACnC,QAAMG,MAAMC,KAAKC,GAAL,CAASP,MAAT,CAAZ;AAd2D,wBAexCE,YAfwC;AAAA,QAenDM,MAfmD,iBAenDA,MAfmD;AAgB3D;;AACA,QAAMC,OAAOR,oBAAoBS,KAApB,GAA4BT,QAA5B,GAAuC,CAACA,QAAD,CAApD;;AAjB2D,0BAmBlDU,CAnBkD;AAoBvD,YAAMC,MAAMH,KAAKE,CAAL,CAAZ;;AAEA;AACA,YAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzB,kBAAMC,eAAe,iBAAf,EAAkC,EAAED,QAAF,EAAlC,CAAN;AACH;;AAED,YAAME,QAAQT,OAAOA,IAAIS,KAAzB;AACA,YAAMC,UAAUD,SAASA,MAAMF,GAAN,CAAzB;;AAEA;AACA,YAAI,CAACG,OAAL,EAAc;AACV,mBAAOf,OAAOY,GAAP,CAAP;AACA;AACH;;AAlCsD,YAoC/CI,KApC+C,GAoCrCD,OApCqC,CAoC/CC,KApC+C;;AAsCvD;;AACAC,mBAAWjB,MAAX,EAAmBY,GAAnB;;AAEA;AACA,YAAMM,qBAAqB,CACvB,cADuB,EAEvB,kBAFuB,EAGvB,mBAHuB,EAIvB,cAJuB,EAKvB,QALuB,EAMvB,cANuB,EAOvB,MAPuB,EAQvB,QARuB,CAA3B;;AAWA;;AAGA;AAxDuD,2BAsD1CA,kBAtD0C,cAsDtBC,MAtDsB,uBAsDtBA,MAtDsB;AAsDZC,2BAAepB,MAAf,EAA0BmB,MAA1B,SAAoCP,GAApC;AAtDY;;AAyDvD,eAAOE,MAAMF,GAAN,CAAP;;AAEA;AACA,eAAOZ,OAAOY,GAAP,CAAP;;AA5DuD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBA+DnDA,GA/DmD,GA+DnDA;AA/DmD,gBAgEnDI,KAhEmD,GAgEnDA;;AAhEmD,uBAiEhDd,YAjEgD;AAAA;AAAA;AAAA;;AA8DvD,YAAMmB,8BAAN;;AAMA;AACAC,mBAAWtB,MAAX,EAAmB,mBAAnB,EAAwCqB,oBAAxC;;AAEA;AACA,YAAI,CAACb,MAAL,EAAa;AACTc,uBAAWtB,MAAX,EAAmB,QAAnB,EAA6BqB,oBAA7B;AACAC,uBAAWtB,MAAX,cAA6BY,GAA7B,EAAoCS,oBAApC;AACH;AA3EsD;;AAmB3D,SAAK,IAAIV,IAAI,CAAb,EAAgBA,IAAIF,KAAKc,MAAzB,EAAiCZ,GAAjC,EAAsC;AAAA,yBAA7BA,CAA6B;;AAAA,iCAc9B;AA2CP;AACJ","file":"remove.js","sourcesContent":["import unbindNode from './unbindnode';\nimport triggerOne from './trigger/_triggerone';\nimport removeListener from './off/_removelistener';\nimport defs from './_core/defs';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport matreshkaError from './_helpers/matreshkaerror';\n\n// removes a property, its bindings and its events\n// TODO: remove function does not correctly removes delegated events, bindings, tree listeners etc\nexport default function remove(object, givenKey, eventOptions) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        eventOptions = givenKey;\n        givenKey = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'remove');\n    }\n\n    eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n    const def = defs.get(object);\n    const { silent } = eventOptions;\n    // allow to pass single key or an array of keys\n    const keys = givenKey instanceof Array ? givenKey : [givenKey];\n\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\n        // if non-string is passed as a key\n        if (typeof key !== 'string') {\n            throw matreshkaError('remove:key_type', { key });\n        }\n\n        const props = def && def.props;\n        const propDef = props && props[key];\n\n        // if no object definition then simply delete the property\n        if (!propDef) {\n            delete object[key];\n            continue;\n        }\n\n        const { value } = propDef;\n\n        // remove all bindings\n        unbindNode(object, key);\n\n        // TODO: Manual listing of event prefixes may cause problems in future\n        const removeEventPrefies = [\n            '_change:deps',\n            '_change:bindings',\n            '_change:delegated',\n            '_change:tree',\n            'change',\n            'beforechange',\n            'bind',\n            'unbind'\n        ];\n\n        // remove all events\n        nofn.forEach(removeEventPrefies, prefix => removeListener(object, `${prefix}:${key}`));\n\n        // delete property definition\n        delete props[key];\n\n        // delete the property itself\n        delete object[key];\n\n        const extendedEventOptions = {\n            key,\n            value,\n            ...eventOptions\n        };\n\n        // trigger delegated events logic removal for asterisk events (*.*.*@foo)\n        triggerOne(object, '_delete:delegated', extendedEventOptions);\n\n        // fire events if \"silent\" is not true\n        if (!silent) {\n            triggerOne(object, 'delete', extendedEventOptions);\n            triggerOne(object, `delete:${key}`, extendedEventOptions);\n        }\n    }\n}\n"]}