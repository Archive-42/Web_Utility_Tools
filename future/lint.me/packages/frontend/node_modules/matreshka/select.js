'use strict';

var defs = require('./_core/defs');

var selectNodes = require('./bindnode/_selectnodes');

var checkObjectType = require('./_helpers/checkobjecttype');

var customSelectorTestReg = /:sandbox|:bound\(([^(]*)\)/;

// selects one node based on given selector
module.exports = select;
function select(object, selector) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        selector = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'select');
    }

    // the selector includes "custom" things like :sandbox or :bound(KEY)
    if (customSelectorTestReg.test(selector)) {
        return selectNodes(object, selector)[0] || null;
    }
    var def = defs.get(object);

    if (!def || typeof selector !== 'string') {
        return null;
    }

    var propDef = def.props.sandbox;

    if (!propDef) {
        return null;
    }

    var bindings = propDef.bindings;


    if (bindings) {
        // iterate over all bound nodes trying to find a descendant matched given selector
        for (var i = 0; i < bindings.length; i++) {
            var node = bindings[i].node;

            var selected = node.querySelector(selector);

            if (selected) {
                return selected;
            }
        }
    }

    return null;
}
//# sourceMappingURL=select.js.map