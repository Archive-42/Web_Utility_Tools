{"version":3,"sources":["../src/select.js"],"names":["customSelectorTestReg","select","object","selector","isMatreshka","checkObjectType","test","selectNodes","def","defs","get","propDef","props","sandbox","bindings","i","length","node","selected","querySelector"],"mappings":";;mBAAiB,c;;0BACO,yB;;8BACI,4B;;AAE5B,IAAMA,wBAAwB,4BAA9B;;AAEA;iBACwBC,M;AAAT,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAC7C,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACA;AACH,KAND,MAMO;AACH;AACAG,wBAAgBH,MAAhB,EAAwB,QAAxB;AACH;;AAED;AACA,QAAIF,sBAAsBM,IAAtB,CAA2BH,QAA3B,CAAJ,EAA0C;AACtC,eAAOI,YAAYL,MAAZ,EAAoBC,QAApB,EAA8B,CAA9B,KAAoC,IAA3C;AACH;AACD,QAAMK,MAAMC,KAAKC,GAAL,CAASR,MAAT,CAAZ;;AAEA,QAAI,CAACM,GAAD,IAAQ,OAAOL,QAAP,KAAoB,QAAhC,EAA0C;AACtC,eAAO,IAAP;AACH;;AAED,QAAMQ,UAAUH,IAAII,KAAJ,CAAUC,OAA1B;;AAEA,QAAI,CAACF,OAAL,EAAc;AACV,eAAO,IAAP;AACH;;AA1B4C,QA4BrCG,QA5BqC,GA4BxBH,OA5BwB,CA4BrCG,QA5BqC;;;AA8B7C,QAAIA,QAAJ,EAAc;AACV;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,SAASE,MAA7B,EAAqCD,GAArC,EAA0C;AAAA,gBAC9BE,IAD8B,GACrBH,SAASC,CAAT,CADqB,CAC9BE,IAD8B;;AAEtC,gBAAMC,WAAWD,KAAKE,aAAL,CAAmBhB,QAAnB,CAAjB;;AAEA,gBAAIe,QAAJ,EAAc;AACV,uBAAOA,QAAP;AACH;AACJ;AACJ;;AAED,WAAO,IAAP;AACH","file":"select.js","sourcesContent":["import defs from './_core/defs';\nimport selectNodes from './bindnode/_selectnodes';\nimport checkObjectType from './_helpers/checkobjecttype';\n\nconst customSelectorTestReg = /:sandbox|:bound\\(([^(]*)\\)/;\n\n// selects one node based on given selector\nexport default function select(object, selector) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        selector = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'select');\n    }\n\n    // the selector includes \"custom\" things like :sandbox or :bound(KEY)\n    if (customSelectorTestReg.test(selector)) {\n        return selectNodes(object, selector)[0] || null;\n    }\n    const def = defs.get(object);\n\n    if (!def || typeof selector !== 'string') {\n        return null;\n    }\n\n    const propDef = def.props.sandbox;\n\n    if (!propDef) {\n        return null;\n    }\n\n    const { bindings } = propDef;\n\n    if (bindings) {\n        // iterate over all bound nodes trying to find a descendant matched given selector\n        for (let i = 0; i < bindings.length; i++) {\n            const { node } = bindings[i];\n            const selected = node.querySelector(selector);\n\n            if (selected) {\n                return selected;\n            }\n        }\n    }\n\n    return null;\n}\n"]}