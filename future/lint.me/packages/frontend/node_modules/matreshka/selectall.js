'use strict';

var defs = require('./_core/defs');

var dom = require('./_dom');

var selectNodes = require('./bindnode/_selectnodes');

var toArray = require('./_helpers/toarray');

var checkObjectType = require('./_helpers/checkobjecttype');

var customSelectorTestReg = /:sandbox|:bound\(([^(]*)\)/;

// selects nodes based on given selector
module.exports = selectAll;
function selectAll(object, selector) {
    if (typeof this === 'object' && this.isMatreshka) {
        // when context is Matreshka instance, use this as an object and shift other args
        /* eslint-disable no-param-reassign */
        selector = object;
        object = this;
        /* eslint-enable no-param-reassign */
    } else {
        // throw error when object type is wrong
        checkObjectType(object, 'selectAll or $');
    }

    // the selector includes "custom" things like :sandbox or :bound(KEY)
    if (customSelectorTestReg.test(selector)) {
        return selectNodes(object, selector);
    }

    var def = defs.get(object);
    var result = dom.$();

    if (!def || typeof selector !== 'string') {
        return result;
    }

    var propDef = def.props.sandbox;

    if (!propDef) {
        return result;
    }

    var bindings = propDef.bindings;


    if (bindings) {
        for (var _target = bindings, _index = 0, _ref, _l = _target.length; _ref = _target[_index], _index < _l; _index++) {
            var node = _ref.node;

            var selected = node.querySelectorAll(selector);
            result = result.add(toArray(selected));
        }
        // iterate over all bindings and add found nodes

    }

    return result;
}
//# sourceMappingURL=selectall.js.map