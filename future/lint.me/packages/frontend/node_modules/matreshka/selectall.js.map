{"version":3,"sources":["../src/selectall.js"],"names":["customSelectorTestReg","selectAll","object","selector","isMatreshka","checkObjectType","test","selectNodes","def","defs","get","result","dom","$","propDef","props","sandbox","bindings","node","selected","querySelectorAll","add","toArray"],"mappings":";;mBAAiB,c;;kBACD,Q;;0BACQ,yB;;sBACJ,oB;;8BACQ,4B;;AAE5B,IAAMA,wBAAwB,4BAA9B;;AAEA;iBACwBC,S;AAAT,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AAChD,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAC9C;AACA;AACAD,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACA;AACH,KAND,MAMO;AACH;AACAG,wBAAgBH,MAAhB,EAAwB,gBAAxB;AACH;;AAED;AACA,QAAIF,sBAAsBM,IAAtB,CAA2BH,QAA3B,CAAJ,EAA0C;AACtC,eAAOI,YAAYL,MAAZ,EAAoBC,QAApB,CAAP;AACH;;AAED,QAAMK,MAAMC,KAAKC,GAAL,CAASR,MAAT,CAAZ;AACA,QAAIS,SAASC,IAAIC,CAAJ,EAAb;;AAEA,QAAI,CAACL,GAAD,IAAQ,OAAOL,QAAP,KAAoB,QAAhC,EAA0C;AACtC,eAAOQ,MAAP;AACH;;AAED,QAAMG,UAAUN,IAAIO,KAAJ,CAAUC,OAA1B;;AAEA,QAAI,CAACF,OAAL,EAAc;AACV,eAAOH,MAAP;AACH;;AA5B+C,QA8BxCM,QA9BwC,GA8B3BH,OA9B2B,CA8BxCG,QA9BwC;;;AAgChD,QAAIA,QAAJ,EAAc;AAAA,2BAEGA,QAFH,wFAE2B;AAAA,gBAAXC,IAAW,QAAXA,IAAW;;AACjC,gBAAMC,WAAWD,KAAKE,gBAAL,CAAsBjB,QAAtB,CAAjB;AACAQ,qBAASA,OAAOU,GAAP,CAAWC,QAAQH,QAAR,CAAX,CAAT;AACH;AAJD;;AAKH;;AAED,WAAOR,MAAP;AACH","file":"selectall.js","sourcesContent":["import defs from './_core/defs';\nimport dom from './_dom';\nimport selectNodes from './bindnode/_selectnodes';\nimport toArray from './_helpers/toarray';\nimport checkObjectType from './_helpers/checkobjecttype';\n\nconst customSelectorTestReg = /:sandbox|:bound\\(([^(]*)\\)/;\n\n// selects nodes based on given selector\nexport default function selectAll(object, selector) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        selector = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'selectAll or $');\n    }\n\n    // the selector includes \"custom\" things like :sandbox or :bound(KEY)\n    if (customSelectorTestReg.test(selector)) {\n        return selectNodes(object, selector);\n    }\n\n    const def = defs.get(object);\n    let result = dom.$();\n\n    if (!def || typeof selector !== 'string') {\n        return result;\n    }\n\n    const propDef = def.props.sandbox;\n\n    if (!propDef) {\n        return result;\n    }\n\n    const { bindings } = propDef;\n\n    if (bindings) {\n        // iterate over all bindings and add found nodes\n        nofn.forEach(bindings, ({ node }) => {\n            const selected = node.querySelectorAll(selector);\n            result = result.add(toArray(selected));\n        });\n    }\n\n    return result;\n}\n"]}