{"version":3,"sources":["../src/set.js"],"names":["set","object","key","value","eventOptions","isMatreshka","checkObjectType","objKey","objVal","def","defs","get","props","events","propDef","previousValue","mediator","skipMediator","fromMediator","force","forceHTML","silent","silentHTML","skipCalc","newValue","is","isChanged","self","extendedEventOptions","triggerChange","beforechangeStr","beforechangeEventName","triggerOne","changeBindingsEventName","changeStr","changeEventName","changeDepsEventName","changeDelegatedKeyEventName","changeTreeEventName","changeCommonEventName","changeDelegatedEventName"],"mappings":"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","file":"set.js","sourcesContent":["import defs from './_core/defs';\nimport triggerOne from './trigger/_triggerone';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport is from './_helpers/is';\n\n// the function sets new value for a property\n// since its performance is very critical we're checking events existence manually\nexport default function set(object, key, value, eventOptions) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        eventOptions = value;\n        value = key;\n        key = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'set');\n    }\n\n    // if no key or falsy key is given\n    if (!key) {\n        return object;\n    }\n\n    // allow to use key-value object as another method variation\n    if (typeof key === 'object') {\n        nofn.forOwn(key, (objVal, objKey) => set(object, objKey, objVal, value));\n        return object;\n    }\n\n    eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n    const def = defs.get(object);\n\n    // if no object definition then make simple assignment\n    if (!def) {\n        object[key] = value;\n        return object;\n    }\n\n    const { props, events } = def;\n    const propDef = props[key];\n\n    // if no property definition then make simple assignment\n    if (!propDef) {\n        object[key] = value;\n        return object;\n    }\n\n    const { value: previousValue, mediator } = propDef;\n\n    // possible flags, all of them are falsy by default\n    const {\n        skipMediator,\n        fromMediator,\n        force,\n        forceHTML,\n        silent,\n        silentHTML,\n        skipCalc\n    } = eventOptions;\n\n    let newValue;\n\n    if (mediator && !is(value, previousValue) && !skipMediator && !fromMediator) {\n        newValue = mediator(value);\n    } else {\n        newValue = value;\n    }\n\n    const isChanged = !is(newValue, previousValue);\n\n    // add to eventOptions object some useful properties\n    // we override default eventOptions because some of the properties need to have actual values,\n    // not inherited ones (eg when calc is used)\n    const extendedEventOptions = {\n        ...eventOptions,\n        value: newValue,\n        self: object,\n        previousValue,\n        key,\n        isChanged\n    };\n\n    const triggerChange = (isChanged || force) && !silent;\n\n    // trigger beforechange:KEY and beforechange events\n    if (triggerChange) {\n        const beforechangeStr = 'beforechange';\n        const beforechangeEventName = `${beforechangeStr}:${key}`;\n\n        if (events[beforechangeEventName]) {\n            triggerOne(object, beforechangeEventName, extendedEventOptions);\n        }\n\n        if (events[beforechangeStr]) {\n            triggerOne(object, beforechangeStr, extendedEventOptions);\n        }\n    }\n\n    propDef.value = newValue;\n\n    // triger bindings\n    if (!silentHTML && (isChanged || forceHTML)) {\n        const changeBindingsEventName = `_change:bindings:${key}`;\n        if (events[changeBindingsEventName]) {\n            triggerOne(object, changeBindingsEventName, extendedEventOptions);\n        }\n    }\n\n    // trigger change:KEY and change events\n    if (triggerChange) {\n        const changeStr = 'change';\n        const changeEventName = `${changeStr}:${key}`;\n        if (events[changeEventName]) {\n            triggerOne(object, changeEventName, extendedEventOptions);\n        }\n\n        if (events[changeStr]) {\n            triggerOne(object, changeStr, extendedEventOptions);\n        }\n    }\n\n    // trigger dependencies made by calc method\n    if ((isChanged || force) && !skipCalc) {\n        const changeDepsEventName = `_change:deps:${key}`;\n        if (events[changeDepsEventName]) {\n            triggerOne(object, changeDepsEventName, extendedEventOptions);\n        }\n    }\n\n\n    if (isChanged) {\n        // trigger common delegated events logic\n        const changeDelegatedKeyEventName = `_change:delegated:${key}`;\n        if (events[changeDelegatedKeyEventName]) {\n            triggerOne(object, changeDelegatedKeyEventName, extendedEventOptions);\n        }\n\n        // trigger tree change events logic\n        const changeTreeEventName = `_change:tree:${key}`;\n        if (events[changeTreeEventName]) {\n            triggerOne(object, changeTreeEventName, extendedEventOptions);\n        }\n\n        // trigger other internal change events\n        const changeCommonEventName = `_change:common:${key}`;\n        if (events[changeCommonEventName]) {\n            triggerOne(object, changeCommonEventName, extendedEventOptions);\n        }\n\n        // trigger delegated logic for asterisk events (*.*.*@foo)\n        // TODO: Confusing events names (\"_change:delegated\", \"_change:common:KEY\" etc)\n        const changeDelegatedEventName = '_change:delegated';\n        if (events[changeDelegatedEventName]) {\n            triggerOne(object, changeDelegatedEventName, extendedEventOptions);\n        }\n    }\n\n    return object;\n}\n"]}