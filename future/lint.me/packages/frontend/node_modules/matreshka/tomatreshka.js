'use strict';

// recursively converts objects and arrays to Matreshka.Object and Matreshka.Array instances
module.exports = toMatreshka;
function toMatreshka(data) {
    // fix circular ref issue
    var MatreshkaObject = require('./object');
    var MatreshkaArray = require('./array');

    // convert only objects
    if (data && typeof data === 'object') {
        var _ret = function () {
            if ('length' in data) {
                var _ret2 = function () {
                    // if length is given convert it to Matreshka.Array instance
                    var arrayItems = Array(data.length);

                    for (var _target = data, index = 0, item, _l = _target.length; item = _target[index], index < _l; index++) {
                        arrayItems[index] = toMatreshka(item);
                    }

                    return {
                        v: {
                            v: new MatreshkaArray().recreate(arrayItems)
                        }
                    };
                }();

                if (typeof _ret2 === "object") return _ret2.v;
            }

            // if length is not given convert it to Matreshka.Object instance
            var object = {};

            for (var _target2 = data, _keys = Object.keys(_target2), _i = 0, key, value, _l2 = _keys.length; (key = _keys[_i], value = _target2[key]), _i < _l2; _i++) {
                object[key] = toMatreshka(value);
            }

            return {
                v: new MatreshkaObject(object)
            };
        }();

        if (typeof _ret === "object") return _ret.v;
    }

    // for all non-objects just return passed data
    return data;
}
//# sourceMappingURL=tomatreshka.js.map