'use strict';

var domEventReg = require('../on/_domeventregexp');

var checkObjectType = require('../_helpers/checkobjecttype');

var matreshkaError = require('../_helpers/matreshkaerror');

var splitBySpaceReg = require('../on/_splitbyspaceregexp');

var defs = require('../_core/defs');

var triggerOne = require('./_triggerone');

var triggerDomEvent = require('./_triggerdomevent');

// triggers an event
module.exports = trigger;
function trigger() {
    var object = void 0;
    var givenNames = void 0;
    var triggerArgs = void 0;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (typeof this === 'object' && this.isMatreshka) {
        givenNames = args[0];
        // when context is Matreshka instance, use this as an object and shift other args

        triggerArgs = args.slice(1);

        object = this;
    } else {
        // throw error when object type is wrong
        object = args[0];
        givenNames = args[1];
        triggerArgs = args.slice(2);
        checkObjectType(object, 'trigger');
    }
    var names = void 0;

    // allow to use strings only as event name
    if (typeof givenNames === 'string') {
        names = givenNames.split(splitBySpaceReg);
    } else {
        throw matreshkaError('trigger:names_type', { names: givenNames });
    }

    var def = defs.get(object);

    // if no definition do nothing
    if (!def) {
        return object;
    }

    var allEvents = def.events;


    if (!allEvents) {
        return object;
    }

    for (var _target = names, _index = 0, name, _l = _target.length; name = _target[_index], _index < _l; _index++) {
        var domEvtExecResult = domEventReg.exec(name);

        if (domEvtExecResult) {
            // if EVT::KEY(SELECTOR) ia passed as event name then trigger DOM event
            var eventName = domEvtExecResult[1],
                _domEvtExecResult$ = domEvtExecResult[2],
                key = _domEvtExecResult$ === undefined ? 'sandbox' : _domEvtExecResult$,
                selector = domEvtExecResult[3];

            triggerDomEvent(object, key, eventName, selector, triggerArgs);
        } else {
            // trigger ordinary event
            triggerOne(object, name, triggerArgs);
        }
    }

    return object;
}
//# sourceMappingURL=index.js.map