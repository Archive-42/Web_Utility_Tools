{"version":3,"sources":["../../src/trigger/index.js"],"names":["trigger","object","givenNames","triggerArgs","args","isMatreshka","checkObjectType","names","split","splitBySpaceReg","matreshkaError","def","defs","get","allEvents","events","name","domEvtExecResult","domEventReg","exec","eventName","key","selector","triggerDomEvent","triggerOne"],"mappings":";;0BAAwB,uB;;8BACI,6B;;6BACD,4B;;8BACC,2B;;mBACX,e;;yBACM,e;;8BACK,oB;;AAE5B;iBACwBA,O;AAAT,SAASA,OAAT,GAA0B;AACrC,QAAIC,eAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,oBAAJ;;AAHqC,sCAANC,IAAM;AAANA,YAAM;AAAA;;AAKrC,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAKC,WAArC,EAAkD;AAE7CH,kBAF6C,GAEfE,IAFe;AAC9C;;AACgBD,mBAF8B,GAEfC,IAFe;;AAG9CH,iBAAS,IAAT;AACH,KAJD,MAIO;AAEH;AADCA,cADE,GACoCG,IADpC;AACMF,kBADN,GACoCE,IADpC;AACqBD,mBADrB,GACoCC,IADpC;AAGHE,wBAAgBL,MAAhB,EAAwB,SAAxB;AACH;AACD,QAAIM,cAAJ;;AAEA;AACA,QAAI,OAAOL,UAAP,KAAsB,QAA1B,EAAoC;AAChCK,gBAAQL,WAAWM,KAAX,CAAiBC,eAAjB,CAAR;AACH,KAFD,MAEO;AACH,cAAMC,eAAe,oBAAf,EAAqC,EAAEH,OAAOL,UAAT,EAArC,CAAN;AACH;;AAED,QAAMS,MAAMC,KAAKC,GAAL,CAASZ,MAAT,CAAZ;;AAEA;AACA,QAAI,CAACU,GAAL,EAAU;AACN,eAAOV,MAAP;AACH;;AA5BoC,QA8BrBa,SA9BqB,GA8BPH,GA9BO,CA8B7BI,MA9B6B;;;AAgCrC,QAAI,CAACD,SAAL,EAAgB;AACZ,eAAOb,MAAP;AACH;;AAlCoC,uBAoCxBM,KApCwB,cAoChBS,IApCgB,uBAoChBA,IApCgB,2CAoCP;AAC1B,YAAMC,mBAAmBC,YAAYC,IAAZ,CAAiBH,IAAjB,CAAzB;;AAEA,YAAIC,gBAAJ,EAAsB;AAClB;AADkB,gBAETG,SAFS,GAE+BH,gBAF/B;AAAA,qCAE+BA,gBAF/B;AAAA,gBAEEI,GAFF,sCAEQ,SAFR;AAAA,gBAEmBC,QAFnB,GAE+BL,gBAF/B;;AAGlBM,4BAAgBtB,MAAhB,EAAwBoB,GAAxB,EAA6BD,SAA7B,EAAwCE,QAAxC,EAAkDnB,WAAlD;AACH,SAJD,MAIO;AACH;AACAqB,uBAAWvB,MAAX,EAAmBe,IAAnB,EAAyBb,WAAzB;AACH;AACJ;;AAED,WAAOF,MAAP;AACH","file":"index.js","sourcesContent":["import domEventReg from '../on/_domeventregexp';\nimport checkObjectType from '../_helpers/checkobjecttype';\nimport matreshkaError from '../_helpers/matreshkaerror';\nimport splitBySpaceReg from '../on/_splitbyspaceregexp';\nimport defs from '../_core/defs';\nimport triggerOne from './_triggerone';\nimport triggerDomEvent from './_triggerdomevent';\n\n// triggers an event\nexport default function trigger(...args) {\n    let object;\n    let givenNames;\n    let triggerArgs;\n\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        [givenNames, ...triggerArgs] = args;\n        object = this;\n    } else {\n        [object, givenNames, ...triggerArgs] = args;\n        // throw error when object type is wrong\n        checkObjectType(object, 'trigger');\n    }\n    let names;\n\n    // allow to use strings only as event name\n    if (typeof givenNames === 'string') {\n        names = givenNames.split(splitBySpaceReg);\n    } else {\n        throw matreshkaError('trigger:names_type', { names: givenNames });\n    }\n\n    const def = defs.get(object);\n\n    // if no definition do nothing\n    if (!def) {\n        return object;\n    }\n\n    const { events: allEvents } = def;\n\n    if (!allEvents) {\n        return object;\n    }\n\n    nofn.forEach(names, (name) => {\n        const domEvtExecResult = domEventReg.exec(name);\n\n        if (domEvtExecResult) {\n            // if EVT::KEY(SELECTOR) ia passed as event name then trigger DOM event\n            const [, eventName, key = 'sandbox', selector] = domEvtExecResult;\n            triggerDomEvent(object, key, eventName, selector, triggerArgs);\n        } else {\n            // trigger ordinary event\n            triggerOne(object, name, triggerArgs);\n        }\n    });\n\n    return object;\n}\n"]}