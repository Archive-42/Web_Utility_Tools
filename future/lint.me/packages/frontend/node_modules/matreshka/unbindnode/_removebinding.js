'use strict';

var removeListener = require('../off/_removelistener');

var triggerOne = require('../trigger/_triggerone');

var spaceReg = /\s+/;

// the function removes single binding for single object
// called by unbindNode
module.exports = removeBinding;
function removeBinding(_ref) {
    var object = _ref.object,
        key = _ref.key,
        eventOptions = _ref.eventOptions,
        binding = _ref.binding;
    var bindingOptions = binding.bindingOptions,
        binder = binding.binder,
        node = binding.node,
        nodeHandler = binding.nodeHandler,
        objectHandler = binding.objectHandler;
    var destroy = binder.destroy,
        on = binder.on;
    var silent = eventOptions.silent;

    // if "on" is a function then disable it
    // we cannot "turn off" custom listener defined by a programmer
    // programmer needs to remove custom listener maually inside binder.destroy

    if (typeof on === 'function') {
        nodeHandler.disabled = true;
    } else if (typeof on === 'string') {
        for (var _target = on.split(spaceReg), _index = 0, evtName, _l = _target.length; evtName = _target[_index], _index < _l; _index++) {
            node.removeEventListener(evtName, nodeHandler)
        }
        // remove DOM event listener
        // removeEventListener is faster than "on" method from any DOM library

    }

    // remove object event listener
    removeListener(object, '_change:bindings:' + key, objectHandler);

    // if binder.destroy is given call it
    if (destroy) {
        destroy.call(node, bindingOptions);
    }

    // fire events
    if (!silent) {
        var _keys,
            _l2,
            _i,
            _source,
            _key,
            _result = {};

        _result.key = key
        _result.node = node

        for (_source = eventOptions, _keys = Object.keys(_source), _l2 = _keys.length, _i = 0; _i < _l2; _i++) {
            _key = _keys[_i];
            _result[_key] = _source[_key];
        }

        var extendedEventOptions = _result;

        triggerOne(object, 'unbind:' + key, extendedEventOptions);
        triggerOne(object, 'unbind', extendedEventOptions);
    }
}
//# sourceMappingURL=_removebinding.js.map