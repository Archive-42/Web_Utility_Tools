{"version":3,"sources":["../../src/unbindnode/_removebinding.js"],"names":["spaceReg","removeBinding","object","key","eventOptions","binding","bindingOptions","binder","node","nodeHandler","objectHandler","destroy","on","silent","disabled","split","evtName","removeEventListener","removeListener","call","extendedEventOptions","triggerOne"],"mappings":";;6BAA2B,wB;;yBACJ,wB;;AAEvB,IAAMA,WAAW,KAAjB;;AAEA;AACA;iBACwBC,a;AAAT,SAASA,aAAT,OAKZ;AAAA,QAJCC,MAID,QAJCA,MAID;AAAA,QAHCC,GAGD,QAHCA,GAGD;AAAA,QAFCC,YAED,QAFCA,YAED;AAAA,QADCC,OACD,QADCA,OACD;AAAA,QAEKC,cAFL,GAOKD,OAPL,CAEKC,cAFL;AAAA,QAGKC,MAHL,GAOKF,OAPL,CAGKE,MAHL;AAAA,QAIKC,IAJL,GAOKH,OAPL,CAIKG,IAJL;AAAA,QAKKC,WALL,GAOKJ,OAPL,CAKKI,WALL;AAAA,QAMKC,aANL,GAOKL,OAPL,CAMKK,aANL;AAAA,QAQSC,OART,GAQyBJ,MARzB,CAQSI,OART;AAAA,QAQkBC,EARlB,GAQyBL,MARzB,CAQkBK,EARlB;AAAA,QASSC,MATT,GASoBT,YATpB,CASSS,MATT;;AAWC;AACA;AACA;;AACA,QAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC1BH,oBAAYK,QAAZ,GAAuB,IAAvB;AACH,KAFD,MAEO,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AAAA,2BAGlBA,GAAGG,KAAH,CAASf,QAAT,CAHkB,cAI3BgB,OAJ2B,uBAI3BA,OAJ2B;AAIhBR,iBAAKS,mBAAL,CAAyBD,OAAzB,EAAkCP,WAAlC;AAJgB;AAC/B;AACA;;AAGH;;AAED;AACAS,mBAAehB,MAAf,wBAA2CC,GAA3C,EAAkDO,aAAlD;;AAEA;AACA,QAAIC,OAAJ,EAAa;AACTA,gBAAQQ,IAAR,CAAaX,IAAb,EAAmBF,cAAnB;AACH;;AAED;AACA,QAAI,CAACO,MAAL,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAELV,GAFK,GAELA;AAFK,gBAGLK,IAHK,GAGLA;;AAHK,uBAIFJ,YAJE;AAAA;AAAA;AAAA;;AACT,YAAMgB,8BAAN;;AAMAC,mBAAWnB,MAAX,cAA6BC,GAA7B,EAAoCiB,oBAApC;AACAC,mBAAWnB,MAAX,EAAmB,QAAnB,EAA6BkB,oBAA7B;AACH;AACJ","file":"_removebinding.js","sourcesContent":["import removeListener from '../off/_removelistener';\nimport triggerOne from '../trigger/_triggerone';\n\nconst spaceReg = /\\s+/;\n\n// the function removes single binding for single object\n// called by unbindNode\nexport default function removeBinding({\n    object,\n    key,\n    eventOptions,\n    binding\n}) {\n    const {\n        bindingOptions,\n        binder,\n        node,\n        nodeHandler,\n        objectHandler\n    } = binding;\n    const { destroy, on } = binder;\n    const { silent } = eventOptions;\n\n    // if \"on\" is a function then disable it\n    // we cannot \"turn off\" custom listener defined by a programmer\n    // programmer needs to remove custom listener maually inside binder.destroy\n    if (typeof on === 'function') {\n        nodeHandler.disabled = true;\n    } else if (typeof on === 'string') {\n        // remove DOM event listener\n        // removeEventListener is faster than \"on\" method from any DOM library\n        nofn.forEach(on.split(spaceReg),\n            evtName => node.removeEventListener(evtName, nodeHandler));\n    }\n\n    // remove object event listener\n    removeListener(object, `_change:bindings:${key}`, objectHandler);\n\n    // if binder.destroy is given call it\n    if (destroy) {\n        destroy.call(node, bindingOptions);\n    }\n\n    // fire events\n    if (!silent) {\n        const extendedEventOptions = {\n            key,\n            node,\n            ...eventOptions\n        };\n\n        triggerOne(object, `unbind:${key}`, extendedEventOptions);\n        triggerOne(object, 'unbind', extendedEventOptions);\n    }\n}\n"]}