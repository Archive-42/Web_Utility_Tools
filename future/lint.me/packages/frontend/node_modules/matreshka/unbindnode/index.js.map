{"version":3,"sources":["../../src/unbindnode/index.js"],"names":["unbindNode","object","key","node","eventOptions","isMatreshka","checkObjectType","Array","itemKey","itemNode","itemEventOptions","event","commonEventOptions","mergedEventOptions","keyObjKey","keyObjValue","constructor","Object","length","keyObjValueItem","deep","def","defs","get","props","propsKey","propsItem","deepPath","split","deepPathLength","target","i","removeTreeListener","slice","propDef","bindings","binding","removeBinding","nodes","$nodes","getNodes","retainBindings","retainNodes","nodesItem","push","dom","$"],"mappings":"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","file":"index.js","sourcesContent":["import checkObjectType from '../_helpers/checkobjecttype';\nimport defs from '../_core/defs';\nimport getNodes from '../bindnode/_getnodes';\nimport removeTreeListener from '../off/_removetreelistener';\nimport removeBinding from './_removebinding';\nimport dom from '../_dom';\n\n// unbinds a node\nexport default function unbindNode(object, key, node, eventOptions) {\n    if (typeof this === 'object' && this.isMatreshka) {\n        // when context is Matreshka instance, use this as an object and shift other args\n        /* eslint-disable no-param-reassign */\n        eventOptions = node;\n        node = key;\n        key = object;\n        object = this;\n        /* eslint-enable no-param-reassign */\n    } else {\n        // throw error when object type is wrong\n        checkObjectType(object, 'unbindNode');\n    }\n\n    if (key instanceof Array) {\n        if (typeof key[0] === 'string') {\n            /*\n             * accept array of keys\n             * this.unbindNode(['a', 'b', 'c'], node)\n             */\n\n            nofn.forEach(key, itemKey => unbindNode(object, itemKey, node, eventOptions));\n        } else {\n            /*\n             * acept array of objects\n             * this.unbindNode([{ key, node, binder, event }], { silent: true });\n             */\n            nofn.forEach(key, ({\n                key: itemKey,\n                node: itemNode,\n                event: itemEventOptions\n            }) => {\n                const commonEventOptions = node;\n                const mergedEventOptions = {};\n\n                if (commonEventOptions) {\n                    // extend event object by \"global\" event\n                    nofn.assign(mergedEventOptions, commonEventOptions);\n                }\n\n                if (itemEventOptions) {\n                    // extend event object by \"local\" event (\"event\" key of an object)\n                    nofn.assign(mergedEventOptions, itemEventOptions);\n                }\n\n                unbindNode(object, itemKey, itemNode, mergedEventOptions);\n            });\n        }\n\n        return object;\n    }\n\n    if (key && typeof key === 'object') {\n        nofn.forOwn(key, (keyObjValue, keyObjKey) => {\n            if (keyObjValue.constructor === Object && 'node' in keyObjValue) {\n                // this.unbindNode({ key: { node: $(), binder } ) }, { silent: true });\n                unbindNode(object, keyObjKey, keyObjValue.node, node);\n            } else if (\n                keyObjValue.constructor === Array\n                && keyObjValue.length\n                && keyObjValue[0].constructor === Object\n                && 'node' in keyObjValue[0]\n            ) {\n                // this.unbindNode({ key: [{ node: $(), binder }] ) }, { silent: true });\n                nofn.forEach(keyObjValue, (keyObjValueItem) => {\n                    unbindNode(object, keyObjKey, keyObjValueItem.node, node);\n                });\n            } else {\n                // this.unbindNode({ key: $() }, { silent: true });\n                unbindNode(object, keyObjKey, keyObjValue, node);\n            }\n        });\n        return object;\n    }\n\n    eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n    const { deep } = eventOptions;\n    const def = defs.get(object);\n\n    if (!def) {\n        return object;\n    }\n\n    const { props } = def;\n\n    // allow to pass null or undefined as key\n    // if passed then remove bindings of all keys for given object\n    if (key === null || typeof key === 'undefined') {\n        nofn.forOwn(props, (propsItem, propsKey) => {\n            unbindNode(object, propsKey, null, eventOptions);\n        });\n\n        return object;\n    }\n\n    // remove delegated binding\n    if (deep !== false) {\n        const deepPath = key.split('.');\n        const deepPathLength = deepPath.length;\n\n        if (deepPathLength > 1) {\n            let target = object;\n\n            for (let i = 0; i < deepPathLength - 1; i++) {\n                // TODO: Do we need to throw an error when a target is falsy?\n                target = target[deepPath[i]];\n            }\n\n            // TODO: Potential bug! This may undelegate listener for all bindings with the same path\n            // ...(cannot reproduce)\n            removeTreeListener(object, deepPath.slice(0, deepPathLength - 2));\n\n            unbindNode(target, deepPath[deepPathLength - 1], node, eventOptions);\n\n            return object;\n        }\n    }\n\n    const propDef = props[key];\n\n    // when no propdef do nothing\n    if (!propDef) {\n        return object;\n    }\n\n    const { bindings } = propDef;\n\n    // if the property doesn't have any bindings do nothing\n    if (!bindings) {\n        return object;\n    }\n\n    // if no node is pased remove all bindings for given key\n    if (!node) {\n        nofn.forEach(bindings, (binding) => {\n            removeBinding({ object, key, eventOptions, binding });\n        });\n\n        propDef.bindings = null;\n\n        // update nodes and $nodes for Matreshka instance\n        if (object.isMatreshka) {\n            delete object.nodes[key];\n            delete object.$nodes[key];\n        }\n\n        return object;\n    }\n\n    const $nodes = getNodes(object, node);\n    const retainBindings = [];\n    const retainNodes = [];\n\n    // iterate over all bindngs and compare their node with given nodes\n    nofn.forEach($nodes, (nodesItem) => {\n        nofn.forEach(bindings, (binding) => {\n            if (binding.node === nodesItem) {\n                removeBinding({ object, key, eventOptions, binding });\n            } else {\n                retainBindings.push(binding);\n                retainNodes.push(nodesItem);\n            }\n        });\n    });\n\n    // update nodes and $nodes for Matreshka instance\n    if (object.isMatreshka) {\n        if (retainNodes.length) {\n            object.nodes[key] = retainNodes[0];\n            object.$nodes[key] = dom.$(retainNodes);\n        } else {\n            delete object.nodes[key];\n            delete object.$nodes[key];\n        }\n    }\n\n    // update bindings object\n    if (retainBindings.length) {\n        propDef.bindings = retainBindings;\n    } else {\n        propDef.bindings = null;\n    }\n\n    return object;\n}\n"]}