{"version":3,"sources":["../../../src/_dom/mq/_init.js"],"names":["win","window","MQInit","selector","context","result","nodeType","test","newContext","querySelectorAll","document","length","i","push","prototype"],"mappings":";;;;;;;;;;;AAAA;;AAEA,IAAMA,GAAG,GAAGC,MAAZ,C,CAEA;AACA;;AACA,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AACjC,MAAIC,MAAJ;;AAEA,MAAIF,QAAJ,EAAc;AACZ,QAAIA,QAAQ,CAACG,QAAT,IAAsB,yBAAON,GAAP,MAAe,QAAf,IAA2BG,QAAQ,KAAKH,GAAlE,EAAwE;AACtEK,MAAAA,MAAM,GAAG,CAACF,QAAD,CAAT;AACD,KAFD,MAEO,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACvC,UAAI,IAAII,IAAJ,CAASJ,QAAT,CAAJ,EAAwB;AACtBE,QAAAA,MAAM,GAAG,+BAAcF,QAAd,CAAT;AACD,OAFD,MAEO,IAAIC,OAAJ,EAAa;AAClB,YAAMI,UAAU,GAAI,IAAIN,MAAJ,CAAWE,OAAX,CAAD,CAAsB,CAAtB,CAAnB;;AAEA,YAAII,UAAJ,EAAgB;AACdH,UAAAA,MAAM,GAAGG,UAAU,CAACC,gBAAX,CAA4BN,QAA5B,CAAT;AACD;AACF,OANM,MAMA;AACLE,QAAAA,MAAM,GAAGL,GAAG,CAACU,QAAJ,CAAaD,gBAAb,CAA8BN,QAA9B,CAAT;AACD;AACF,KAZM,MAYA,IAAI,YAAYA,QAAhB,EAA0B;AAC/B;AACAE,MAAAA,MAAM,GAAGF,QAAT;AACD,KAHM,MAGA;AACL;AACAE,MAAAA,MAAM,GAAG,CAACF,QAAD,CAAT;AACD;AACF;;AAED,MAAMQ,MAAM,GAAGN,MAAM,IAAIA,MAAM,CAACM,MAAhC;;AAEA,MAAIA,MAAJ,EAAY;AACV,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/B,WAAKC,IAAL,CAAUR,MAAM,CAACO,CAAD,CAAhB;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAEDV,MAAM,CAACY,SAAP,GAAmB,EAAnB;eAEeZ,M","sourcesContent":["import html2nodeList from './_html2nodelist';\n\nconst win = window;\n\n// function-constructor of mq library\n// accepts many kinds of arguments (selector, html, function)\nfunction MQInit(selector, context) {\n  let result;\n\n  if (selector) {\n    if (selector.nodeType || (typeof win === 'object' && selector === win)) {\n      result = [selector];\n    } else if (typeof selector === 'string') {\n      if (/</.test(selector)) {\n        result = html2nodeList(selector);\n      } else if (context) {\n        const newContext = (new MQInit(context))[0];\n\n        if (newContext) {\n          result = newContext.querySelectorAll(selector);\n        }\n      } else {\n        result = win.document.querySelectorAll(selector);\n      }\n    } else if ('length' in selector) {\n      // if it's something array-like (eg NodeList)\n      result = selector;\n    } else {\n      // this is somethong another (eg Attr)\n      result = [selector];\n    }\n  }\n\n  const length = result && result.length;\n\n  if (length) {\n    for (let i = 0; i < length; i++) {\n      this.push(result[i]);\n    }\n  }\n\n  return this;\n}\n\nMQInit.prototype = [];\n\nexport default MQInit;\n"],"file":"_init.js"}