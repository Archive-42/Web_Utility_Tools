{"version":3,"sources":["../../../src/array/_processrendering/processrecreate.js"],"names":["processRecreate","self","selfDef","eventOptions","container","removed","silent","selfId","id","item","itemDef","defs","get","renderedInArrays","node","removeChild","alreadyRenderedMap","alreadyRenderedNode","appendChild","itemEventOptions"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACe,SAASA,eAAT,OAKZ;AAAA,MAJDC,IAIC,QAJDA,IAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,SACC,QADDA,SACC;AAAA,MACOC,OADP,GAC2BF,YAD3B,CACOE,OADP;AAAA,MACgBC,MADhB,GAC2BH,YAD3B,CACgBG,MADhB;AAAA,MAEWC,MAFX,GAEsBL,OAFtB,CAEOM,EAFP,EAID;;AACA,2BAAQH,OAAR,EAAiB,UAACI,IAAD,EAAU;AACzB,QAAMC,OAAO,GAAGC,iBAAKC,GAAL,CAASH,IAAT,CAAhB;;AAEA,QAAIC,OAAJ,EAAa;AAAA,UACHG,gBADG,GACkBH,OADlB,CACHG,gBADG;AAEX,UAAMC,IAAI,GAAGD,gBAAgB,IAAIA,gBAAgB,CAACN,MAAD,CAAjD;;AACA,UAAIO,IAAJ,EAAU;AACR,eAAOJ,OAAO,CAACG,gBAAR,CAAyBN,MAAzB,CAAP;AACAH,QAAAA,SAAS,CAACW,WAAV,CAAsBD,IAAtB;AACD;AACF;AACF,GAXD;AAaA,MAAME,kBAAkB,GAAG,EAA3B,CAlBC,CAoBD;AACA;AACA;;AACA,2BAAQf,IAAR,EAAc,UAACQ,IAAD,EAAU;AACtB,QAAIA,IAAI,IAAI,yBAAOA,IAAP,MAAgB,QAA5B,EAAsC;AACpC,UAAIC,OAAO,GAAGC,iBAAKC,GAAL,CAASH,IAAT,CAAd;;AACA,UAAIQ,mBAAJ;;AAEA,UAAIP,OAAJ,EAAa;AACXO,QAAAA,mBAAmB,GAAG,oCAAmB;AACvCR,UAAAA,IAAI,EAAJA,IADuC;AAEvCP,UAAAA,OAAO,EAAPA;AAFuC,SAAnB,CAAtB;AAID;;AAED,UAAIe,mBAAJ,EAAyB;AACvB;AACA,YAAIP,OAAO,CAACF,EAAR,IAAcQ,kBAAlB,EAAsC;AACpC;AACA,gBAAM,8BAAa,wBAAb,CAAN;AACD;;AAEDA,QAAAA,kBAAkB,CAACN,OAAO,CAACF,EAAT,CAAlB,GAAiC,IAAjC;AAEAJ,QAAAA,SAAS,CAACc,WAAV,CAAsBD,mBAAtB;AACD,OAVD,MAUO;AACL;AADK,8BAE8B,gCAAe;AAChDf,UAAAA,OAAO,EAAPA,OADgD;AAEhDD,UAAAA,IAAI,EAAJA,IAFgD;AAGhDQ,UAAAA,IAAI,EAAJA,IAHgD;AAIhDN,UAAAA,YAAY,EAAZA;AAJgD,SAAf,CAF9B;AAAA,YAEGW,IAFH,mBAEGA,IAFH;AAAA,YAESK,gBAFT,mBAESA,gBAFT;;AASL,YAAIL,IAAJ,EAAU;AACR;AACA;AACAJ,UAAAA,OAAO,GAAGA,OAAO,IAAIC,iBAAKC,GAAL,CAASH,IAAT,CAArB;;AAEA,cAAIC,OAAO,CAACF,EAAR,IAAcQ,kBAAlB,EAAsC;AACpC;AACA,kBAAM,8BAAa,wBAAb,CAAN;AACD;;AAEDA,UAAAA,kBAAkB,CAACN,OAAO,CAACF,EAAT,CAAlB,GAAiC,IAAjC;AAEAJ,UAAAA,SAAS,CAACc,WAAV,CAAsBJ,IAAtB;;AAEA,cAAI,CAACR,MAAL,EAAa;AACX,wCAAWG,IAAX,EAAiB,aAAjB,EAAgCU,gBAAhC;AACD;AACF;AACF;AACF;AACF,GAnDD;AAoDD","sourcesContent":["import renderItemNode from './renderitemnode';\nimport triggerOne from '../../trigger/_triggerone';\nimport defs from '../../_core/defs';\nimport seempleError from '../../_helpers/seempleerror';\nimport forEach from '../../_helpers/foreach';\nimport getAlreadyRendered from './getalreadyrendered';\n\n// this function renders inserted items if possible when recreate method is called\nexport default function processRecreate({\n  self,\n  selfDef,\n  eventOptions,\n  container\n}) {\n  const { removed, silent } = eventOptions;\n  const { id: selfId } = selfDef;\n\n  // iterate over removed items and remove their nodes\n  forEach(removed, (item) => {\n    const itemDef = defs.get(item);\n\n    if (itemDef) {\n      const { renderedInArrays } = itemDef;\n      const node = renderedInArrays && renderedInArrays[selfId];\n      if (node) {\n        delete itemDef.renderedInArrays[selfId];\n        container.removeChild(node);\n      }\n    }\n  });\n\n  const alreadyRenderedMap = {};\n\n  // iterate over all items\n  // the following approach allows to throw an error when two added objects are the same\n  // (not only compare existing items with old ones)\n  forEach(self, (item) => {\n    if (item && typeof item === 'object') {\n      let itemDef = defs.get(item);\n      let alreadyRenderedNode;\n\n      if (itemDef) {\n        alreadyRenderedNode = getAlreadyRendered({\n          item,\n          selfDef\n        });\n      }\n\n      if (alreadyRenderedNode) {\n        // if an item is already rendered (old item)\n        if (itemDef.id in alreadyRenderedMap) {\n          // if an item is rendered twice throw an error\n          throw seempleError('array:add_render_twice');\n        }\n\n        alreadyRenderedMap[itemDef.id] = true;\n\n        container.appendChild(alreadyRenderedNode);\n      } else {\n        // this is newly added item\n        const { node, itemEventOptions } = renderItemNode({\n          selfDef,\n          self,\n          item,\n          eventOptions\n        });\n\n        if (node) {\n          // itemDef is defined at renderItemNode if not defined before\n          // reload this variable\n          itemDef = itemDef || defs.get(item);\n\n          if (itemDef.id in alreadyRenderedMap) {\n            // if newly added item is rendered twice throw an error\n            throw seempleError('array:add_render_twice');\n          }\n\n          alreadyRenderedMap[itemDef.id] = true;\n\n          container.appendChild(node);\n\n          if (!silent) {\n            triggerOne(item, 'afterrender', itemEventOptions);\n          }\n        }\n      }\n    }\n  });\n}\n"],"file":"processrecreate.js"}