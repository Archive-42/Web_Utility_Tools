"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = concat;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _apply = _interopRequireDefault(require("../../_helpers/apply"));

var _foreach = _interopRequireDefault(require("../../_helpers/foreach"));

// the method works just like Array.prototype.concat but
// - flattens both Array and Seemple.Array
// - returns Seemple.Array
function concat() {
  // fix circular dependency issue
  var SeempleArray = require('../')["default"];

  var args = Array(arguments.length); // convert all instances of Seemple.Array to Array

  (0, _foreach["default"])(arguments, function (arg, index) {
    if (arg && (0, _typeof2["default"])(arg) === 'object' && arg.isSeempleArray) {
      args[index] = arg.toJSON(false);
    } else {
      args[index] = arg;
    }
  }); // call original concat method

  var nativeCallResult = (0, _apply["default"])(Array.prototype.concat, this.toJSON(false), args); // convert returned value to Seemple.Array

  var result = new SeempleArray();
  (0, _foreach["default"])(nativeCallResult, function (item, index) {
    result[index] = item;
  });
  result.length = nativeCallResult.length;
  return result;
}
//# sourceMappingURL=concat.js.map