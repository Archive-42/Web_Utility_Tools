"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = reportModified;

var _defs = _interopRequireDefault(require("../_core/defs"));

var _triggerone = _interopRequireDefault(require("../trigger/_triggerone"));

var _processrendering = _interopRequireDefault(require("./_processrendering"));

// fires events and triggers rendering logic
function reportModified(self, eventOptions) {
  var added = eventOptions.added,
      removed = eventOptions.removed,
      silent = eventOptions.silent,
      method = eventOptions.method,
      dontRender = eventOptions.dontRender;
  var addedLength = added.length;
  var removedLength = removed.length;
  var modified = addedLength || removedLength || method === 'sort' || method === 'reverse';

  var _defs$get = _defs["default"].get(self),
      events = _defs$get.events;

  var _self$renderIfPossibl = self.renderIfPossible,
      renderIfPossible = _self$renderIfPossibl === void 0 ? true : _self$renderIfPossibl;
  var asteriskAddEvtName = '_asterisk:add';
  var asteriskRemoveEvtName = '_asterisk:remove'; // if something is added and an array has delegated "asterisk" events
  // then attatch delegated event handlers to newly added items

  if (addedLength && events[asteriskAddEvtName]) {
    (0, _triggerone["default"])(self, asteriskAddEvtName, eventOptions);
  } // if something is removed and an array has delegated "asterisk" events
  // then remove delegated event handlers from removed items


  if (removedLength && events[asteriskRemoveEvtName]) {
    (0, _triggerone["default"])(self, asteriskRemoveEvtName, eventOptions);
  }

  if (!silent) {
    // fire additional event name (like "push")
    if (events[method]) {
      (0, _triggerone["default"])(self, method, eventOptions);
    } // if something is added then fire add and addone events


    if (addedLength) {
      if (events.add) {
        (0, _triggerone["default"])(self, 'add', eventOptions);
      }

      if (events.addone) {
        for (var i = 0; i < addedLength; i++) {
          (0, _triggerone["default"])(self, 'addone', {
            self: self,
            addedItem: added[i]
          });
        }
      }
    } // if something is removed then fire add and addone events


    if (removedLength) {
      if (events.remove) {
        (0, _triggerone["default"])(self, 'remove', eventOptions);
      }

      if (events.removeone) {
        for (var _i = 0; _i < removedLength; _i++) {
          (0, _triggerone["default"])(self, 'removeone', {
            self: self,
            removedItem: removed[_i]
          });
        }
      }
    } // modify event says that something is added or removed


    if (events.modify) {
      (0, _triggerone["default"])(self, 'modify', eventOptions);
    }
  } // trigger rendering logic if possible


  if (modified && !dontRender && renderIfPossible) {
    (0, _processrendering["default"])({
      self: self,
      eventOptions: eventOptions
    });
  }
}
//# sourceMappingURL=_reportmodified.js.map