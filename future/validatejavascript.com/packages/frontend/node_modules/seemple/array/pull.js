"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = pull;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _reportmodified = _interopRequireDefault(require("./_reportmodified"));

var _seempleerror = _interopRequireDefault(require("../_helpers/seempleerror"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// removes array item by given index
function shift(arr, index) {
  for (var i = index; i < arr.length; i++) {
    arr[i] = arr[i + 1];
  }

  delete arr[arr.length - 1];
  arr.length -= 1;
} // finds array item that equals to given value and removes it
// returns removed value


function pullByValue(arr, value) {
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] === value) {
      shift(arr, i);
      return value;
    }
  }

  return undefined;
} // removes array item by given index if the index is not over array length
// returns removed value


function pullByIndex(arr, index) {
  if (index < arr.length) {
    var value = arr[index];
    shift(arr, index);
    return value;
  }

  return undefined;
} // removes an array item by index (if number is given) or by value (if object is given)


function pull(toRemove) {
  var eventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var typeofToRemove = (0, _typeof2["default"])(toRemove);
  var removed;

  if (toRemove && typeofToRemove === 'object') {
    removed = pullByValue(this, toRemove);
  } else if (typeofToRemove === 'number') {
    removed = pullByIndex(this, toRemove);
  } else {
    throw (0, _seempleerror["default"])('pull:to_remove_type', {
      toRemove: toRemove
    });
  }

  if (typeof removed !== 'undefined') {
    (0, _reportmodified["default"])(this, _objectSpread({
      method: 'pull',
      self: this,
      added: [],
      removed: [removed]
    }, eventOptions));
  }

  return removed;
}
//# sourceMappingURL=pull.js.map