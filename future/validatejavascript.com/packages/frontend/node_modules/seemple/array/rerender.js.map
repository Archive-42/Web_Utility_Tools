{"version":3,"sources":["../../src/array/rerender.js"],"names":["rerender","eventOptions","renderIfPossible","self","method","added","removed"],"mappings":";;;;;;;;;;;AAAA;;;;;;AAEA;AACA;AACe,SAASA,QAAT,GAAqC;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AAAA,8BACd,IADc,CAC1CC,gBAD0C;AAAA,MAC1CA,gBAD0C,sCACvB,IADuB;;AAElD,MAAIA,gBAAJ,EAAsB;AACpB,sCAAiB;AACfC,MAAAA,IAAI,EAAE,IADS;AAEfF,MAAAA,YAAY;AACVG,QAAAA,MAAM,EAAE,UADE;AAEVC,QAAAA,KAAK,EAAE,EAFG;AAGVC,QAAAA,OAAO,EAAE;AAHC,SAIPL,YAJO;AAFG,KAAjB;AASD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import processRendering from './_processrendering';\n\n// rerenders not rendered items in an array\n// force rerender when forceRerender event option is truthy\nexport default function rerender(eventOptions = {}) {\n  const { renderIfPossible = true } = this;\n  if (renderIfPossible) {\n    processRendering({\n      self: this,\n      eventOptions: {\n        method: 'rerender',\n        added: [],\n        removed: [],\n        ...eventOptions\n      }\n    });\n  }\n\n  return this;\n}\n"],"file":"rerender.js"}