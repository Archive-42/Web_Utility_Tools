{"version":3,"sources":["../../src/bindnode/_createbindingswitcher.js"],"names":["createBindingSwitcher","object","deepPath","$nodes","binder","eventOptions","bindNode","bindingSwitcher","changeEvent","deepPathLength","length","lastDeepPathItem","value","previousValue","restPath","target","previousTarget","i"],"mappings":";;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACe,SAASA,qBAAT,OAOZ;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,QAKC,QALDA,QAKC;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,SAAO,SAASC,eAAT,GAA2C;AAAA,QAAlBC,WAAkB,uEAAJ,EAAI;AAChD,QAAMC,cAAc,GAAGP,QAAQ,CAACQ,MAAhC;AACA,QAAMC,gBAAgB,GAAGT,QAAQ,CAACO,cAAc,GAAG,CAAlB,CAAjC;AAFgD,QAI9CG,KAJ8C,GAO5CJ,WAP4C,CAI9CI,KAJ8C;AAAA,QAK9CC,aAL8C,GAO5CL,WAP4C,CAK9CK,aAL8C;AAAA,QAM9CC,QAN8C,GAO5CN,WAP4C,CAM9CM,QAN8C;AAQhD,QAAIC,MAAJ,CARgD,CAQpC;;AACZ,QAAIC,cAAJ,CATgD,CAS5B;;AAGpB,QAAIJ,KAAK,IAAI,yBAAOA,KAAP,MAAiB,QAA1B,IAAsCE,QAA1C,EAAoD;AAClD;AACAC,MAAAA,MAAM,GAAGH,KAAT;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACJ,MAA7B,EAAqCO,CAAC,EAAtC,EAA0C;AACxCF,QAAAA,MAAM,GAAGA,MAAM,CAACD,QAAQ,CAACG,CAAD,CAAT,CAAf;;AACA,YAAI,CAACF,MAAL,EAAa;AACX;AACD;AACF;AACF,KATD,MASO;AACL;AACAA,MAAAA,MAAM,GAAGd,MAAT;;AACA,WAAK,IAAIgB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGR,cAAc,GAAG,CAArC,EAAwCQ,EAAC,EAAzC,EAA6C;AAC3CF,QAAAA,MAAM,GAAGA,MAAM,CAACb,QAAQ,CAACe,EAAD,CAAT,CAAf;;AACA,YAAI,CAACF,MAAL,EAAa;AACX;AACD;AACF;AACF,KA9B+C,CAgChD;;;AACA,QAAIF,aAAa,IAAI,yBAAOA,aAAP,MAAyB,QAA1C,IAAsDC,QAA1D,EAAoE;AAClEE,MAAAA,cAAc,GAAGH,aAAjB;;AACA,WAAK,IAAII,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGH,QAAQ,CAACJ,MAA7B,EAAqCO,GAAC,EAAtC,EAA0C;AACxCD,QAAAA,cAAc,GAAGA,cAAc,CAACF,QAAQ,CAACG,GAAD,CAAT,CAA/B;;AACA,YAAI,CAACD,cAAL,EAAqB;AACnB;AACD;AACF;AACF,KAzC+C,CA2ChD;;;AACA,QAAID,MAAM,IAAI,yBAAOA,MAAP,MAAkB,QAAhC,EAA0C;AACxCT,MAAAA,QAAQ,CAACS,MAAD,EAASJ,gBAAT,EAA2BR,MAA3B,EAAmCC,MAAnC,EAA2CC,YAA3C,CAAR;AACD,KA9C+C,CAgDhD;;;AACA,QAAIW,cAAc,IAAI,yBAAOA,cAAP,MAA0B,QAAhD,EAA0D;AACxD,kCAAWA,cAAX,EAA2BL,gBAA3B,EAA6CR,MAA7C;AACD;AACF,GApDD;AAqDD","sourcesContent":["import unbindNode from '../unbindnode';\n\n// returns a function which re-adds binding when object branch is changed\n// the function is called by bindNode when something like\n// 'foo.bar.baz' is passed to it as key argument value\n// this is one of the hardest things in the framework to understand\nexport default function createBindingSwitcher({\n  object,\n  deepPath,\n  $nodes,\n  binder,\n  eventOptions,\n  bindNode\n}) {\n  return function bindingSwitcher(changeEvent = {}) {\n    const deepPathLength = deepPath.length;\n    const lastDeepPathItem = deepPath[deepPathLength - 1];\n    const {\n      value, // new value of a branch\n      previousValue, // previous value of a branch\n      restPath // path starting currently changed branch (passed by addTreeListener)\n    } = changeEvent;\n    let target; // an object to call bindNode\n    let previousTarget; // an object to call unbindNode\n\n\n    if (value && typeof value === 'object' && restPath) {\n      // if rest path is given and new value is an object\n      target = value;\n      for (let i = 0; i < restPath.length; i++) {\n        target = target[restPath[i]];\n        if (!target) {\n          break;\n        }\n      }\n    } else {\n      // if rest path is not given\n      target = object;\n      for (let i = 0; i < deepPathLength - 1; i++) {\n        target = target[deepPath[i]];\n        if (!target) {\n          break;\n        }\n      }\n    }\n\n    // if rest path is given and previous value is an object\n    if (previousValue && typeof previousValue === 'object' && restPath) {\n      previousTarget = previousValue;\n      for (let i = 0; i < restPath.length; i++) {\n        previousTarget = previousTarget[restPath[i]];\n        if (!previousTarget) {\n          break;\n        }\n      }\n    }\n\n    // add binding for new target\n    if (target && typeof target === 'object') {\n      bindNode(target, lastDeepPathItem, $nodes, binder, eventOptions);\n    }\n\n    // remove binding for previously used object\n    if (previousTarget && typeof previousTarget === 'object') {\n      unbindNode(previousTarget, lastDeepPathItem, $nodes);\n    }\n  };\n}\n"],"file":"_createbindingswitcher.js"}