{"version":3,"sources":["../../src/bindnode/_getnodes.js"],"names":["htmlReg","customSelectorReg","getNodes","object","selector","test","dom","$"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,OAAO,GAAG,GAAhB;AACA,IAAMC,iBAAiB,GAAG,4BAA1B,C,CAEA;AACA;AACA;;AACe,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AACjD,MACE,OAAOA,QAAP,KAAoB,QAApB,IACO,CAACJ,OAAO,CAACK,IAAR,CAAaD,QAAb,CADR,IAEOH,iBAAiB,CAACI,IAAlB,CAAuBD,QAAvB,CAHT,EAIE;AACA,WAAO,6BAAYD,MAAZ,EAAoBC,QAApB,CAAP;AACD;;AAED,SAAOE,gBAAIC,CAAJ,CAAMH,QAAN,CAAP;AACD","sourcesContent":["import selectNodes from './_selectnodes';\nimport dom from '../_dom';\n\nconst htmlReg = /</;\nconst customSelectorReg = /:sandbox|:bound\\(([^(]*)\\)/;\n\n// the function works just like DOM library accepting any kind of arg\n// (HTML string, Node, NodeList etc) bu allows to pass custom selector\n// eg :bound(KEY) and :sandbox\nexport default function getNodes(object, selector) {\n  if (\n    typeof selector === 'string'\n        && !htmlReg.test(selector)\n        && customSelectorReg.test(selector)\n  ) {\n    return selectNodes(object, selector);\n  }\n\n  return dom.$(selector);\n}\n"],"file":"_getnodes.js"}