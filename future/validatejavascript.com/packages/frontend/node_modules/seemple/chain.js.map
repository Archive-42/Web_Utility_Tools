{"version":3,"sources":["../src/chain.js"],"names":["prototype","constructor","object","methodNames","Object","keys","universalMethods","i","methodName","method","chainedMethod","args","arguments","argument","push","undefined","length","ChainClass","chain"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,WADgB,uBACJC,MADI,EACI;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;AAHe,CAAlB;AAMA,IAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYC,gBAAZ,CAApB,C,CAEA;;2BACSC,C;AACP,MAAMC,UAAU,GAAGL,WAAW,CAACI,CAAD,CAA9B;AACA,MAAME,MAAM,GAAGH,gBAAgB,CAACE,UAAD,CAA/B,C,CAEA;;AACAR,EAAAA,SAAS,CAACQ,UAAD,CAAT,GAAwB,SAASE,aAAT,GAAyB;AAC/C,QAAMC,IAAI,GAAG,CAAC,KAAKT,MAAN,CAAb;AAEA,6BAAQU,SAAR,EAAmB,UAACC,QAAD,EAAc;AAC/BF,MAAAA,IAAI,CAACG,IAAL,CAAUD,QAAV;AACD,KAFD;AAIA,2BAAMJ,MAAN,EAAcM,SAAd,EAAyBJ,IAAzB,EAP+C,CAS/C;;AACA,WAAO,IAAP;AACD,GAXD;;;AALF,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACa,MAAhC,EAAwCT,CAAC,EAAzC,EAA6C;AAAA,QAApCA,CAAoC;AAiB5C;;AAED,IAAMU,UAAU,GAAG,uBAAMjB,SAAN,CAAnB,C,CAEA;;AACe,SAASkB,KAAT,CAAehB,MAAf,EAAuB;AACpC;AACA,mCAAgBA,MAAhB,EAAwB,OAAxB;AAEA,SAAO,IAAIe,UAAJ,CAAef,MAAf,CAAP;AACD","sourcesContent":["import checkObjectType from './_helpers/checkobjecttype';\nimport forEach from './_helpers/foreach';\nimport * as universalMethods from './seemple/_universalmethods';\nimport Class from './class';\nimport apply from './_helpers/apply';\n\n// create a prototype of ChainClass\n// store target object at \"object\" property\nconst prototype = {\n  constructor(object) {\n    this.object = object;\n  }\n};\n\nconst methodNames = Object.keys(universalMethods);\n\n// iterate over all universal methods\nfor (let i = 0; i < methodNames.length; i++) {\n  const methodName = methodNames[i];\n  const method = universalMethods[methodName];\n\n  // create every chained method\n  prototype[methodName] = function chainedMethod() {\n    const args = [this.object];\n\n    forEach(arguments, (argument) => {\n      args.push(argument);\n    });\n\n    apply(method, undefined, args);\n\n    // returning this is important for chained calls\n    return this;\n  };\n}\n\nconst ChainClass = Class(prototype);\n\n// the function allows to chain static function calls on any object\nexport default function chain(object) {\n  // check for type and throw an error if it is not an object and is not a function\n  checkObjectType(object, 'chain');\n\n  return new ChainClass(object);\n}\n"],"file":"chain.js"}