{"version":3,"sources":["../src/instantiate.js"],"names":["defaultUpdateFunction","instance","data","isSeempleArray","recreate","isSeempleObject","setData","replaceData","createInstantiateMediator","UsedClass","updateFunction","mediator","value","previousValue","key","object","call","instantiate","givenKeys","givenUpdateFunction","isSeemple","isKeysArray","Array","objVal","objKey","keys"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,SAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,IAAzC,EAA+C;AAC7C,MAAID,QAAQ,CAACE,cAAb,EAA6B;AAC3BF,IAAAA,QAAQ,CAACG,QAAT,CAAkBF,IAAlB;AACD,GAFD,MAEO,IAAID,QAAQ,CAACI,eAAb,EAA8B;AACnCJ,IAAAA,QAAQ,CAACK,OAAT,CAAiBJ,IAAjB,EAAuB;AAAEK,MAAAA,WAAW,EAAE;AAAf,KAAvB;AACD,GAFM,MAEA;AACL;AACA,4BAAON,QAAP,EAAiBC,IAAjB;AACD;AACF,C,CAED;;;AACA,SAASM,yBAAT,OAGG;AAAA,MAFDC,SAEC,QAFDA,SAEC;AAAA,MADDC,cACC,QADDA,cACC;AACD,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,aAAzB,EAAwCC,GAAxC,EAA6CC,MAA7C,EAAqD;AAC1D,QAAIF,aAAa,YAAYJ,SAA7B,EAAwC;AACtCC,MAAAA,cAAc,CAACM,IAAf,CAAoBD,MAApB,EAA4BF,aAA5B,EAA2CD,KAA3C,EAAkDE,GAAlD;AACA,aAAOD,aAAP;AACD;;AAED,WAAO,IAAIJ,SAAJ,CAAcG,KAAd,EAAqBG,MAArB,EAA6BD,GAA7B,CAAP;AACD,GAPD;AAQD,C,CAGD;AACA;;;AACe,SAASG,WAAT,CAAqBF,MAArB,EAA6BG,SAA7B,EAAwCT,SAAxC,EAAmDU,mBAAnD,EAAwE;AACrF,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,mBAAmB,GAAGV,SAAtB;AACAA,IAAAA,SAAS,GAAGS,SAAZ;AACAA,IAAAA,SAAS,GAAGH,MAAZ;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GARD,MAQO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,aAAxB;AACD;;AAED,MAAMM,WAAW,GAAGH,SAAS,YAAYI,KAAzC,CAdqF,CAgBrF;;AACA,MAAI,yBAAOJ,SAAP,MAAqB,QAArB,IAAiC,CAACG,WAAtC,EAAmD;AACjD,4BAAOH,SAAP,EAAkB,UAACK,MAAD,EAASC,MAAT;AAAA,aAAoBP,WAAW,CAACF,MAAD,EAASS,MAAT,EAAiBD,MAAjB,EAAyBd,SAAzB,CAA/B;AAAA,KAAlB;AACA,WAAOM,MAAP;AACD,GApBoF,CAsBrF;;;AACA,MAAMU,IAAI,GAAGJ,WAAW,GAAGH,SAAH,GAAe,CAACA,SAAD,CAAvC;AACA,MAAMR,cAAc,GAAGS,mBAAmB,IAAInB,qBAA9C;AACA,MAAMW,QAAQ,GAAGH,yBAAyB,CAAC;AACzCC,IAAAA,SAAS,EAATA,SADyC;AAEzCC,IAAAA,cAAc,EAAdA;AAFyC,GAAD,CAA1C,CAzBqF,CA8BrF;;AACA,2BAAQe,IAAR,EAAc,UAACX,GAAD;AAAA,WAAS,yBAAQC,MAAR,EAAgBD,GAAhB,EAAqBH,QAArB,CAAT;AAAA,GAAd;AAEA,SAAOI,MAAP;AACD","sourcesContent":["import checkObjectType from './_helpers/checkobjecttype';\nimport forOwn from './_helpers/forown';\nimport forEach from './_helpers/foreach';\nimport assign from './_helpers/assign';\nimport mediate from './mediate';\n\n// the function is used when no update function is given\nfunction defaultUpdateFunction(instance, data) {\n  if (instance.isSeempleArray) {\n    instance.recreate(data);\n  } else if (instance.isSeempleObject) {\n    instance.setData(data, { replaceData: true });\n  } else {\n    // for other objects just extend them with given data\n    assign(instance, data);\n  }\n}\n\n// returns mediator which controls assignments\nfunction createInstantiateMediator({\n  UsedClass,\n  updateFunction\n}) {\n  return function mediator(value, previousValue, key, object) {\n    if (previousValue instanceof UsedClass) {\n      updateFunction.call(object, previousValue, value, key);\n      return previousValue;\n    }\n\n    return new UsedClass(value, object, key);\n  };\n}\n\n\n// creates an instance of given class as property value\n// and updates an instance on new value assignment instead of actual assignment\nexport default function instantiate(object, givenKeys, UsedClass, givenUpdateFunction) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    givenUpdateFunction = UsedClass;\n    UsedClass = givenKeys;\n    givenKeys = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'instantiate');\n  }\n\n  const isKeysArray = givenKeys instanceof Array;\n\n  // allow to use key-class object\n  if (typeof givenKeys === 'object' && !isKeysArray) {\n    forOwn(givenKeys, (objVal, objKey) => instantiate(object, objKey, objVal, UsedClass));\n    return object;\n  }\n\n  // allow to use both single key and an array of keys\n  const keys = isKeysArray ? givenKeys : [givenKeys];\n  const updateFunction = givenUpdateFunction || defaultUpdateFunction;\n  const mediator = createInstantiateMediator({\n    UsedClass,\n    updateFunction\n  });\n\n  // iterate over all keys and define created mediator for all of them\n  forEach(keys, (key) => mediate(object, key, mediator));\n\n  return object;\n}\n"],"file":"instantiate.js"}