"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = removeListener;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defs = _interopRequireDefault(require("../_core/defs"));

var _triggerone = _interopRequireDefault(require("../trigger/_triggerone"));

var _domeventregexp = _interopRequireDefault(require("../on/_domeventregexp"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

var _forown = _interopRequireDefault(require("../_helpers/forown"));

// removes simple event listener from an object
function removeListener(object, name, callback, context, info) {
  var def = _defs["default"].get(object); // if no definition do nothing


  if (!def) {
    return false;
  }

  var allEvents = def.events;
  var events = allEvents[name];
  var retain = [];
  var noTrigger = name ? name[0] === '_' : false;

  var domEventExecResult = _domeventregexp["default"].exec(name);

  if (domEventExecResult) {
    var _domEventExecResult = (0, _slicedToArray2["default"])(domEventExecResult, 4),
        eventName = _domEventExecResult[1],
        _domEventExecResult$ = _domEventExecResult[2],
        key = _domEventExecResult$ === void 0 ? 'sandbox' : _domEventExecResult$,
        selector = _domEventExecResult[3]; // fixing circular reference issue


    var removeDomListener = require('./_removedomlistener')["default"];

    removeDomListener(object, key, eventName, selector, callback, context, info);
    return true;
  } // if all events need to be removed


  if (typeof name === 'undefined') {
    if (!noTrigger) {
      (0, _forown["default"])(allEvents, function (allEventsItem, allEventsName) {
        (0, _foreach["default"])(allEventsItem, function (event) {
          var removeEventData = {
            allEventsName: allEventsName,
            callback: event.callback,
            context: event.context
          };
          (0, _triggerone["default"])(object, "removeevent:".concat(name), removeEventData);
          (0, _triggerone["default"])(object, 'removeevent', removeEventData);
        });
      });
    } // restore default value of "events"


    def.events = {};
  } else if (events) {
    // if events with given name are found
    (0, _foreach["default"])(events, function (event) {
      var argCallback = callback && callback._callback || callback;
      var eventCallback = event.callback._callback || event.callback;

      if (argCallback && argCallback !== eventCallback || context && context !== event.context) {
        // keep event
        retain.push(event);
      } else {
        var removeEventData = {
          name: name,
          callback: event.callback,
          context: event.context
        };

        if (!noTrigger) {
          (0, _triggerone["default"])(object, "removeevent:".concat(name), removeEventData);
          (0, _triggerone["default"])(object, 'removeevent', removeEventData);
        }
      }
    });

    if (retain.length) {
      allEvents[name] = retain;
    } else {
      delete def.events[name];
    }
  }

  return false;
}
//# sourceMappingURL=_removelistener.js.map