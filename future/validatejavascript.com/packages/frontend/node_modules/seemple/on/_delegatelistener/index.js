"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = delegateListener;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _addlistener = _interopRequireDefault(require("../_addlistener"));

var _defs = _interopRequireDefault(require("../../_core/defs"));

var _arrayaddhandler = _interopRequireDefault(require("./arrayaddhandler"));

var _objectsethandler = _interopRequireDefault(require("./objectsethandler"));

var _arrayremovehandler = _interopRequireDefault(require("./arrayremovehandler"));

var _objectremovehandler = _interopRequireDefault(require("./objectremovehandler"));

var _changehandler = _interopRequireDefault(require("./changehandler"));

var _forown = _interopRequireDefault(require("../../_helpers/forown"));

// adds delegated event listener to an object by given path
function delegateListener(object, givenPath, name, callback, context) {
  var info = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  // if typeof path is string and path is not empty string then split it
  var path = typeof givenPath === 'string' && givenPath !== '' ? givenPath.split('.') : givenPath;

  if (!path || !path.length) {
    // if no path then add simple listener
    (0, _addlistener["default"])(object, name, callback, context, info);
  } else {
    // else do all magic
    var key = path[0];
    var pathStr; // needed for undelegation

    if (path.length > 1) {
      path = path.slice(1);
      pathStr = path.join('.');
    } else {
      path = [];
      pathStr = path[0] || '';
    }

    var delegatedData = {
      path: path,
      name: name,
      callback: callback,
      context: context,
      info: info,
      object: object
    };

    if (key === '*') {
      // handling asterisk events
      // { skipChecks: true } allows to use same event name and event handler few times
      if (object.isSeempleArray) {
        // the event is triggered when something is added to an array
        (0, _addlistener["default"])(object, '_asterisk:add', _arrayaddhandler["default"], null, {
          delegatedData: delegatedData,
          pathStr: pathStr,
          skipChecks: true
        }); // the event is triggered when something is removed from an array

        (0, _addlistener["default"])(object, '_asterisk:remove', _arrayremovehandler["default"], null, {
          delegatedData: delegatedData,
          pathStr: pathStr,
          skipChecks: true
        }); // call handler manually to delegate listener for currently existing data props

        (0, _arrayaddhandler["default"])({
          added: object
        }, delegatedData);
      } else if (object.isSeempleObject) {
        var def = _defs["default"].get(object); // the event is triggered when data prop is changed


        (0, _addlistener["default"])(object, '_asterisk:set', _objectsethandler["default"], null, {
          delegatedData: delegatedData,
          pathStr: pathStr,
          skipChecks: true
        }); // the event is triggered when data prop is removed

        (0, _addlistener["default"])(object, '_asterisk:remove', _objectremovehandler["default"], null, {
          delegatedData: delegatedData,
          pathStr: pathStr,
          skipChecks: true
        }); // delegate listener for currently existing data props

        (0, _forown["default"])(def.keys, function (_, defKey) {
          var item = object[defKey];

          if (item && (0, _typeof2["default"])(item) === 'object') {
            delegateListener(item, path, name, callback, context, info);
          }
        });
      }
    } else {
      // handling non-asterisk delegated event
      // the event is triggered by "set"
      (0, _addlistener["default"])(object, "_change:delegated:".concat(key), _changehandler["default"], null, {
        delegatedData: delegatedData,
        pathStr: pathStr
      }); // call handler manually

      (0, _changehandler["default"])({
        value: object[key]
      }, delegatedData);
    }
  }
}
//# sourceMappingURL=index.js.map