"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = on;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _splitbyspaceregexp = _interopRequireDefault(require("./_splitbyspaceregexp"));

var _checkobjecttype = _interopRequireDefault(require("../_helpers/checkobjecttype"));

var _seempleerror = _interopRequireDefault(require("../_helpers/seempleerror"));

var _forown = _interopRequireDefault(require("../_helpers/forown"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

var _addlistener = _interopRequireDefault(require("./_addlistener"));

var _delegatelistener = _interopRequireDefault(require("./_delegatelistener"));

// adds event listener
function on(object, givenNames, callback, triggerOnInit, context) {
  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args

    /* eslint-disable no-param-reassign */
    context = triggerOnInit;
    triggerOnInit = callback;
    callback = givenNames;
    givenNames = object;
    object = this;
    /* eslint-enable no-param-reassign */
  } else {
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'on');
  }

  var isNamesVarArray = givenNames instanceof Array; // allow to pass name-handler object

  if (givenNames && (0, _typeof2["default"])(givenNames) === 'object' && !isNamesVarArray) {
    (0, _forown["default"])(givenNames, function (namesObjCallback, namesObjName) {
      return on(object, namesObjName, namesObjCallback, callback, triggerOnInit);
    });
    return object;
  }

  if (typeof givenNames !== 'string' && !isNamesVarArray) {
    throw (0, _seempleerror["default"])('on:names_type', {
      names: givenNames
    });
  } // split by spaces
  // TODO: Array of names passed to on method is non-documented feature


  var names = isNamesVarArray ? givenNames : givenNames.split(_splitbyspaceregexp["default"]); // flip triggerOnInit and context when triggerOnInit is not boolean

  if (typeof triggerOnInit !== 'boolean' && typeof triggerOnInit !== 'undefined') {
    // eslint-disable-next-line no-param-reassign
    var _ref = [triggerOnInit, context];
    context = _ref[0];
    triggerOnInit = _ref[1];
  }

  (0, _foreach["default"])(names, function (name) {
    var delegatedEventParts = name.split('@');

    if (delegatedEventParts.length > 1) {
      // if @ exists in event name then this is delegated event
      var _delegatedEventParts = (0, _slicedToArray2["default"])(delegatedEventParts, 2),
          path = _delegatedEventParts[0],
          delegatedName = _delegatedEventParts[1];

      (0, _delegatelistener["default"])(object, path, delegatedName, callback, context || object);
    } else {
      // if not, this is simple event
      (0, _addlistener["default"])(object, name, callback, context);
    }
  }); // call callback immediatelly if triggerOnInit is true

  if (triggerOnInit === true) {
    callback.call(context || object, {
      triggerOnInit: triggerOnInit
    });
  }

  return object;
}
//# sourceMappingURL=index.js.map