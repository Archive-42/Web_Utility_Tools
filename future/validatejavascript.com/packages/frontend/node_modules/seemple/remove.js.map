{"version":3,"sources":["../src/remove.js"],"names":["remove","object","givenKey","eventOptions","isSeemple","def","defs","get","silent","keys","Array","i","key","props","propDef","value","removeEventPrefies","prefix","extendedEventOptions","length"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;AACA;AACe,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,YAAlC,EAAgD;AAC7D,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,YAAY,GAAGD,QAAf;AACAA,IAAAA,QAAQ,GAAGD,MAAX;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GAPD,MAOO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,QAAxB;AACD;;AAEDE,EAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B,CAb6D,CAa1B;;AACnC,MAAME,GAAG,GAAGC,iBAAKC,GAAL,CAASN,MAAT,CAAZ;;AAd6D,sBAe1CE,YAf0C;AAAA,MAerDK,MAfqD,iBAerDA,MAfqD,EAgB7D;;AACA,MAAMC,IAAI,GAAGP,QAAQ,YAAYQ,KAApB,GAA4BR,QAA5B,GAAuC,CAACA,QAAD,CAApD;;AAjB6D,6BAmBpDS,CAnBoD;AAoB3D,QAAMC,GAAG,GAAGH,IAAI,CAACE,CAAD,CAAhB,CApB2D,CAsB3D;;AACA,QAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,8BAAa,iBAAb,EAAgC;AAAEA,QAAAA,GAAG,EAAHA;AAAF,OAAhC,CAAN;AACD;;AAED,QAAMC,KAAK,GAAGR,GAAG,IAAIA,GAAG,CAACQ,KAAzB;AACA,QAAMC,OAAO,GAAGD,KAAK,IAAIA,KAAK,CAACD,GAAD,CAA9B,CA5B2D,CA8B3D;;AACA,QAAI,CAACE,OAAL,EAAc;AACZ,aAAOb,MAAM,CAACW,GAAD,CAAb;AACA;AACD;;AAlC0D,QAoCnDG,KApCmD,GAoCzCD,OApCyC,CAoCnDC,KApCmD,EAsC3D;;AACA,gCAAWd,MAAX,EAAmBW,GAAnB,EAvC2D,CAyC3D;;AACA,QAAMI,kBAAkB,GAAG,CACzB,cADyB,EAEzB,kBAFyB,EAGzB,mBAHyB,EAIzB,cAJyB,EAKzB,QALyB,EAMzB,cANyB,EAOzB,MAPyB,EAQzB,QARyB,CAA3B,CA1C2D,CAqD3D;;AACA,6BAAQA,kBAAR,EAA4B,UAACC,MAAD;AAAA,aAAY,gCAAehB,MAAf,YAA0BgB,MAA1B,cAAoCL,GAApC,EAAZ;AAAA,KAA5B,EAtD2D,CAwD3D;;AACA,WAAOC,KAAK,CAACD,GAAD,CAAZ,CAzD2D,CA2D3D;;AACA,WAAOX,MAAM,CAACW,GAAD,CAAb;;AAEA,QAAMM,oBAAoB;AACxBN,MAAAA,GAAG,EAAHA,GADwB;AAExBG,MAAAA,KAAK,EAALA;AAFwB,OAGrBZ,YAHqB,CAA1B,CA9D2D,CAoE3D;;;AACA,gCAAWF,MAAX,EAAmB,mBAAnB,EAAwCiB,oBAAxC,EArE2D,CAuE3D;;AACA,QAAI,CAACV,MAAL,EAAa;AACX,kCAAWP,MAAX,EAAmB,QAAnB,EAA6BiB,oBAA7B;AACA,kCAAWjB,MAAX,mBAA6BW,GAA7B,GAAoCM,oBAApC;AACD;AA3E0D;;AAmB7D,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACU,MAAzB,EAAiCR,CAAC,EAAlC,EAAsC;AAAA,qBAA7BA,CAA6B;;AAAA,6BAclC;AA2CH;AACF","sourcesContent":["import unbindNode from './unbindnode';\nimport triggerOne from './trigger/_triggerone';\nimport removeListener from './off/_removelistener';\nimport defs from './_core/defs';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport seempleError from './_helpers/seempleerror';\nimport forEach from './_helpers/foreach';\n\n// removes a property, its bindings and its events\n// TODO: remove function does not correctly removes delegated events, bindings, tree listeners etc\nexport default function remove(object, givenKey, eventOptions) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    eventOptions = givenKey;\n    givenKey = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'remove');\n  }\n\n  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n  const def = defs.get(object);\n  const { silent } = eventOptions;\n  // allow to pass single key or an array of keys\n  const keys = givenKey instanceof Array ? givenKey : [givenKey];\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n\n    // if non-string is passed as a key\n    if (typeof key !== 'string') {\n      throw seempleError('remove:key_type', { key });\n    }\n\n    const props = def && def.props;\n    const propDef = props && props[key];\n\n    // if no object definition then simply delete the property\n    if (!propDef) {\n      delete object[key];\n      continue;\n    }\n\n    const { value } = propDef;\n\n    // remove all bindings\n    unbindNode(object, key);\n\n    // TODO: Manual listing of event prefixes may cause problems in future\n    const removeEventPrefies = [\n      '_change:deps',\n      '_change:bindings',\n      '_change:delegated',\n      '_change:tree',\n      'change',\n      'beforechange',\n      'bind',\n      'unbind'\n    ];\n\n    // remove all events\n    forEach(removeEventPrefies, (prefix) => removeListener(object, `${prefix}:${key}`));\n\n    // delete property definition\n    delete props[key];\n\n    // delete the property itself\n    delete object[key];\n\n    const extendedEventOptions = {\n      key,\n      value,\n      ...eventOptions\n    };\n\n    // trigger delegated events logic removal for asterisk events (*.*.*@foo)\n    triggerOne(object, '_delete:delegated', extendedEventOptions);\n\n    // fire events if \"silent\" is not true\n    if (!silent) {\n      triggerOne(object, 'delete', extendedEventOptions);\n      triggerOne(object, `delete:${key}`, extendedEventOptions);\n    }\n  }\n}\n"],"file":"remove.js"}