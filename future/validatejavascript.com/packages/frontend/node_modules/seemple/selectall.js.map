{"version":3,"sources":["../src/selectall.js"],"names":["customSelectorTestReg","selectAll","object","selector","isSeemple","test","def","defs","get","result","dom","$","propDef","props","sandbox","bindings","node","selected","querySelectorAll","add"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,qBAAqB,GAAG,4BAA9B,C,CAEA;;AACe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AAClD,MAAI,yBAAO,IAAP,MAAgB,QAAhB,IAA4B,KAAKC,SAArC,EAAgD;AAC9C;;AACA;AACAD,IAAAA,QAAQ,GAAGD,MAAX;AACAA,IAAAA,MAAM,GAAG,IAAT;AACA;AACD,GAND,MAMO;AACL;AACA,qCAAgBA,MAAhB,EAAwB,gBAAxB;AACD,GAViD,CAYlD;;;AACA,MAAIF,qBAAqB,CAACK,IAAtB,CAA2BF,QAA3B,CAAJ,EAA0C;AACxC,WAAO,6BAAYD,MAAZ,EAAoBC,QAApB,CAAP;AACD;;AAED,MAAMG,GAAG,GAAGC,iBAAKC,GAAL,CAASN,MAAT,CAAZ;;AACA,MAAIO,MAAM,GAAGC,gBAAIC,CAAJ,EAAb;;AAEA,MAAI,CAACL,GAAD,IAAQ,OAAOH,QAAP,KAAoB,QAAhC,EAA0C;AACxC,WAAOM,MAAP;AACD;;AAED,MAAMG,OAAO,GAAGN,GAAG,CAACO,KAAJ,CAAUC,OAA1B;;AAEA,MAAI,CAACF,OAAL,EAAc;AACZ,WAAOH,MAAP;AACD;;AA5BiD,MA8B1CM,QA9B0C,GA8B7BH,OA9B6B,CA8B1CG,QA9B0C;;AAgClD,MAAIA,QAAJ,EAAc;AACZ;AACA,6BAAQA,QAAR,EAAkB,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAC9B,UAAMC,QAAQ,GAAGD,IAAI,CAACE,gBAAL,CAAsBf,QAAtB,CAAjB;AACAM,MAAAA,MAAM,GAAGA,MAAM,CAACU,GAAP,CAAW,yBAAQF,QAAR,CAAX,CAAT;AACD,KAHD;AAID;;AAED,SAAOR,MAAP;AACD","sourcesContent":["import defs from './_core/defs';\nimport dom from './_dom';\nimport selectNodes from './bindnode/_selectnodes';\nimport toArray from './_helpers/toarray';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport forEach from './_helpers/foreach';\n\nconst customSelectorTestReg = /:sandbox|:bound\\(([^(]*)\\)/;\n\n// selects nodes based on given selector\nexport default function selectAll(object, selector) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    selector = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'selectAll or $');\n  }\n\n  // the selector includes \"custom\" things like :sandbox or :bound(KEY)\n  if (customSelectorTestReg.test(selector)) {\n    return selectNodes(object, selector);\n  }\n\n  const def = defs.get(object);\n  let result = dom.$();\n\n  if (!def || typeof selector !== 'string') {\n    return result;\n  }\n\n  const propDef = def.props.sandbox;\n\n  if (!propDef) {\n    return result;\n  }\n\n  const { bindings } = propDef;\n\n  if (bindings) {\n    // iterate over all bindings and add found nodes\n    forEach(bindings, ({ node }) => {\n      const selected = node.querySelectorAll(selector);\n      result = result.add(toArray(selected));\n    });\n  }\n\n  return result;\n}\n"],"file":"selectall.js"}