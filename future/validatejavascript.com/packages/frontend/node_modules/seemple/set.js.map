{"version":3,"sources":["../src/set.js"],"names":["set","object","key","value","eventOptions","isSeemple","objVal","objKey","def","defs","get","props","events","propDef","previousValue","mediator","skipMediator","fromMediator","force","forceHTML","silent","silentHTML","skipCalc","newValue","isChanged","extendedEventOptions","self","triggerChange","beforechangeStr","beforechangeEventName","changeBindingsEventName","changeStr","changeEventName","changeDepsEventName","changeDelegatedKeyEventName","changeTreeEventName","changeCommonEventName","changeDelegatedEventName"],"mappings":"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","sourcesContent":["import defs from './_core/defs';\nimport triggerOne from './trigger/_triggerone';\nimport checkObjectType from './_helpers/checkobjecttype';\nimport is from './_helpers/is';\nimport forOwn from './_helpers/forown';\n\n// the function sets new value for a property\n// since its performance is very critical we're checking events existence manually\nexport default function set(object, key, value, eventOptions) {\n  if (typeof this === 'object' && this.isSeemple) {\n    // when context is Seemple instance, use this as an object and shift other args\n    /* eslint-disable no-param-reassign */\n    eventOptions = value;\n    value = key;\n    key = object;\n    object = this;\n    /* eslint-enable no-param-reassign */\n  } else {\n    // throw error when object type is wrong\n    checkObjectType(object, 'set');\n  }\n\n  // if no key or falsy key is given\n  if (!key) {\n    return object;\n  }\n\n  // allow to use key-value object as another method variation\n  if (typeof key === 'object') {\n    forOwn(key, (objVal, objKey) => set(object, objKey, objVal, value));\n    return object;\n  }\n\n  eventOptions = eventOptions || {}; // eslint-disable-line no-param-reassign\n  const def = defs.get(object);\n\n  // if no object definition then make simple assignment\n  if (!def) {\n    object[key] = value;\n    return object;\n  }\n\n  const { props, events } = def;\n  const propDef = props[key];\n\n  // if no property definition then make simple assignment\n  if (!propDef) {\n    object[key] = value;\n    return object;\n  }\n\n  const { value: previousValue, mediator } = propDef;\n\n  // possible flags, all of them are falsy by default\n  const {\n    skipMediator,\n    fromMediator,\n    force,\n    forceHTML,\n    silent,\n    silentHTML,\n    skipCalc\n  } = eventOptions;\n\n  let newValue;\n\n  if (mediator && !is(value, previousValue) && !skipMediator && !fromMediator) {\n    newValue = mediator(value);\n  } else {\n    newValue = value;\n  }\n\n  const isChanged = !is(newValue, previousValue);\n\n  // add to eventOptions object some useful properties\n  // we override default eventOptions because some of the properties need to have actual values,\n  // not inherited ones (eg when calc is used)\n  const extendedEventOptions = {\n    ...eventOptions,\n    value: newValue,\n    self: object,\n    previousValue,\n    key,\n    isChanged\n  };\n\n  const triggerChange = (isChanged || force) && !silent;\n\n  // trigger beforechange:KEY and beforechange events\n  if (triggerChange) {\n    const beforechangeStr = 'beforechange';\n    const beforechangeEventName = `${beforechangeStr}:${key}`;\n\n    if (events[beforechangeEventName]) {\n      triggerOne(object, beforechangeEventName, extendedEventOptions);\n    }\n\n    if (events[beforechangeStr]) {\n      triggerOne(object, beforechangeStr, extendedEventOptions);\n    }\n  }\n\n  propDef.value = newValue;\n\n  // triger bindings\n  if (!silentHTML && (isChanged || forceHTML)) {\n    const changeBindingsEventName = `_change:bindings:${key}`;\n    if (events[changeBindingsEventName]) {\n      triggerOne(object, changeBindingsEventName, extendedEventOptions);\n    }\n  }\n\n  // trigger change:KEY and change events\n  if (triggerChange) {\n    const changeStr = 'change';\n    const changeEventName = `${changeStr}:${key}`;\n    if (events[changeEventName]) {\n      triggerOne(object, changeEventName, extendedEventOptions);\n    }\n\n    if (events[changeStr]) {\n      triggerOne(object, changeStr, extendedEventOptions);\n    }\n  }\n\n  // trigger dependencies made by calc method\n  if ((isChanged || force) && !skipCalc) {\n    const changeDepsEventName = `_change:deps:${key}`;\n    if (events[changeDepsEventName]) {\n      triggerOne(object, changeDepsEventName, extendedEventOptions);\n    }\n  }\n\n\n  if (isChanged) {\n    // trigger common delegated events logic\n    const changeDelegatedKeyEventName = `_change:delegated:${key}`;\n    if (events[changeDelegatedKeyEventName]) {\n      triggerOne(object, changeDelegatedKeyEventName, extendedEventOptions);\n    }\n\n    // trigger tree change events logic\n    const changeTreeEventName = `_change:tree:${key}`;\n    if (events[changeTreeEventName]) {\n      triggerOne(object, changeTreeEventName, extendedEventOptions);\n    }\n\n    // trigger other internal change events\n    const changeCommonEventName = `_change:common:${key}`;\n    if (events[changeCommonEventName]) {\n      triggerOne(object, changeCommonEventName, extendedEventOptions);\n    }\n\n    // trigger delegated logic for asterisk events (*.*.*@foo)\n    // TODO: Confusing events names (\"_change:delegated\", \"_change:common:KEY\" etc)\n    const changeDelegatedEventName = '_change:delegated';\n    if (events[changeDelegatedEventName]) {\n      triggerOne(object, changeDelegatedEventName, extendedEventOptions);\n    }\n  }\n\n  return object;\n}\n"],"file":"set.js"}