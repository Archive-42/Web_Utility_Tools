"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = toSeemple;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _foreach = _interopRequireDefault(require("./_helpers/foreach"));

var _forown = _interopRequireDefault(require("./_helpers/forown"));

// recursively converts objects and arrays to Seemple.Object and Seemple.Array instances
function toSeemple(data) {
  // fix circular ref issue
  var SeempleObject = require('./object')["default"];

  var SeempleArray = require('./array')["default"]; // convert only objects


  if (data && (0, _typeof2["default"])(data) === 'object') {
    if ('length' in data) {
      // if length is given convert it to Seemple.Array instance
      var arrayItems = Array(data.length);
      (0, _foreach["default"])(data, function (item, index) {
        arrayItems[index] = toSeemple(item);
      });
      return new SeempleArray().recreate(arrayItems);
    } // if length is not given convert it to Seemple.Object instance


    var object = {};
    (0, _forown["default"])(data, function (value, key) {
      object[key] = toSeemple(value);
    });
    return new SeempleObject(object);
  } // for all non-objects just return passed data


  return data;
}
//# sourceMappingURL=toseemple.js.map