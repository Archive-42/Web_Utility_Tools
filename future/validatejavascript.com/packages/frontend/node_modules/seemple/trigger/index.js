"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = trigger;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _domeventregexp = _interopRequireDefault(require("../on/_domeventregexp"));

var _checkobjecttype = _interopRequireDefault(require("../_helpers/checkobjecttype"));

var _seempleerror = _interopRequireDefault(require("../_helpers/seempleerror"));

var _foreach = _interopRequireDefault(require("../_helpers/foreach"));

var _splitbyspaceregexp = _interopRequireDefault(require("../on/_splitbyspaceregexp"));

var _defs = _interopRequireDefault(require("../_core/defs"));

var _triggerone = _interopRequireDefault(require("./_triggerone"));

var _triggerdomevent = _interopRequireDefault(require("./_triggerdomevent"));

// triggers an event
function trigger() {
  var object;
  var givenNames;
  var triggerArgs;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if ((0, _typeof2["default"])(this) === 'object' && this.isSeemple) {
    // when context is Seemple instance, use this as an object and shift other args
    givenNames = args[0];
    triggerArgs = args.slice(1);
    object = this;
  } else {
    object = args[0];
    givenNames = args[1];
    triggerArgs = args.slice(2);
    // throw error when object type is wrong
    (0, _checkobjecttype["default"])(object, 'trigger');
  }

  var names; // allow to use strings only as event name

  if (typeof givenNames === 'string') {
    names = givenNames.split(_splitbyspaceregexp["default"]);
  } else {
    throw (0, _seempleerror["default"])('trigger:names_type', {
      names: givenNames
    });
  }

  var def = _defs["default"].get(object); // if no definition do nothing


  if (!def) {
    return object;
  }

  var allEvents = def.events;

  if (!allEvents) {
    return object;
  }

  (0, _foreach["default"])(names, function (name) {
    var domEvtExecResult = _domeventregexp["default"].exec(name);

    if (domEvtExecResult) {
      // if EVT::KEY(SELECTOR) ia passed as event name then trigger DOM event
      var _domEvtExecResult = (0, _slicedToArray2["default"])(domEvtExecResult, 4),
          eventName = _domEvtExecResult[1],
          _domEvtExecResult$ = _domEvtExecResult[2],
          key = _domEvtExecResult$ === void 0 ? 'sandbox' : _domEvtExecResult$,
          selector = _domEvtExecResult[3];

      (0, _triggerdomevent["default"])(object, key, eventName, selector, triggerArgs);
    } else {
      // trigger ordinary event
      (0, _triggerone["default"])(object, name, triggerArgs);
    }
  });
  return object;
}
//# sourceMappingURL=index.js.map